/* tslint:disable */
/* eslint-disable */
/**
 * Telegram Bot API - REST API Client
 * The Bot API is an HTTP-based interface created for developers keen on building bots for Telegram. To learn how to create and set up a bot, please consult our Introduction to Bots and Bot FAQ.
 * 
 * ## Metadata
 *   
 * - **Copyright**: Copyright (c) 2025 Qntx
 * - **Author**: ΣX <gitctrlx@gmail.com>
 * - **Version**: 9.0.0
 * - **Modified**: 2025-07-01T14:36:23.816683278Z[Etc/UTC]
 * - **Generator Version**: 7.14.0
 *
 * <details>
 * <summary><strong>⚠️ Important Disclaimer & Limitation of Liability</strong></summary>
 * <br>
 * > **IMPORTANT**: This software is provided "as is" without any warranties, express or implied, including but not limited
 * > to warranties of merchantability, fitness for a particular purpose, or non-infringement. The developers, contributors,
 * > and licensors (collectively, "Developers") make no representations regarding the accuracy, completeness, or reliability
 * > of this software or its outputs.
 * >
 * > This client is not intended to provide financial, investment, tax, or legal advice. It facilitates interaction with the
 * > Telegram Bot API service but does not endorse or recommend any financial actions, including the purchase, sale, or holding of
 * > financial instruments (e.g., stocks, bonds, derivatives, cryptocurrencies). Users must consult qualified financial or
 * > legal professionals before making decisions based on this software's outputs.
 * >
 * > Financial markets are inherently speculative and carry significant risks. Using this software in trading, analysis, or
 * > other financial activities may result in substantial losses, including total loss of capital. The Developers are not
 * > liable for any losses or damages arising from such use. Users assume full responsibility for validating the software's
 * > outputs and ensuring their suitability for intended purposes.
 * >
 * > This client may rely on third-party data or services (e.g., market feeds, APIs). The Developers do not control or verify
 * > the accuracy of these services and are not liable for any errors, delays, or losses resulting from their use. Users must
 * > comply with third-party terms and conditions.
 * >
 * > Users are solely responsible for ensuring compliance with all applicable financial, tax, and regulatory requirements in
 * > their jurisdiction. This includes obtaining necessary licenses or approvals for trading or investment activities. The
 * > Developers disclaim liability for any legal consequences arising from non-compliance.
 * >
 * > To the fullest extent permitted by law, the Developers shall not be liable for any direct, indirect, incidental,
 * > consequential, or punitive damages arising from the use or inability to use this software, including but not limited to
 * > loss of profits, data, or business opportunities.
 *
 * </details>
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * This object describes the types of gifts that can be gifted to a user or a chat.
 * @export
 * @interface AcceptedGiftTypes
 */
export interface AcceptedGiftTypes {
    /**
     * True, if unlimited regular gifts are accepted
     * @type {boolean}
     * @memberof AcceptedGiftTypes
     */
    'unlimited_gifts': boolean;
    /**
     * True, if limited regular gifts are accepted
     * @type {boolean}
     * @memberof AcceptedGiftTypes
     */
    'limited_gifts': boolean;
    /**
     * True, if unique gifts or gifts that can be upgraded to unique for free are accepted
     * @type {boolean}
     * @memberof AcceptedGiftTypes
     */
    'unique_gifts': boolean;
    /**
     * True, if a Telegram Premium subscription is accepted
     * @type {boolean}
     * @memberof AcceptedGiftTypes
     */
    'premium_subscription': boolean;
}
/**
 * Contains information about the affiliate that received a commission via this transaction.
 * @export
 * @interface AffiliateInfo
 */
export interface AffiliateInfo {
    /**
     * The number of Telegram Stars received by the affiliate for each 1000 Telegram Stars received by the bot from referred users
     * @type {number}
     * @memberof AffiliateInfo
     */
    'commission_per_mille': number;
    /**
     * Integer amount of Telegram Stars received by the affiliate from the transaction, rounded to 0; can be negative for refunds
     * @type {number}
     * @memberof AffiliateInfo
     */
    'amount': number;
    /**
     * 
     * @type {User}
     * @memberof AffiliateInfo
     */
    'affiliate_user'?: User;
    /**
     * 
     * @type {Chat}
     * @memberof AffiliateInfo
     */
    'affiliate_chat'?: Chat;
    /**
     * *Optional*. The number of 1/1000000000 shares of Telegram Stars received by the affiliate; from -999999999 to 999999999; can be negative for refunds
     * @type {number}
     * @memberof AffiliateInfo
     */
    'nanostar_amount'?: number;
}
/**
 * This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
 * @export
 * @interface Animation
 */
export interface Animation {
    /**
     * Identifier for this file, which can be used to download or reuse the file
     * @type {string}
     * @memberof Animation
     */
    'file_id': string;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
     * @type {string}
     * @memberof Animation
     */
    'file_unique_id': string;
    /**
     * Video width as defined by the sender
     * @type {number}
     * @memberof Animation
     */
    'width': number;
    /**
     * Video height as defined by the sender
     * @type {number}
     * @memberof Animation
     */
    'height': number;
    /**
     * Duration of the video in seconds as defined by the sender
     * @type {number}
     * @memberof Animation
     */
    'duration': number;
    /**
     * 
     * @type {PhotoSize}
     * @memberof Animation
     */
    'thumbnail'?: PhotoSize;
    /**
     * *Optional*. Original animation filename as defined by the sender
     * @type {string}
     * @memberof Animation
     */
    'file_name'?: string;
    /**
     * *Optional*. MIME type of the file as defined by the sender
     * @type {string}
     * @memberof Animation
     */
    'mime_type'?: string;
    /**
     * *Optional*. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
     * @type {number}
     * @memberof Animation
     */
    'file_size'?: number;
}
/**
 * 
 * @export
 * @interface AnswerCallbackQueryPostRequest
 */
export interface AnswerCallbackQueryPostRequest {
    /**
     * Unique identifier for the query to be answered
     * @type {string}
     * @memberof AnswerCallbackQueryPostRequest
     */
    'callback_query_id': string;
    /**
     * Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
     * @type {string}
     * @memberof AnswerCallbackQueryPostRequest
     */
    'text'?: string;
    /**
     * If *True*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
     * @type {boolean}
     * @memberof AnswerCallbackQueryPostRequest
     */
    'show_alert'?: boolean;
    /**
     * URL that will be opened by the user\'s client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@BotFather](https://t.me/botfather), specify the URL that opens your game - note that this will only work if the query comes from a [*callback\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.    Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
     * @type {string}
     * @memberof AnswerCallbackQueryPostRequest
     */
    'url'?: string;
    /**
     * The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
     * @type {number}
     * @memberof AnswerCallbackQueryPostRequest
     */
    'cache_time'?: number;
}
/**
 * 
 * @export
 * @interface AnswerInlineQueryPostRequest
 */
export interface AnswerInlineQueryPostRequest {
    /**
     * Unique identifier for the answered query
     * @type {string}
     * @memberof AnswerInlineQueryPostRequest
     */
    'inline_query_id': string;
    /**
     * A JSON-serialized array of results for the inline query
     * @type {Array<InlineQueryResult>}
     * @memberof AnswerInlineQueryPostRequest
     */
    'results': Array<InlineQueryResult>;
    /**
     * The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
     * @type {number}
     * @memberof AnswerInlineQueryPostRequest
     */
    'cache_time'?: number;
    /**
     * Pass *True* if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query.
     * @type {boolean}
     * @memberof AnswerInlineQueryPostRequest
     */
    'is_personal'?: boolean;
    /**
     * Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don\'t support pagination. Offset length can\'t exceed 64 bytes.
     * @type {string}
     * @memberof AnswerInlineQueryPostRequest
     */
    'next_offset'?: string;
    /**
     * 
     * @type {InlineQueryResultsButton}
     * @memberof AnswerInlineQueryPostRequest
     */
    'button'?: InlineQueryResultsButton;
}
/**
 * 
 * @export
 * @interface AnswerPreCheckoutQueryPostRequest
 */
export interface AnswerPreCheckoutQueryPostRequest {
    /**
     * Unique identifier for the query to be answered
     * @type {string}
     * @memberof AnswerPreCheckoutQueryPostRequest
     */
    'pre_checkout_query_id': string;
    /**
     * Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
     * @type {boolean}
     * @memberof AnswerPreCheckoutQueryPostRequest
     */
    'ok': boolean;
    /**
     * Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.
     * @type {string}
     * @memberof AnswerPreCheckoutQueryPostRequest
     */
    'error_message'?: string;
}
/**
 * 
 * @export
 * @interface AnswerShippingQueryPostRequest
 */
export interface AnswerShippingQueryPostRequest {
    /**
     * Unique identifier for the query to be answered
     * @type {string}
     * @memberof AnswerShippingQueryPostRequest
     */
    'shipping_query_id': string;
    /**
     * Pass *True* if delivery to the specified address is possible and *False* if there are any problems (for example, if delivery to the specified address is not possible)
     * @type {boolean}
     * @memberof AnswerShippingQueryPostRequest
     */
    'ok': boolean;
    /**
     * Required if *ok* is *True*. A JSON-serialized array of available shipping options.
     * @type {Array<ShippingOption>}
     * @memberof AnswerShippingQueryPostRequest
     */
    'shipping_options'?: Array<ShippingOption>;
    /**
     * Required if *ok* is *False*. Error message in human readable form that explains why it is impossible to complete the order (e.g. “Sorry, delivery to your desired address is unavailable”). Telegram will display this message to the user.
     * @type {string}
     * @memberof AnswerShippingQueryPostRequest
     */
    'error_message'?: string;
}
/**
 * 
 * @export
 * @interface AnswerWebAppQueryPost200Response
 */
export interface AnswerWebAppQueryPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof AnswerWebAppQueryPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {SentWebAppMessage}
     * @memberof AnswerWebAppQueryPost200Response
     */
    'result': SentWebAppMessage;
}
/**
 * 
 * @export
 * @interface AnswerWebAppQueryPostRequest
 */
export interface AnswerWebAppQueryPostRequest {
    /**
     * Unique identifier for the query to be answered
     * @type {string}
     * @memberof AnswerWebAppQueryPostRequest
     */
    'web_app_query_id': string;
    /**
     * 
     * @type {InlineQueryResult}
     * @memberof AnswerWebAppQueryPostRequest
     */
    'result': InlineQueryResult;
}
/**
 * 
 * @export
 * @interface ApproveChatJoinRequestPostRequest
 */
export interface ApproveChatJoinRequestPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof ApproveChatJoinRequestPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Unique identifier of the target user
     * @type {number}
     * @memberof ApproveChatJoinRequestPostRequest
     */
    'user_id': number;
}
/**
 * This object represents an audio file to be treated as music by the Telegram clients.
 * @export
 * @interface Audio
 */
export interface Audio {
    /**
     * Identifier for this file, which can be used to download or reuse the file
     * @type {string}
     * @memberof Audio
     */
    'file_id': string;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
     * @type {string}
     * @memberof Audio
     */
    'file_unique_id': string;
    /**
     * Duration of the audio in seconds as defined by the sender
     * @type {number}
     * @memberof Audio
     */
    'duration': number;
    /**
     * *Optional*. Performer of the audio as defined by the sender or by audio tags
     * @type {string}
     * @memberof Audio
     */
    'performer'?: string;
    /**
     * *Optional*. Title of the audio as defined by the sender or by audio tags
     * @type {string}
     * @memberof Audio
     */
    'title'?: string;
    /**
     * *Optional*. Original filename as defined by the sender
     * @type {string}
     * @memberof Audio
     */
    'file_name'?: string;
    /**
     * *Optional*. MIME type of the file as defined by the sender
     * @type {string}
     * @memberof Audio
     */
    'mime_type'?: string;
    /**
     * *Optional*. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
     * @type {number}
     * @memberof Audio
     */
    'file_size'?: number;
    /**
     * 
     * @type {PhotoSize}
     * @memberof Audio
     */
    'thumbnail'?: PhotoSize;
}
/**
 * @type BackgroundFill
 * This object describes the way a background is filled based on the selected colors. Currently, it can be one of  * [BackgroundFillSolid](https://core.telegram.org/bots/api/#backgroundfillsolid) * [BackgroundFillGradient](https://core.telegram.org/bots/api/#backgroundfillgradient) * [BackgroundFillFreeformGradient](https://core.telegram.org/bots/api/#backgroundfillfreeformgradient)
 * @export
 */
export type BackgroundFill = BackgroundFillFreeformGradient | BackgroundFillGradient | BackgroundFillSolid;

/**
 * The background is a freeform gradient that rotates after every message in the chat.
 * @export
 * @interface BackgroundFillFreeformGradient
 */
export interface BackgroundFillFreeformGradient {
    /**
     * Type of the background fill, always “freeform\\_gradient”
     * @type {string}
     * @memberof BackgroundFillFreeformGradient
     */
    'type': string;
    /**
     * A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format
     * @type {Array<number>}
     * @memberof BackgroundFillFreeformGradient
     */
    'colors': Array<number>;
}
/**
 * The background is a gradient fill.
 * @export
 * @interface BackgroundFillGradient
 */
export interface BackgroundFillGradient {
    /**
     * Type of the background fill, always “gradient”
     * @type {string}
     * @memberof BackgroundFillGradient
     */
    'type': string;
    /**
     * Top color of the gradient in the RGB24 format
     * @type {number}
     * @memberof BackgroundFillGradient
     */
    'top_color': number;
    /**
     * Bottom color of the gradient in the RGB24 format
     * @type {number}
     * @memberof BackgroundFillGradient
     */
    'bottom_color': number;
    /**
     * Clockwise rotation angle of the background fill in degrees; 0-359
     * @type {number}
     * @memberof BackgroundFillGradient
     */
    'rotation_angle': number;
}
/**
 * The background is filled using the selected color.
 * @export
 * @interface BackgroundFillSolid
 */
export interface BackgroundFillSolid {
    /**
     * Type of the background fill, always “solid”
     * @type {string}
     * @memberof BackgroundFillSolid
     */
    'type': string;
    /**
     * The color of the background fill in the RGB24 format
     * @type {number}
     * @memberof BackgroundFillSolid
     */
    'color': number;
}
/**
 * @type BackgroundType
 * This object describes the type of a background. Currently, it can be one of  * [BackgroundTypeFill](https://core.telegram.org/bots/api/#backgroundtypefill) * [BackgroundTypeWallpaper](https://core.telegram.org/bots/api/#backgroundtypewallpaper) * [BackgroundTypePattern](https://core.telegram.org/bots/api/#backgroundtypepattern) * [BackgroundTypeChatTheme](https://core.telegram.org/bots/api/#backgroundtypechattheme)
 * @export
 */
export type BackgroundType = BackgroundTypeChatTheme | BackgroundTypeFill | BackgroundTypePattern | BackgroundTypeWallpaper;

/**
 * The background is taken directly from a built-in chat theme.
 * @export
 * @interface BackgroundTypeChatTheme
 */
export interface BackgroundTypeChatTheme {
    /**
     * Type of the background, always “chat\\_theme”
     * @type {string}
     * @memberof BackgroundTypeChatTheme
     */
    'type': string;
    /**
     * Name of the chat theme, which is usually an emoji
     * @type {string}
     * @memberof BackgroundTypeChatTheme
     */
    'theme_name': string;
}
/**
 * The background is automatically filled based on the selected colors.
 * @export
 * @interface BackgroundTypeFill
 */
export interface BackgroundTypeFill {
    /**
     * Type of the background, always “fill”
     * @type {string}
     * @memberof BackgroundTypeFill
     */
    'type': string;
    /**
     * 
     * @type {BackgroundFill}
     * @memberof BackgroundTypeFill
     */
    'fill': BackgroundFill;
    /**
     * Dimming of the background in dark themes, as a percentage; 0-100
     * @type {number}
     * @memberof BackgroundTypeFill
     */
    'dark_theme_dimming': number;
}
/**
 * The background is a .PNG or .TGV (gzipped subset of SVG with MIME type “application/x-tgwallpattern”) pattern to be combined with the background fill chosen by the user.
 * @export
 * @interface BackgroundTypePattern
 */
export interface BackgroundTypePattern {
    /**
     * Type of the background, always “pattern”
     * @type {string}
     * @memberof BackgroundTypePattern
     */
    'type': string;
    /**
     * 
     * @type {Document}
     * @memberof BackgroundTypePattern
     */
    'document': Document;
    /**
     * 
     * @type {BackgroundFill}
     * @memberof BackgroundTypePattern
     */
    'fill': BackgroundFill;
    /**
     * Intensity of the pattern when it is shown above the filled background; 0-100
     * @type {number}
     * @memberof BackgroundTypePattern
     */
    'intensity': number;
    /**
     * *Optional*. *True*, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only
     * @type {boolean}
     * @memberof BackgroundTypePattern
     */
    'is_inverted'?: boolean;
    /**
     * *Optional*. *True*, if the background moves slightly when the device is tilted
     * @type {boolean}
     * @memberof BackgroundTypePattern
     */
    'is_moving'?: boolean;
}
/**
 * The background is a wallpaper in the JPEG format.
 * @export
 * @interface BackgroundTypeWallpaper
 */
export interface BackgroundTypeWallpaper {
    /**
     * Type of the background, always “wallpaper”
     * @type {string}
     * @memberof BackgroundTypeWallpaper
     */
    'type': string;
    /**
     * 
     * @type {Document}
     * @memberof BackgroundTypeWallpaper
     */
    'document': Document;
    /**
     * Dimming of the background in dark themes, as a percentage; 0-100
     * @type {number}
     * @memberof BackgroundTypeWallpaper
     */
    'dark_theme_dimming': number;
    /**
     * *Optional*. *True*, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12
     * @type {boolean}
     * @memberof BackgroundTypeWallpaper
     */
    'is_blurred'?: boolean;
    /**
     * *Optional*. *True*, if the background moves slightly when the device is tilted
     * @type {boolean}
     * @memberof BackgroundTypeWallpaper
     */
    'is_moving'?: boolean;
}
/**
 * 
 * @export
 * @interface BanChatMemberPostRequest
 */
export interface BanChatMemberPostRequest {
    /**
     * 
     * @type {BanChatMemberPostRequestChatId}
     * @memberof BanChatMemberPostRequest
     */
    'chat_id': BanChatMemberPostRequestChatId;
    /**
     * Unique identifier of the target user
     * @type {number}
     * @memberof BanChatMemberPostRequest
     */
    'user_id': number;
    /**
     * Date when the user will be unbanned; Unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only.
     * @type {number}
     * @memberof BanChatMemberPostRequest
     */
    'until_date'?: number;
    /**
     * Pass *True* to delete all messages from the chat for the user that is being removed. If *False*, the user will be able to see messages in the group that were sent before the user was removed. Always *True* for supergroups and channels.
     * @type {boolean}
     * @memberof BanChatMemberPostRequest
     */
    'revoke_messages'?: boolean;
}
/**
 * @type BanChatMemberPostRequestChatId
 * Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
 * @export
 */
export type BanChatMemberPostRequestChatId = number | string;

/**
 * 
 * @export
 * @interface BanChatSenderChatPostRequest
 */
export interface BanChatSenderChatPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof BanChatSenderChatPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Unique identifier of the target sender chat
     * @type {number}
     * @memberof BanChatSenderChatPostRequest
     */
    'sender_chat_id': number;
}
/**
 * Describes the birthdate of a user.
 * @export
 * @interface Birthdate
 */
export interface Birthdate {
    /**
     * Day of the user\'s birth; 1-31
     * @type {number}
     * @memberof Birthdate
     */
    'day': number;
    /**
     * Month of the user\'s birth; 1-12
     * @type {number}
     * @memberof Birthdate
     */
    'month': number;
    /**
     * *Optional*. Year of the user\'s birth
     * @type {number}
     * @memberof Birthdate
     */
    'year'?: number;
}
/**
 * This object represents a bot command.
 * @export
 * @interface BotCommand
 */
export interface BotCommand {
    /**
     * Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores.
     * @type {string}
     * @memberof BotCommand
     */
    'command': string;
    /**
     * Description of the command; 1-256 characters.
     * @type {string}
     * @memberof BotCommand
     */
    'description': string;
}
/**
 * @type BotCommandScope
 * This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported:  * [BotCommandScopeDefault](https://core.telegram.org/bots/api/#botcommandscopedefault) * [BotCommandScopeAllPrivateChats](https://core.telegram.org/bots/api/#botcommandscopeallprivatechats) * [BotCommandScopeAllGroupChats](https://core.telegram.org/bots/api/#botcommandscopeallgroupchats) * [BotCommandScopeAllChatAdministrators](https://core.telegram.org/bots/api/#botcommandscopeallchatadministrators) * [BotCommandScopeChat](https://core.telegram.org/bots/api/#botcommandscopechat) * [BotCommandScopeChatAdministrators](https://core.telegram.org/bots/api/#botcommandscopechatadministrators) * [BotCommandScopeChatMember](https://core.telegram.org/bots/api/#botcommandscopechatmember)
 * @export
 */
export type BotCommandScope = BotCommandScopeAllChatAdministrators | BotCommandScopeAllGroupChats | BotCommandScopeAllPrivateChats | BotCommandScopeChat | BotCommandScopeChatAdministrators | BotCommandScopeChatMember | BotCommandScopeDefault;

/**
 * Represents the [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands, covering all group and supergroup chat administrators.
 * @export
 * @interface BotCommandScopeAllChatAdministrators
 */
export interface BotCommandScopeAllChatAdministrators {
    /**
     * Scope type, must be *all\\_chat\\_administrators*
     * @type {string}
     * @memberof BotCommandScopeAllChatAdministrators
     */
    'type': string;
}
/**
 * Represents the [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands, covering all group and supergroup chats.
 * @export
 * @interface BotCommandScopeAllGroupChats
 */
export interface BotCommandScopeAllGroupChats {
    /**
     * Scope type, must be *all\\_group\\_chats*
     * @type {string}
     * @memberof BotCommandScopeAllGroupChats
     */
    'type': string;
}
/**
 * Represents the [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands, covering all private chats.
 * @export
 * @interface BotCommandScopeAllPrivateChats
 */
export interface BotCommandScopeAllPrivateChats {
    /**
     * Scope type, must be *all\\_private\\_chats*
     * @type {string}
     * @memberof BotCommandScopeAllPrivateChats
     */
    'type': string;
}
/**
 * Represents the [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands, covering a specific chat.
 * @export
 * @interface BotCommandScopeChat
 */
export interface BotCommandScopeChat {
    /**
     * Scope type, must be *chat*
     * @type {string}
     * @memberof BotCommandScopeChat
     */
    'type': string;
    /**
     * 
     * @type {RestrictChatMemberPostRequestChatId}
     * @memberof BotCommandScopeChat
     */
    'chat_id': RestrictChatMemberPostRequestChatId;
}
/**
 * Represents the [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands, covering all administrators of a specific group or supergroup chat.
 * @export
 * @interface BotCommandScopeChatAdministrators
 */
export interface BotCommandScopeChatAdministrators {
    /**
     * Scope type, must be *chat\\_administrators*
     * @type {string}
     * @memberof BotCommandScopeChatAdministrators
     */
    'type': string;
    /**
     * 
     * @type {RestrictChatMemberPostRequestChatId}
     * @memberof BotCommandScopeChatAdministrators
     */
    'chat_id': RestrictChatMemberPostRequestChatId;
}
/**
 * Represents the [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands, covering a specific member of a group or supergroup chat.
 * @export
 * @interface BotCommandScopeChatMember
 */
export interface BotCommandScopeChatMember {
    /**
     * Scope type, must be *chat\\_member*
     * @type {string}
     * @memberof BotCommandScopeChatMember
     */
    'type': string;
    /**
     * 
     * @type {RestrictChatMemberPostRequestChatId}
     * @memberof BotCommandScopeChatMember
     */
    'chat_id': RestrictChatMemberPostRequestChatId;
    /**
     * Unique identifier of the target user
     * @type {number}
     * @memberof BotCommandScopeChatMember
     */
    'user_id': number;
}
/**
 * Represents the default [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands. Default commands are used if no commands with a [narrower scope](https://core.telegram.org/bots/api/#determining-list-of-commands) are specified for the user.
 * @export
 * @interface BotCommandScopeDefault
 */
export interface BotCommandScopeDefault {
    /**
     * Scope type, must be *default*
     * @type {string}
     * @memberof BotCommandScopeDefault
     */
    'type': string;
}
/**
 * This object represents the bot\'s description.
 * @export
 * @interface BotDescription
 */
export interface BotDescription {
    /**
     * The bot\'s description
     * @type {string}
     * @memberof BotDescription
     */
    'description': string;
}
/**
 * This object represents the bot\'s name.
 * @export
 * @interface BotName
 */
export interface BotName {
    /**
     * The bot\'s name
     * @type {string}
     * @memberof BotName
     */
    'name': string;
}
/**
 * This object represents the bot\'s short description.
 * @export
 * @interface BotShortDescription
 */
export interface BotShortDescription {
    /**
     * The bot\'s short description
     * @type {string}
     * @memberof BotShortDescription
     */
    'short_description': string;
}
/**
 * Represents the rights of a business bot.
 * @export
 * @interface BusinessBotRights
 */
export interface BusinessBotRights {
    /**
     * *Optional*. True, if the bot can send and edit messages in the private chats that had incoming messages in the last 24 hours
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_reply'?: boolean;
    /**
     * *Optional*. True, if the bot can mark incoming private messages as read
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_read_messages'?: boolean;
    /**
     * *Optional*. True, if the bot can delete messages sent by the bot
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_delete_sent_messages'?: boolean;
    /**
     * *Optional*. True, if the bot can delete all private messages in managed chats
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_delete_all_messages'?: boolean;
    /**
     * *Optional*. True, if the bot can edit the first and last name of the business account
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_edit_name'?: boolean;
    /**
     * *Optional*. True, if the bot can edit the bio of the business account
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_edit_bio'?: boolean;
    /**
     * *Optional*. True, if the bot can edit the profile photo of the business account
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_edit_profile_photo'?: boolean;
    /**
     * *Optional*. True, if the bot can edit the username of the business account
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_edit_username'?: boolean;
    /**
     * *Optional*. True, if the bot can change the privacy settings pertaining to gifts for the business account
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_change_gift_settings'?: boolean;
    /**
     * *Optional*. True, if the bot can view gifts and the amount of Telegram Stars owned by the business account
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_view_gifts_and_stars'?: boolean;
    /**
     * *Optional*. True, if the bot can convert regular gifts owned by the business account to Telegram Stars
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_convert_gifts_to_stars'?: boolean;
    /**
     * *Optional*. True, if the bot can transfer and upgrade gifts owned by the business account
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_transfer_and_upgrade_gifts'?: boolean;
    /**
     * *Optional*. True, if the bot can transfer Telegram Stars received by the business account to its own account, or use them to upgrade and transfer gifts
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_transfer_stars'?: boolean;
    /**
     * *Optional*. True, if the bot can post, edit and delete stories on behalf of the business account
     * @type {boolean}
     * @memberof BusinessBotRights
     */
    'can_manage_stories'?: boolean;
}
/**
 * Describes the connection of the bot with a business account.
 * @export
 * @interface BusinessConnection
 */
export interface BusinessConnection {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof BusinessConnection
     */
    'id': string;
    /**
     * 
     * @type {User}
     * @memberof BusinessConnection
     */
    'user': User;
    /**
     * Identifier of a private chat with the user who created the business connection. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier.
     * @type {number}
     * @memberof BusinessConnection
     */
    'user_chat_id': number;
    /**
     * Date the connection was established in Unix time
     * @type {number}
     * @memberof BusinessConnection
     */
    'date': number;
    /**
     * True, if the connection is active
     * @type {boolean}
     * @memberof BusinessConnection
     */
    'is_enabled': boolean;
    /**
     * 
     * @type {BusinessBotRights}
     * @memberof BusinessConnection
     */
    'rights'?: BusinessBotRights;
}
/**
 * Contains information about the start page settings of a Telegram Business account.
 * @export
 * @interface BusinessIntro
 */
export interface BusinessIntro {
    /**
     * *Optional*. Title text of the business intro
     * @type {string}
     * @memberof BusinessIntro
     */
    'title'?: string;
    /**
     * *Optional*. Message text of the business intro
     * @type {string}
     * @memberof BusinessIntro
     */
    'message'?: string;
    /**
     * 
     * @type {Sticker}
     * @memberof BusinessIntro
     */
    'sticker'?: Sticker;
}
/**
 * Contains information about the location of a Telegram Business account.
 * @export
 * @interface BusinessLocation
 */
export interface BusinessLocation {
    /**
     * Address of the business
     * @type {string}
     * @memberof BusinessLocation
     */
    'address': string;
    /**
     * 
     * @type {Location}
     * @memberof BusinessLocation
     */
    'location'?: Location;
}
/**
 * This object is received when messages are deleted from a connected business account.
 * @export
 * @interface BusinessMessagesDeleted
 */
export interface BusinessMessagesDeleted {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof BusinessMessagesDeleted
     */
    'business_connection_id': string;
    /**
     * 
     * @type {Chat}
     * @memberof BusinessMessagesDeleted
     */
    'chat': Chat;
    /**
     * The list of identifiers of deleted messages in the chat of the business account
     * @type {Array<number>}
     * @memberof BusinessMessagesDeleted
     */
    'message_ids': Array<number>;
}
/**
 * Describes the opening hours of a business.
 * @export
 * @interface BusinessOpeningHours
 */
export interface BusinessOpeningHours {
    /**
     * Unique name of the time zone for which the opening hours are defined
     * @type {string}
     * @memberof BusinessOpeningHours
     */
    'time_zone_name': string;
    /**
     * List of time intervals describing business opening hours
     * @type {Array<BusinessOpeningHoursInterval>}
     * @memberof BusinessOpeningHours
     */
    'opening_hours': Array<BusinessOpeningHoursInterval>;
}
/**
 * Describes an interval of time during which a business is open.
 * @export
 * @interface BusinessOpeningHoursInterval
 */
export interface BusinessOpeningHoursInterval {
    /**
     * The minute\'s sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 \\* 24 \\* 60
     * @type {number}
     * @memberof BusinessOpeningHoursInterval
     */
    'opening_minute': number;
    /**
     * The minute\'s sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 \\* 24 \\* 60
     * @type {number}
     * @memberof BusinessOpeningHoursInterval
     */
    'closing_minute': number;
}
/**
 * This object represents an incoming callback query from a callback button in an [inline keyboard](https://core.telegram.org/bots/features#inline-keyboards). If the button that originated the query was attached to a message sent by the bot, the field *message* will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api/#inline-mode)), the field *inline\\_message\\_id* will be present. Exactly one of the fields *data* or *game\\_short\\_name* will be present.
 * @export
 * @interface CallbackQuery
 */
export interface CallbackQuery {
    /**
     * Unique identifier for this query
     * @type {string}
     * @memberof CallbackQuery
     */
    'id': string;
    /**
     * 
     * @type {User}
     * @memberof CallbackQuery
     */
    'from': User;
    /**
     * Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).
     * @type {string}
     * @memberof CallbackQuery
     */
    'chat_instance': string;
    /**
     * 
     * @type {MaybeInaccessibleMessage}
     * @memberof CallbackQuery
     */
    'message'?: MaybeInaccessibleMessage;
    /**
     * *Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.
     * @type {string}
     * @memberof CallbackQuery
     */
    'inline_message_id'?: string;
    /**
     * *Optional*. Data associated with the callback button. Be aware that the message originated the query can contain no callback buttons with this data.
     * @type {string}
     * @memberof CallbackQuery
     */
    'data'?: string;
    /**
     * *Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game
     * @type {string}
     * @memberof CallbackQuery
     */
    'game_short_name'?: string;
}
/**
 * This object represents a chat.
 * @export
 * @interface Chat
 */
export interface Chat {
    /**
     * Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
     * @type {number}
     * @memberof Chat
     */
    'id': number;
    /**
     * Type of the chat, can be either “private”, “group”, “supergroup” or “channel”
     * @type {string}
     * @memberof Chat
     */
    'type': ChatTypeEnum;
    /**
     * *Optional*. Title, for supergroups, channels and group chats
     * @type {string}
     * @memberof Chat
     */
    'title'?: string;
    /**
     * *Optional*. Username, for private chats, supergroups and channels if available
     * @type {string}
     * @memberof Chat
     */
    'username'?: string;
    /**
     * *Optional*. First name of the other party in a private chat
     * @type {string}
     * @memberof Chat
     */
    'first_name'?: string;
    /**
     * *Optional*. Last name of the other party in a private chat
     * @type {string}
     * @memberof Chat
     */
    'last_name'?: string;
    /**
     * *Optional*. *True*, if the supergroup chat is a forum (has [topics](https://telegram.org/blog/topics-in-groups-collectible-usernames#topics-in-groups) enabled)
     * @type {boolean}
     * @memberof Chat
     */
    'is_forum'?: boolean;
}

export const ChatTypeEnum = {
    Private: 'private',
    Group: 'group',
    Supergroup: 'supergroup',
    Channel: 'channel'
} as const;

export type ChatTypeEnum = typeof ChatTypeEnum[keyof typeof ChatTypeEnum];

/**
 * Represents the rights of an administrator in a chat.
 * @export
 * @interface ChatAdministratorRights
 */
export interface ChatAdministratorRights {
    /**
     * *True*, if the user\'s presence in the chat is hidden
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'is_anonymous': boolean;
    /**
     * *True*, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_manage_chat': boolean;
    /**
     * *True*, if the administrator can delete messages of other users
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_delete_messages': boolean;
    /**
     * *True*, if the administrator can manage video chats
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_manage_video_chats': boolean;
    /**
     * *True*, if the administrator can restrict, ban or unban chat members, or access supergroup statistics
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_restrict_members': boolean;
    /**
     * *True*, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user)
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_promote_members': boolean;
    /**
     * *True*, if the user is allowed to change the chat title, photo and other settings
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_change_info': boolean;
    /**
     * *True*, if the user is allowed to invite new users to the chat
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_invite_users': boolean;
    /**
     * *True*, if the administrator can post stories to the chat
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_post_stories': boolean;
    /**
     * *True*, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat\'s story archive
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_edit_stories': boolean;
    /**
     * *True*, if the administrator can delete stories posted by other users
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_delete_stories': boolean;
    /**
     * *Optional*. *True*, if the administrator can post messages in the channel, or access channel statistics; for channels only
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_post_messages'?: boolean;
    /**
     * *Optional*. *True*, if the administrator can edit messages of other users and can pin messages; for channels only
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_edit_messages'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to pin messages; for groups and supergroups only
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_pin_messages'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only
     * @type {boolean}
     * @memberof ChatAdministratorRights
     */
    'can_manage_topics'?: boolean;
}
/**
 * This object represents a chat background.
 * @export
 * @interface ChatBackground
 */
export interface ChatBackground {
    /**
     * 
     * @type {BackgroundType}
     * @memberof ChatBackground
     */
    'type': BackgroundType;
}
/**
 * This object contains information about a chat boost.
 * @export
 * @interface ChatBoost
 */
export interface ChatBoost {
    /**
     * Unique identifier of the boost
     * @type {string}
     * @memberof ChatBoost
     */
    'boost_id': string;
    /**
     * Point in time (Unix timestamp) when the chat was boosted
     * @type {number}
     * @memberof ChatBoost
     */
    'add_date': number;
    /**
     * Point in time (Unix timestamp) when the boost will automatically expire, unless the booster\'s Telegram Premium subscription is prolonged
     * @type {number}
     * @memberof ChatBoost
     */
    'expiration_date': number;
    /**
     * 
     * @type {ChatBoostSource}
     * @memberof ChatBoost
     */
    'source': ChatBoostSource;
}
/**
 * This object represents a service message about a user boosting a chat.
 * @export
 * @interface ChatBoostAdded
 */
export interface ChatBoostAdded {
    /**
     * Number of boosts added by the user
     * @type {number}
     * @memberof ChatBoostAdded
     */
    'boost_count': number;
}
/**
 * This object represents a boost removed from a chat.
 * @export
 * @interface ChatBoostRemoved
 */
export interface ChatBoostRemoved {
    /**
     * 
     * @type {Chat}
     * @memberof ChatBoostRemoved
     */
    'chat': Chat;
    /**
     * Unique identifier of the boost
     * @type {string}
     * @memberof ChatBoostRemoved
     */
    'boost_id': string;
    /**
     * Point in time (Unix timestamp) when the boost was removed
     * @type {number}
     * @memberof ChatBoostRemoved
     */
    'remove_date': number;
    /**
     * 
     * @type {ChatBoostSource}
     * @memberof ChatBoostRemoved
     */
    'source': ChatBoostSource;
}
/**
 * @type ChatBoostSource
 * This object describes the source of a chat boost. It can be one of  * [ChatBoostSourcePremium](https://core.telegram.org/bots/api/#chatboostsourcepremium) * [ChatBoostSourceGiftCode](https://core.telegram.org/bots/api/#chatboostsourcegiftcode) * [ChatBoostSourceGiveaway](https://core.telegram.org/bots/api/#chatboostsourcegiveaway)
 * @export
 */
export type ChatBoostSource = ChatBoostSourceGiftCode | ChatBoostSourceGiveaway | ChatBoostSourcePremium;

/**
 * The boost was obtained by the creation of Telegram Premium gift codes to boost a chat. Each such code boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription.
 * @export
 * @interface ChatBoostSourceGiftCode
 */
export interface ChatBoostSourceGiftCode {
    /**
     * Source of the boost, always “gift\\_code”
     * @type {string}
     * @memberof ChatBoostSourceGiftCode
     */
    'source': string;
    /**
     * 
     * @type {User}
     * @memberof ChatBoostSourceGiftCode
     */
    'user': User;
}
/**
 * The boost was obtained by the creation of a Telegram Premium or a Telegram Star giveaway. This boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription for Telegram Premium giveaways and *prize\\_star\\_count* / 500 times for one year for Telegram Star giveaways.
 * @export
 * @interface ChatBoostSourceGiveaway
 */
export interface ChatBoostSourceGiveaway {
    /**
     * Source of the boost, always “giveaway”
     * @type {string}
     * @memberof ChatBoostSourceGiveaway
     */
    'source': string;
    /**
     * Identifier of a message in the chat with the giveaway; the message could have been deleted already. May be 0 if the message isn\'t sent yet.
     * @type {number}
     * @memberof ChatBoostSourceGiveaway
     */
    'giveaway_message_id': number;
    /**
     * 
     * @type {User}
     * @memberof ChatBoostSourceGiveaway
     */
    'user'?: User;
    /**
     * *Optional*. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only
     * @type {number}
     * @memberof ChatBoostSourceGiveaway
     */
    'prize_star_count'?: number;
    /**
     * *Optional*. True, if the giveaway was completed, but there was no user to win the prize
     * @type {boolean}
     * @memberof ChatBoostSourceGiveaway
     */
    'is_unclaimed'?: boolean;
}
/**
 * The boost was obtained by subscribing to Telegram Premium or by gifting a Telegram Premium subscription to another user.
 * @export
 * @interface ChatBoostSourcePremium
 */
export interface ChatBoostSourcePremium {
    /**
     * Source of the boost, always “premium”
     * @type {string}
     * @memberof ChatBoostSourcePremium
     */
    'source': string;
    /**
     * 
     * @type {User}
     * @memberof ChatBoostSourcePremium
     */
    'user': User;
}
/**
 * This object represents a boost added to a chat or changed.
 * @export
 * @interface ChatBoostUpdated
 */
export interface ChatBoostUpdated {
    /**
     * 
     * @type {Chat}
     * @memberof ChatBoostUpdated
     */
    'chat': Chat;
    /**
     * 
     * @type {ChatBoost}
     * @memberof ChatBoostUpdated
     */
    'boost': ChatBoost;
}
/**
 * This object contains full information about a chat.
 * @export
 * @interface ChatFullInfo
 */
export interface ChatFullInfo {
    /**
     * Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
     * @type {number}
     * @memberof ChatFullInfo
     */
    'id': number;
    /**
     * Type of the chat, can be either “private”, “group”, “supergroup” or “channel”
     * @type {string}
     * @memberof ChatFullInfo
     */
    'type': ChatFullInfoTypeEnum;
    /**
     * Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview. See [accent colors](https://core.telegram.org/bots/api/#accent-colors) for more details.
     * @type {number}
     * @memberof ChatFullInfo
     */
    'accent_color_id': number;
    /**
     * The maximum number of reactions that can be set on a message in the chat
     * @type {number}
     * @memberof ChatFullInfo
     */
    'max_reaction_count': number;
    /**
     * 
     * @type {AcceptedGiftTypes}
     * @memberof ChatFullInfo
     */
    'accepted_gift_types': AcceptedGiftTypes;
    /**
     * *Optional*. Title, for supergroups, channels and group chats
     * @type {string}
     * @memberof ChatFullInfo
     */
    'title'?: string;
    /**
     * *Optional*. Username, for private chats, supergroups and channels if available
     * @type {string}
     * @memberof ChatFullInfo
     */
    'username'?: string;
    /**
     * *Optional*. First name of the other party in a private chat
     * @type {string}
     * @memberof ChatFullInfo
     */
    'first_name'?: string;
    /**
     * *Optional*. Last name of the other party in a private chat
     * @type {string}
     * @memberof ChatFullInfo
     */
    'last_name'?: string;
    /**
     * *Optional*. *True*, if the supergroup chat is a forum (has [topics](https://telegram.org/blog/topics-in-groups-collectible-usernames#topics-in-groups) enabled)
     * @type {boolean}
     * @memberof ChatFullInfo
     */
    'is_forum'?: boolean;
    /**
     * 
     * @type {ChatPhoto}
     * @memberof ChatFullInfo
     */
    'photo'?: ChatPhoto;
    /**
     * *Optional*. If non-empty, the list of all [active chat usernames](https://telegram.org/blog/topics-in-groups-collectible-usernames#collectible-usernames); for private chats, supergroups and channels
     * @type {Array<string>}
     * @memberof ChatFullInfo
     */
    'active_usernames'?: Array<string>;
    /**
     * 
     * @type {Birthdate}
     * @memberof ChatFullInfo
     */
    'birthdate'?: Birthdate;
    /**
     * 
     * @type {BusinessIntro}
     * @memberof ChatFullInfo
     */
    'business_intro'?: BusinessIntro;
    /**
     * 
     * @type {BusinessLocation}
     * @memberof ChatFullInfo
     */
    'business_location'?: BusinessLocation;
    /**
     * 
     * @type {BusinessOpeningHours}
     * @memberof ChatFullInfo
     */
    'business_opening_hours'?: BusinessOpeningHours;
    /**
     * 
     * @type {Chat}
     * @memberof ChatFullInfo
     */
    'personal_chat'?: Chat;
    /**
     * *Optional*. List of available reactions allowed in the chat. If omitted, then all [emoji reactions](https://core.telegram.org/bots/api/#reactiontypeemoji) are allowed.
     * @type {Array<ReactionType>}
     * @memberof ChatFullInfo
     */
    'available_reactions'?: Array<ReactionType>;
    /**
     * *Optional*. Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background
     * @type {string}
     * @memberof ChatFullInfo
     */
    'background_custom_emoji_id'?: string;
    /**
     * *Optional*. Identifier of the accent color for the chat\'s profile background. See [profile accent colors](https://core.telegram.org/bots/api/#profile-accent-colors) for more details.
     * @type {number}
     * @memberof ChatFullInfo
     */
    'profile_accent_color_id'?: number;
    /**
     * *Optional*. Custom emoji identifier of the emoji chosen by the chat for its profile background
     * @type {string}
     * @memberof ChatFullInfo
     */
    'profile_background_custom_emoji_id'?: string;
    /**
     * *Optional*. Custom emoji identifier of the emoji status of the chat or the other party in a private chat
     * @type {string}
     * @memberof ChatFullInfo
     */
    'emoji_status_custom_emoji_id'?: string;
    /**
     * *Optional*. Expiration date of the emoji status of the chat or the other party in a private chat, in Unix time, if any
     * @type {number}
     * @memberof ChatFullInfo
     */
    'emoji_status_expiration_date'?: number;
    /**
     * *Optional*. Bio of the other party in a private chat
     * @type {string}
     * @memberof ChatFullInfo
     */
    'bio'?: string;
    /**
     * *Optional*. *True*, if privacy settings of the other party in the private chat allows to use `tg://user?id=<user_id>` links only in chats with the user
     * @type {boolean}
     * @memberof ChatFullInfo
     */
    'has_private_forwards'?: boolean;
    /**
     * *Optional*. *True*, if the privacy settings of the other party restrict sending voice and video note messages in the private chat
     * @type {boolean}
     * @memberof ChatFullInfo
     */
    'has_restricted_voice_and_video_messages'?: boolean;
    /**
     * *Optional*. *True*, if users need to join the supergroup before they can send messages
     * @type {boolean}
     * @memberof ChatFullInfo
     */
    'join_to_send_messages'?: boolean;
    /**
     * *Optional*. *True*, if all users directly joining the supergroup without using an invite link need to be approved by supergroup administrators
     * @type {boolean}
     * @memberof ChatFullInfo
     */
    'join_by_request'?: boolean;
    /**
     * *Optional*. Description, for groups, supergroups and channel chats
     * @type {string}
     * @memberof ChatFullInfo
     */
    'description'?: string;
    /**
     * *Optional*. Primary invite link, for groups, supergroups and channel chats
     * @type {string}
     * @memberof ChatFullInfo
     */
    'invite_link'?: string;
    /**
     * 
     * @type {Message}
     * @memberof ChatFullInfo
     */
    'pinned_message'?: Message;
    /**
     * 
     * @type {ChatPermissions}
     * @memberof ChatFullInfo
     */
    'permissions'?: ChatPermissions;
    /**
     * *Optional*. *True*, if paid media messages can be sent or forwarded to the channel chat. The field is available only for channel chats.
     * @type {boolean}
     * @memberof ChatFullInfo
     */
    'can_send_paid_media'?: boolean;
    /**
     * *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds
     * @type {number}
     * @memberof ChatFullInfo
     */
    'slow_mode_delay'?: number;
    /**
     * *Optional*. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions
     * @type {number}
     * @memberof ChatFullInfo
     */
    'unrestrict_boost_count'?: number;
    /**
     * *Optional*. The time after which all messages sent to the chat will be automatically deleted; in seconds
     * @type {number}
     * @memberof ChatFullInfo
     */
    'message_auto_delete_time'?: number;
    /**
     * *Optional*. *True*, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators.
     * @type {boolean}
     * @memberof ChatFullInfo
     */
    'has_aggressive_anti_spam_enabled'?: boolean;
    /**
     * *Optional*. *True*, if non-administrators can only get the list of bots and administrators in the chat
     * @type {boolean}
     * @memberof ChatFullInfo
     */
    'has_hidden_members'?: boolean;
    /**
     * *Optional*. *True*, if messages from the chat can\'t be forwarded to other chats
     * @type {boolean}
     * @memberof ChatFullInfo
     */
    'has_protected_content'?: boolean;
    /**
     * *Optional*. *True*, if new chat members will have access to old messages; available only to chat administrators
     * @type {boolean}
     * @memberof ChatFullInfo
     */
    'has_visible_history'?: boolean;
    /**
     * *Optional*. For supergroups, name of the group sticker set
     * @type {string}
     * @memberof ChatFullInfo
     */
    'sticker_set_name'?: string;
    /**
     * *Optional*. *True*, if the bot can change the group sticker set
     * @type {boolean}
     * @memberof ChatFullInfo
     */
    'can_set_sticker_set'?: boolean;
    /**
     * *Optional*. For supergroups, the name of the group\'s custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group.
     * @type {string}
     * @memberof ChatFullInfo
     */
    'custom_emoji_sticker_set_name'?: string;
    /**
     * *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
     * @type {number}
     * @memberof ChatFullInfo
     */
    'linked_chat_id'?: number;
    /**
     * 
     * @type {ChatLocation}
     * @memberof ChatFullInfo
     */
    'location'?: ChatLocation;
}

export const ChatFullInfoTypeEnum = {
    Private: 'private',
    Group: 'group',
    Supergroup: 'supergroup',
    Channel: 'channel'
} as const;

export type ChatFullInfoTypeEnum = typeof ChatFullInfoTypeEnum[keyof typeof ChatFullInfoTypeEnum];

/**
 * Represents an invite link for a chat.
 * @export
 * @interface ChatInviteLink
 */
export interface ChatInviteLink {
    /**
     * The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with “…”.
     * @type {string}
     * @memberof ChatInviteLink
     */
    'invite_link': string;
    /**
     * 
     * @type {User}
     * @memberof ChatInviteLink
     */
    'creator': User;
    /**
     * *True*, if users joining the chat via the link need to be approved by chat administrators
     * @type {boolean}
     * @memberof ChatInviteLink
     */
    'creates_join_request': boolean;
    /**
     * *True*, if the link is primary
     * @type {boolean}
     * @memberof ChatInviteLink
     */
    'is_primary': boolean;
    /**
     * *True*, if the link is revoked
     * @type {boolean}
     * @memberof ChatInviteLink
     */
    'is_revoked': boolean;
    /**
     * *Optional*. Invite link name
     * @type {string}
     * @memberof ChatInviteLink
     */
    'name'?: string;
    /**
     * *Optional*. Point in time (Unix timestamp) when the link will expire or has been expired
     * @type {number}
     * @memberof ChatInviteLink
     */
    'expire_date'?: number;
    /**
     * *Optional*. The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
     * @type {number}
     * @memberof ChatInviteLink
     */
    'member_limit'?: number;
    /**
     * *Optional*. Number of pending join requests created using this link
     * @type {number}
     * @memberof ChatInviteLink
     */
    'pending_join_request_count'?: number;
    /**
     * *Optional*. The number of seconds the subscription will be active for before the next payment
     * @type {number}
     * @memberof ChatInviteLink
     */
    'subscription_period'?: number;
    /**
     * *Optional*. The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat using the link
     * @type {number}
     * @memberof ChatInviteLink
     */
    'subscription_price'?: number;
}
/**
 * Represents a join request sent to a chat.
 * @export
 * @interface ChatJoinRequest
 */
export interface ChatJoinRequest {
    /**
     * 
     * @type {Chat}
     * @memberof ChatJoinRequest
     */
    'chat': Chat;
    /**
     * 
     * @type {User}
     * @memberof ChatJoinRequest
     */
    'from': User;
    /**
     * Identifier of a private chat with the user who sent the join request. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot can use this identifier for 5 minutes to send messages until the join request is processed, assuming no other administrator contacted the user.
     * @type {number}
     * @memberof ChatJoinRequest
     */
    'user_chat_id': number;
    /**
     * Date the request was sent in Unix time
     * @type {number}
     * @memberof ChatJoinRequest
     */
    'date': number;
    /**
     * *Optional*. Bio of the user.
     * @type {string}
     * @memberof ChatJoinRequest
     */
    'bio'?: string;
    /**
     * 
     * @type {ChatInviteLink}
     * @memberof ChatJoinRequest
     */
    'invite_link'?: ChatInviteLink;
}
/**
 * Represents a location to which a chat is connected.
 * @export
 * @interface ChatLocation
 */
export interface ChatLocation {
    /**
     * 
     * @type {Location}
     * @memberof ChatLocation
     */
    'location': Location;
    /**
     * Location address; 1-64 characters, as defined by the chat owner
     * @type {string}
     * @memberof ChatLocation
     */
    'address': string;
}
/**
 * @type ChatMember
 * This object contains information about one member of a chat. Currently, the following 6 types of chat members are supported:  * [ChatMemberOwner](https://core.telegram.org/bots/api/#chatmemberowner) * [ChatMemberAdministrator](https://core.telegram.org/bots/api/#chatmemberadministrator) * [ChatMemberMember](https://core.telegram.org/bots/api/#chatmembermember) * [ChatMemberRestricted](https://core.telegram.org/bots/api/#chatmemberrestricted) * [ChatMemberLeft](https://core.telegram.org/bots/api/#chatmemberleft) * [ChatMemberBanned](https://core.telegram.org/bots/api/#chatmemberbanned)
 * @export
 */
export type ChatMember = ChatMemberAdministrator | ChatMemberBanned | ChatMemberLeft | ChatMemberMember | ChatMemberOwner | ChatMemberRestricted;

/**
 * Represents a [chat member](https://core.telegram.org/bots/api/#chatmember) that has some additional privileges.
 * @export
 * @interface ChatMemberAdministrator
 */
export interface ChatMemberAdministrator {
    /**
     * The member\'s status in the chat, always “administrator”
     * @type {string}
     * @memberof ChatMemberAdministrator
     */
    'status': string;
    /**
     * 
     * @type {User}
     * @memberof ChatMemberAdministrator
     */
    'user': User;
    /**
     * *True*, if the bot is allowed to edit administrator privileges of that user
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_be_edited': boolean;
    /**
     * *True*, if the user\'s presence in the chat is hidden
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'is_anonymous': boolean;
    /**
     * *True*, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_manage_chat': boolean;
    /**
     * *True*, if the administrator can delete messages of other users
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_delete_messages': boolean;
    /**
     * *True*, if the administrator can manage video chats
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_manage_video_chats': boolean;
    /**
     * *True*, if the administrator can restrict, ban or unban chat members, or access supergroup statistics
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_restrict_members': boolean;
    /**
     * *True*, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user)
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_promote_members': boolean;
    /**
     * *True*, if the user is allowed to change the chat title, photo and other settings
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_change_info': boolean;
    /**
     * *True*, if the user is allowed to invite new users to the chat
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_invite_users': boolean;
    /**
     * *True*, if the administrator can post stories to the chat
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_post_stories': boolean;
    /**
     * *True*, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat\'s story archive
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_edit_stories': boolean;
    /**
     * *True*, if the administrator can delete stories posted by other users
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_delete_stories': boolean;
    /**
     * *Optional*. *True*, if the administrator can post messages in the channel, or access channel statistics; for channels only
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_post_messages'?: boolean;
    /**
     * *Optional*. *True*, if the administrator can edit messages of other users and can pin messages; for channels only
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_edit_messages'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to pin messages; for groups and supergroups only
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_pin_messages'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only
     * @type {boolean}
     * @memberof ChatMemberAdministrator
     */
    'can_manage_topics'?: boolean;
    /**
     * *Optional*. Custom title for this user
     * @type {string}
     * @memberof ChatMemberAdministrator
     */
    'custom_title'?: string;
}
/**
 * Represents a [chat member](https://core.telegram.org/bots/api/#chatmember) that was banned in the chat and can\'t return to the chat or view chat messages.
 * @export
 * @interface ChatMemberBanned
 */
export interface ChatMemberBanned {
    /**
     * The member\'s status in the chat, always “kicked”
     * @type {string}
     * @memberof ChatMemberBanned
     */
    'status': string;
    /**
     * 
     * @type {User}
     * @memberof ChatMemberBanned
     */
    'user': User;
    /**
     * Date when restrictions will be lifted for this user; Unix time. If 0, then the user is banned forever
     * @type {number}
     * @memberof ChatMemberBanned
     */
    'until_date': number;
}
/**
 * Represents a [chat member](https://core.telegram.org/bots/api/#chatmember) that isn\'t currently a member of the chat, but may join it themselves.
 * @export
 * @interface ChatMemberLeft
 */
export interface ChatMemberLeft {
    /**
     * The member\'s status in the chat, always “left”
     * @type {string}
     * @memberof ChatMemberLeft
     */
    'status': string;
    /**
     * 
     * @type {User}
     * @memberof ChatMemberLeft
     */
    'user': User;
}
/**
 * Represents a [chat member](https://core.telegram.org/bots/api/#chatmember) that has no additional privileges or restrictions.
 * @export
 * @interface ChatMemberMember
 */
export interface ChatMemberMember {
    /**
     * The member\'s status in the chat, always “member”
     * @type {string}
     * @memberof ChatMemberMember
     */
    'status': string;
    /**
     * 
     * @type {User}
     * @memberof ChatMemberMember
     */
    'user': User;
    /**
     * *Optional*. Date when the user\'s subscription will expire; Unix time
     * @type {number}
     * @memberof ChatMemberMember
     */
    'until_date'?: number;
}
/**
 * Represents a [chat member](https://core.telegram.org/bots/api/#chatmember) that owns the chat and has all administrator privileges.
 * @export
 * @interface ChatMemberOwner
 */
export interface ChatMemberOwner {
    /**
     * The member\'s status in the chat, always “creator”
     * @type {string}
     * @memberof ChatMemberOwner
     */
    'status': string;
    /**
     * 
     * @type {User}
     * @memberof ChatMemberOwner
     */
    'user': User;
    /**
     * *True*, if the user\'s presence in the chat is hidden
     * @type {boolean}
     * @memberof ChatMemberOwner
     */
    'is_anonymous': boolean;
    /**
     * *Optional*. Custom title for this user
     * @type {string}
     * @memberof ChatMemberOwner
     */
    'custom_title'?: string;
}
/**
 * Represents a [chat member](https://core.telegram.org/bots/api/#chatmember) that is under certain restrictions in the chat. Supergroups only.
 * @export
 * @interface ChatMemberRestricted
 */
export interface ChatMemberRestricted {
    /**
     * The member\'s status in the chat, always “restricted”
     * @type {string}
     * @memberof ChatMemberRestricted
     */
    'status': string;
    /**
     * 
     * @type {User}
     * @memberof ChatMemberRestricted
     */
    'user': User;
    /**
     * *True*, if the user is a member of the chat at the moment of the request
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'is_member': boolean;
    /**
     * *True*, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_send_messages': boolean;
    /**
     * *True*, if the user is allowed to send audios
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_send_audios': boolean;
    /**
     * *True*, if the user is allowed to send documents
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_send_documents': boolean;
    /**
     * *True*, if the user is allowed to send photos
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_send_photos': boolean;
    /**
     * *True*, if the user is allowed to send videos
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_send_videos': boolean;
    /**
     * *True*, if the user is allowed to send video notes
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_send_video_notes': boolean;
    /**
     * *True*, if the user is allowed to send voice notes
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_send_voice_notes': boolean;
    /**
     * *True*, if the user is allowed to send polls
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_send_polls': boolean;
    /**
     * *True*, if the user is allowed to send animations, games, stickers and use inline bots
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_send_other_messages': boolean;
    /**
     * *True*, if the user is allowed to add web page previews to their messages
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_add_web_page_previews': boolean;
    /**
     * *True*, if the user is allowed to change the chat title, photo and other settings
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_change_info': boolean;
    /**
     * *True*, if the user is allowed to invite new users to the chat
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_invite_users': boolean;
    /**
     * *True*, if the user is allowed to pin messages
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_pin_messages': boolean;
    /**
     * *True*, if the user is allowed to create forum topics
     * @type {boolean}
     * @memberof ChatMemberRestricted
     */
    'can_manage_topics': boolean;
    /**
     * Date when restrictions will be lifted for this user; Unix time. If 0, then the user is restricted forever
     * @type {number}
     * @memberof ChatMemberRestricted
     */
    'until_date': number;
}
/**
 * This object represents changes in the status of a chat member.
 * @export
 * @interface ChatMemberUpdated
 */
export interface ChatMemberUpdated {
    /**
     * 
     * @type {Chat}
     * @memberof ChatMemberUpdated
     */
    'chat': Chat;
    /**
     * 
     * @type {User}
     * @memberof ChatMemberUpdated
     */
    'from': User;
    /**
     * Date the change was done in Unix time
     * @type {number}
     * @memberof ChatMemberUpdated
     */
    'date': number;
    /**
     * 
     * @type {ChatMember}
     * @memberof ChatMemberUpdated
     */
    'old_chat_member': ChatMember;
    /**
     * 
     * @type {ChatMember}
     * @memberof ChatMemberUpdated
     */
    'new_chat_member': ChatMember;
    /**
     * 
     * @type {ChatInviteLink}
     * @memberof ChatMemberUpdated
     */
    'invite_link'?: ChatInviteLink;
    /**
     * *Optional*. True, if the user joined the chat after sending a direct join request without using an invite link and being approved by an administrator
     * @type {boolean}
     * @memberof ChatMemberUpdated
     */
    'via_join_request'?: boolean;
    /**
     * *Optional*. True, if the user joined the chat via a chat folder invite link
     * @type {boolean}
     * @memberof ChatMemberUpdated
     */
    'via_chat_folder_invite_link'?: boolean;
}
/**
 * Describes actions that a non-administrator user is allowed to take in a chat.
 * @export
 * @interface ChatPermissions
 */
export interface ChatPermissions {
    /**
     * *Optional*. *True*, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_send_messages'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to send audios
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_send_audios'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to send documents
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_send_documents'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to send photos
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_send_photos'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to send videos
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_send_videos'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to send video notes
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_send_video_notes'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to send voice notes
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_send_voice_notes'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to send polls
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_send_polls'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to send animations, games, stickers and use inline bots
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_send_other_messages'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to add web page previews to their messages
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_add_web_page_previews'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_change_info'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to invite new users to the chat
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_invite_users'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to pin messages. Ignored in public supergroups
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_pin_messages'?: boolean;
    /**
     * *Optional*. *True*, if the user is allowed to create forum topics. If omitted defaults to the value of can\\_pin\\_messages
     * @type {boolean}
     * @memberof ChatPermissions
     */
    'can_manage_topics'?: boolean;
}
/**
 * This object represents a chat photo.
 * @export
 * @interface ChatPhoto
 */
export interface ChatPhoto {
    /**
     * File identifier of small (160x160) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.
     * @type {string}
     * @memberof ChatPhoto
     */
    'small_file_id': string;
    /**
     * Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
     * @type {string}
     * @memberof ChatPhoto
     */
    'small_file_unique_id': string;
    /**
     * File identifier of big (640x640) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.
     * @type {string}
     * @memberof ChatPhoto
     */
    'big_file_id': string;
    /**
     * Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
     * @type {string}
     * @memberof ChatPhoto
     */
    'big_file_unique_id': string;
}
/**
 * This object contains information about a chat that was shared with the bot using a [KeyboardButtonRequestChat](https://core.telegram.org/bots/api/#keyboardbuttonrequestchat) button.
 * @export
 * @interface ChatShared
 */
export interface ChatShared {
    /**
     * Identifier of the request
     * @type {number}
     * @memberof ChatShared
     */
    'request_id': number;
    /**
     * Identifier of the shared chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by some other means.
     * @type {number}
     * @memberof ChatShared
     */
    'chat_id': number;
    /**
     * *Optional*. Title of the chat, if the title was requested by the bot.
     * @type {string}
     * @memberof ChatShared
     */
    'title'?: string;
    /**
     * *Optional*. Username of the chat, if the username was requested by the bot and available.
     * @type {string}
     * @memberof ChatShared
     */
    'username'?: string;
    /**
     * *Optional*. Available sizes of the chat photo, if the photo was requested by the bot
     * @type {Array<PhotoSize>}
     * @memberof ChatShared
     */
    'photo'?: Array<PhotoSize>;
}
/**
 * Represents a [result](https://core.telegram.org/bots/api/#inlinequeryresult) of an inline query that was chosen by the user and sent to their chat partner.
 * @export
 * @interface ChosenInlineResult
 */
export interface ChosenInlineResult {
    /**
     * The unique identifier for the result that was chosen
     * @type {string}
     * @memberof ChosenInlineResult
     */
    'result_id': string;
    /**
     * 
     * @type {User}
     * @memberof ChosenInlineResult
     */
    'from': User;
    /**
     * The query that was used to obtain the result
     * @type {string}
     * @memberof ChosenInlineResult
     */
    'query': string;
    /**
     * 
     * @type {Location}
     * @memberof ChosenInlineResult
     */
    'location'?: Location;
    /**
     * *Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api/#updating-messages) the message.
     * @type {string}
     * @memberof ChosenInlineResult
     */
    'inline_message_id'?: string;
}
/**
 * 
 * @export
 * @interface CloseForumTopicPostRequest
 */
export interface CloseForumTopicPostRequest {
    /**
     * 
     * @type {RestrictChatMemberPostRequestChatId}
     * @memberof CloseForumTopicPostRequest
     */
    'chat_id': RestrictChatMemberPostRequestChatId;
    /**
     * Unique identifier for the target message thread of the forum topic
     * @type {number}
     * @memberof CloseForumTopicPostRequest
     */
    'message_thread_id': number;
}
/**
 * This object represents a phone contact.
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * Contact\'s phone number
     * @type {string}
     * @memberof Contact
     */
    'phone_number': string;
    /**
     * Contact\'s first name
     * @type {string}
     * @memberof Contact
     */
    'first_name': string;
    /**
     * *Optional*. Contact\'s last name
     * @type {string}
     * @memberof Contact
     */
    'last_name'?: string;
    /**
     * *Optional*. Contact\'s user identifier in Telegram. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier.
     * @type {number}
     * @memberof Contact
     */
    'user_id'?: number;
    /**
     * *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)
     * @type {string}
     * @memberof Contact
     */
    'vcard'?: string;
}
/**
 * 
 * @export
 * @interface ConvertGiftToStarsPostRequest
 */
export interface ConvertGiftToStarsPostRequest {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof ConvertGiftToStarsPostRequest
     */
    'business_connection_id': string;
    /**
     * Unique identifier of the regular gift that should be converted to Telegram Stars
     * @type {string}
     * @memberof ConvertGiftToStarsPostRequest
     */
    'owned_gift_id': string;
}
/**
 * 
 * @export
 * @interface CopyMessagePost200Response
 */
export interface CopyMessagePost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof CopyMessagePost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {MessageId}
     * @memberof CopyMessagePost200Response
     */
    'result': MessageId;
}
/**
 * 
 * @export
 * @interface CopyMessagePostRequest
 */
export interface CopyMessagePostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof CopyMessagePostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * 
     * @type {ForwardMessagePostRequestFromChatId}
     * @memberof CopyMessagePostRequest
     */
    'from_chat_id': ForwardMessagePostRequestFromChatId;
    /**
     * Message identifier in the chat specified in *from\\_chat\\_id*
     * @type {number}
     * @memberof CopyMessagePostRequest
     */
    'message_id': number;
    /**
     * Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @type {number}
     * @memberof CopyMessagePostRequest
     */
    'message_thread_id'?: number;
    /**
     * New start timestamp for the copied video in the message
     * @type {number}
     * @memberof CopyMessagePostRequest
     */
    'video_start_timestamp'?: number;
    /**
     * New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
     * @type {string}
     * @memberof CopyMessagePostRequest
     */
    'caption'?: string;
    /**
     * Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof CopyMessagePostRequest
     */
    'parse_mode'?: string;
    /**
     * A JSON-serialized list of special entities that appear in the new caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof CopyMessagePostRequest
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * Pass *True*, if the caption must be shown above the message media. Ignored if a new caption isn\'t specified.
     * @type {boolean}
     * @memberof CopyMessagePostRequest
     */
    'show_caption_above_media'?: boolean;
    /**
     * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @type {boolean}
     * @memberof CopyMessagePostRequest
     */
    'disable_notification'?: boolean;
    /**
     * Protects the contents of the sent message from forwarding and saving
     * @type {boolean}
     * @memberof CopyMessagePostRequest
     */
    'protect_content'?: boolean;
    /**
     * Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\'s balance
     * @type {boolean}
     * @memberof CopyMessagePostRequest
     */
    'allow_paid_broadcast'?: boolean;
    /**
     * 
     * @type {ReplyParameters}
     * @memberof CopyMessagePostRequest
     */
    'reply_parameters'?: ReplyParameters;
    /**
     * 
     * @type {SendMessagePostRequestReplyMarkup}
     * @memberof CopyMessagePostRequest
     */
    'reply_markup'?: SendMessagePostRequestReplyMarkup;
}
/**
 * 
 * @export
 * @interface CopyMessagesPostRequest
 */
export interface CopyMessagesPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof CopyMessagesPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * 
     * @type {ForwardMessagesPostRequestFromChatId}
     * @memberof CopyMessagesPostRequest
     */
    'from_chat_id': ForwardMessagesPostRequestFromChatId;
    /**
     * A JSON-serialized list of 1-100 identifiers of messages in the chat *from\\_chat\\_id* to copy. The identifiers must be specified in a strictly increasing order.
     * @type {Array<number>}
     * @memberof CopyMessagesPostRequest
     */
    'message_ids': Array<number>;
    /**
     * Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @type {number}
     * @memberof CopyMessagesPostRequest
     */
    'message_thread_id'?: number;
    /**
     * Sends the messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @type {boolean}
     * @memberof CopyMessagesPostRequest
     */
    'disable_notification'?: boolean;
    /**
     * Protects the contents of the sent messages from forwarding and saving
     * @type {boolean}
     * @memberof CopyMessagesPostRequest
     */
    'protect_content'?: boolean;
    /**
     * Pass *True* to copy the messages without their captions
     * @type {boolean}
     * @memberof CopyMessagesPostRequest
     */
    'remove_caption'?: boolean;
}
/**
 * This object represents an inline keyboard button that copies specified text to the clipboard.
 * @export
 * @interface CopyTextButton
 */
export interface CopyTextButton {
    /**
     * The text to be copied to the clipboard; 1-256 characters
     * @type {string}
     * @memberof CopyTextButton
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface CreateChatInviteLinkPost200Response
 */
export interface CreateChatInviteLinkPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof CreateChatInviteLinkPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {ChatInviteLink}
     * @memberof CreateChatInviteLinkPost200Response
     */
    'result': ChatInviteLink;
}
/**
 * 
 * @export
 * @interface CreateChatInviteLinkPostRequest
 */
export interface CreateChatInviteLinkPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof CreateChatInviteLinkPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Invite link name; 0-32 characters
     * @type {string}
     * @memberof CreateChatInviteLinkPostRequest
     */
    'name'?: string;
    /**
     * Point in time (Unix timestamp) when the link will expire
     * @type {number}
     * @memberof CreateChatInviteLinkPostRequest
     */
    'expire_date'?: number;
    /**
     * The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
     * @type {number}
     * @memberof CreateChatInviteLinkPostRequest
     */
    'member_limit'?: number;
    /**
     * *True*, if users joining the chat via the link need to be approved by chat administrators. If *True*, *member\\_limit* can\'t be specified
     * @type {boolean}
     * @memberof CreateChatInviteLinkPostRequest
     */
    'creates_join_request'?: boolean;
}
/**
 * 
 * @export
 * @interface CreateChatSubscriptionInviteLinkPostRequest
 */
export interface CreateChatSubscriptionInviteLinkPostRequest {
    /**
     * 
     * @type {CreateChatSubscriptionInviteLinkPostRequestChatId}
     * @memberof CreateChatSubscriptionInviteLinkPostRequest
     */
    'chat_id': CreateChatSubscriptionInviteLinkPostRequestChatId;
    /**
     * The number of seconds the subscription will be active for before the next payment. Currently, it must always be 2592000 (30 days).
     * @type {number}
     * @memberof CreateChatSubscriptionInviteLinkPostRequest
     */
    'subscription_period': number;
    /**
     * The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat; 1-10000
     * @type {number}
     * @memberof CreateChatSubscriptionInviteLinkPostRequest
     */
    'subscription_price': number;
    /**
     * Invite link name; 0-32 characters
     * @type {string}
     * @memberof CreateChatSubscriptionInviteLinkPostRequest
     */
    'name'?: string;
}
/**
 * @type CreateChatSubscriptionInviteLinkPostRequestChatId
 * Unique identifier for the target channel chat or username of the target channel (in the format `@channelusername`)
 * @export
 */
export type CreateChatSubscriptionInviteLinkPostRequestChatId = number | string;

/**
 * 
 * @export
 * @interface CreateForumTopicPost200Response
 */
export interface CreateForumTopicPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof CreateForumTopicPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {ForumTopic}
     * @memberof CreateForumTopicPost200Response
     */
    'result': ForumTopic;
}
/**
 * 
 * @export
 * @interface CreateForumTopicPostRequest
 */
export interface CreateForumTopicPostRequest {
    /**
     * 
     * @type {RestrictChatMemberPostRequestChatId}
     * @memberof CreateForumTopicPostRequest
     */
    'chat_id': RestrictChatMemberPostRequestChatId;
    /**
     * Topic name, 1-128 characters
     * @type {string}
     * @memberof CreateForumTopicPostRequest
     */
    'name': string;
    /**
     * Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F)
     * @type {number}
     * @memberof CreateForumTopicPostRequest
     */
    'icon_color'?: CreateForumTopicPostRequestIconColorEnum;
    /**
     * Unique identifier of the custom emoji shown as the topic icon. Use [getForumTopicIconStickers](https://core.telegram.org/bots/api/#getforumtopiciconstickers) to get all allowed custom emoji identifiers.
     * @type {string}
     * @memberof CreateForumTopicPostRequest
     */
    'icon_custom_emoji_id'?: string;
}

export const CreateForumTopicPostRequestIconColorEnum = {
    NUMBER_7322096: 7322096,
    NUMBER_16766590: 16766590,
    NUMBER_13338331: 13338331,
    NUMBER_9367192: 9367192,
    NUMBER_16749490: 16749490,
    NUMBER_16478047: 16478047
} as const;

export type CreateForumTopicPostRequestIconColorEnum = typeof CreateForumTopicPostRequestIconColorEnum[keyof typeof CreateForumTopicPostRequestIconColorEnum];

/**
 * 
 * @export
 * @interface CreateInvoiceLinkPostRequest
 */
export interface CreateInvoiceLinkPostRequest {
    /**
     * Product name, 1-32 characters
     * @type {string}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'title': string;
    /**
     * Product description, 1-255 characters
     * @type {string}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'description': string;
    /**
     * Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.
     * @type {string}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'payload': string;
    /**
     * Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies). Pass “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {string}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'currency': string;
    /**
     * Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {Array<LabeledPrice>}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'prices': Array<LabeledPrice>;
    /**
     * Unique identifier of the business connection on behalf of which the link will be created. For payments in [Telegram Stars](https://t.me/BotNews/90) only.
     * @type {string}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'business_connection_id'?: string;
    /**
     * Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an empty string for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {string}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'provider_token'?: string;
    /**
     * The number of seconds the subscription will be active for before the next payment. The currency must be set to “XTR” (Telegram Stars) if the parameter is used. Currently, it must always be 2592000 (30 days) if specified. Any number of subscriptions can be active for a given bot at the same time, including multiple concurrent subscriptions from the same user. Subscription price must no exceed 10000 Telegram Stars.
     * @type {number}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'subscription_period'?: number;
    /**
     * The maximum accepted amount for tips in the *smallest units* of the currency (integer, **not** float/double). For example, for a maximum tip of `US$ 1.45` pass `max_tip_amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {number}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'max_tip_amount'?: number;
    /**
     * A JSON-serialized array of suggested amounts of tips in the *smallest units* of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed *max\\_tip\\_amount*.
     * @type {Array<number>}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'suggested_tip_amounts'?: Array<number>;
    /**
     * JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
     * @type {string}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'provider_data'?: string;
    /**
     * URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
     * @type {string}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'photo_url'?: string;
    /**
     * Photo size in bytes
     * @type {number}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'photo_size'?: number;
    /**
     * Photo width
     * @type {number}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'photo_width'?: number;
    /**
     * Photo height
     * @type {number}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'photo_height'?: number;
    /**
     * Pass *True* if you require the user\'s full name to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'need_name'?: boolean;
    /**
     * Pass *True* if you require the user\'s phone number to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'need_phone_number'?: boolean;
    /**
     * Pass *True* if you require the user\'s email address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'need_email'?: boolean;
    /**
     * Pass *True* if you require the user\'s shipping address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'need_shipping_address'?: boolean;
    /**
     * Pass *True* if the user\'s phone number should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'send_phone_number_to_provider'?: boolean;
    /**
     * Pass *True* if the user\'s email address should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'send_email_to_provider'?: boolean;
    /**
     * Pass *True* if the final price depends on the shipping method. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof CreateInvoiceLinkPostRequest
     */
    'is_flexible'?: boolean;
}
/**
 * 
 * @export
 * @interface DeleteBusinessMessagesPostRequest
 */
export interface DeleteBusinessMessagesPostRequest {
    /**
     * Unique identifier of the business connection on behalf of which to delete the messages
     * @type {string}
     * @memberof DeleteBusinessMessagesPostRequest
     */
    'business_connection_id': string;
    /**
     * A JSON-serialized list of 1-100 identifiers of messages to delete. All messages must be from the same chat. See [deleteMessage](https://core.telegram.org/bots/api/#deletemessage) for limitations on which messages can be deleted
     * @type {Array<number>}
     * @memberof DeleteBusinessMessagesPostRequest
     */
    'message_ids': Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteChatStickerSetPostRequest
 */
export interface DeleteChatStickerSetPostRequest {
    /**
     * 
     * @type {RestrictChatMemberPostRequestChatId}
     * @memberof DeleteChatStickerSetPostRequest
     */
    'chat_id': RestrictChatMemberPostRequestChatId;
}
/**
 * 
 * @export
 * @interface DeleteMessagePostRequest
 */
export interface DeleteMessagePostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof DeleteMessagePostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Identifier of the message to delete
     * @type {number}
     * @memberof DeleteMessagePostRequest
     */
    'message_id': number;
}
/**
 * 
 * @export
 * @interface DeleteMessagesPostRequest
 */
export interface DeleteMessagesPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof DeleteMessagesPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * A JSON-serialized list of 1-100 identifiers of messages to delete. See [deleteMessage](https://core.telegram.org/bots/api/#deletemessage) for limitations on which messages can be deleted
     * @type {Array<number>}
     * @memberof DeleteMessagesPostRequest
     */
    'message_ids': Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteMyCommandsPostRequest
 */
export interface DeleteMyCommandsPostRequest {
    /**
     * 
     * @type {BotCommandScope}
     * @memberof DeleteMyCommandsPostRequest
     */
    'scope'?: BotCommandScope;
    /**
     * A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
     * @type {string}
     * @memberof DeleteMyCommandsPostRequest
     */
    'language_code'?: string;
}
/**
 * 
 * @export
 * @interface DeleteStickerFromSetPostRequest
 */
export interface DeleteStickerFromSetPostRequest {
    /**
     * File identifier of the sticker
     * @type {string}
     * @memberof DeleteStickerFromSetPostRequest
     */
    'sticker': string;
}
/**
 * 
 * @export
 * @interface DeleteStickerSetPostRequest
 */
export interface DeleteStickerSetPostRequest {
    /**
     * Sticker set name
     * @type {string}
     * @memberof DeleteStickerSetPostRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface DeleteStoryPostRequest
 */
export interface DeleteStoryPostRequest {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof DeleteStoryPostRequest
     */
    'business_connection_id': string;
    /**
     * Unique identifier of the story to delete
     * @type {number}
     * @memberof DeleteStoryPostRequest
     */
    'story_id': number;
}
/**
 * 
 * @export
 * @interface DeleteWebhookPostRequest
 */
export interface DeleteWebhookPostRequest {
    /**
     * Pass *True* to drop all pending updates
     * @type {boolean}
     * @memberof DeleteWebhookPostRequest
     */
    'drop_pending_updates'?: boolean;
}
/**
 * This object represents an animated emoji that displays a random value.
 * @export
 * @interface Dice
 */
export interface Dice {
    /**
     * Emoji on which the dice throw animation is based
     * @type {string}
     * @memberof Dice
     */
    'emoji': string;
    /**
     * Value of the dice, 1-6 for “🎲”, “🎯” and “🎳” base emoji, 1-5 for “🏀” and “⚽” base emoji, 1-64 for “🎰” base emoji
     * @type {number}
     * @memberof Dice
     */
    'value': number;
}
/**
 * This object represents a general file (as opposed to [photos](https://core.telegram.org/bots/api/#photosize), [voice messages](https://core.telegram.org/bots/api/#voice) and [audio files](https://core.telegram.org/bots/api/#audio)).
 * @export
 * @interface Document
 */
export interface Document {
    /**
     * Identifier for this file, which can be used to download or reuse the file
     * @type {string}
     * @memberof Document
     */
    'file_id': string;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
     * @type {string}
     * @memberof Document
     */
    'file_unique_id': string;
    /**
     * 
     * @type {PhotoSize}
     * @memberof Document
     */
    'thumbnail'?: PhotoSize;
    /**
     * *Optional*. Original filename as defined by the sender
     * @type {string}
     * @memberof Document
     */
    'file_name'?: string;
    /**
     * *Optional*. MIME type of the file as defined by the sender
     * @type {string}
     * @memberof Document
     */
    'mime_type'?: string;
    /**
     * *Optional*. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
     * @type {number}
     * @memberof Document
     */
    'file_size'?: number;
}
/**
 * 
 * @export
 * @interface EditChatInviteLinkPostRequest
 */
export interface EditChatInviteLinkPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof EditChatInviteLinkPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * The invite link to edit
     * @type {string}
     * @memberof EditChatInviteLinkPostRequest
     */
    'invite_link': string;
    /**
     * Invite link name; 0-32 characters
     * @type {string}
     * @memberof EditChatInviteLinkPostRequest
     */
    'name'?: string;
    /**
     * Point in time (Unix timestamp) when the link will expire
     * @type {number}
     * @memberof EditChatInviteLinkPostRequest
     */
    'expire_date'?: number;
    /**
     * The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
     * @type {number}
     * @memberof EditChatInviteLinkPostRequest
     */
    'member_limit'?: number;
    /**
     * *True*, if users joining the chat via the link need to be approved by chat administrators. If *True*, *member\\_limit* can\'t be specified
     * @type {boolean}
     * @memberof EditChatInviteLinkPostRequest
     */
    'creates_join_request'?: boolean;
}
/**
 * 
 * @export
 * @interface EditChatSubscriptionInviteLinkPostRequest
 */
export interface EditChatSubscriptionInviteLinkPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof EditChatSubscriptionInviteLinkPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * The invite link to edit
     * @type {string}
     * @memberof EditChatSubscriptionInviteLinkPostRequest
     */
    'invite_link': string;
    /**
     * Invite link name; 0-32 characters
     * @type {string}
     * @memberof EditChatSubscriptionInviteLinkPostRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface EditForumTopicPostRequest
 */
export interface EditForumTopicPostRequest {
    /**
     * 
     * @type {RestrictChatMemberPostRequestChatId}
     * @memberof EditForumTopicPostRequest
     */
    'chat_id': RestrictChatMemberPostRequestChatId;
    /**
     * Unique identifier for the target message thread of the forum topic
     * @type {number}
     * @memberof EditForumTopicPostRequest
     */
    'message_thread_id': number;
    /**
     * New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept
     * @type {string}
     * @memberof EditForumTopicPostRequest
     */
    'name'?: string;
    /**
     * New unique identifier of the custom emoji shown as the topic icon. Use [getForumTopicIconStickers](https://core.telegram.org/bots/api/#getforumtopiciconstickers) to get all allowed custom emoji identifiers. Pass an empty string to remove the icon. If not specified, the current icon will be kept
     * @type {string}
     * @memberof EditForumTopicPostRequest
     */
    'icon_custom_emoji_id'?: string;
}
/**
 * 
 * @export
 * @interface EditGeneralForumTopicPostRequest
 */
export interface EditGeneralForumTopicPostRequest {
    /**
     * 
     * @type {RestrictChatMemberPostRequestChatId}
     * @memberof EditGeneralForumTopicPostRequest
     */
    'chat_id': RestrictChatMemberPostRequestChatId;
    /**
     * New topic name, 1-128 characters
     * @type {string}
     * @memberof EditGeneralForumTopicPostRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface EditMessageCaptionPostRequest
 */
export interface EditMessageCaptionPostRequest {
    /**
     * Unique identifier of the business connection on behalf of which the message to be edited was sent
     * @type {string}
     * @memberof EditMessageCaptionPostRequest
     */
    'business_connection_id'?: string;
    /**
     * 
     * @type {EditMessageTextPostRequestChatId}
     * @memberof EditMessageCaptionPostRequest
     */
    'chat_id'?: EditMessageTextPostRequestChatId;
    /**
     * Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit
     * @type {number}
     * @memberof EditMessageCaptionPostRequest
     */
    'message_id'?: number;
    /**
     * Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message
     * @type {string}
     * @memberof EditMessageCaptionPostRequest
     */
    'inline_message_id'?: string;
    /**
     * New caption of the message, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof EditMessageCaptionPostRequest
     */
    'caption'?: string;
    /**
     * Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof EditMessageCaptionPostRequest
     */
    'parse_mode'?: string;
    /**
     * A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof EditMessageCaptionPostRequest
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * Pass *True*, if the caption must be shown above the message media. Supported only for animation, photo and video messages.
     * @type {boolean}
     * @memberof EditMessageCaptionPostRequest
     */
    'show_caption_above_media'?: boolean;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof EditMessageCaptionPostRequest
     */
    'reply_markup'?: InlineKeyboardMarkup;
}
/**
 * 
 * @export
 * @interface EditMessageLiveLocationPostRequest
 */
export interface EditMessageLiveLocationPostRequest {
    /**
     * Latitude of new location
     * @type {number}
     * @memberof EditMessageLiveLocationPostRequest
     */
    'latitude': number;
    /**
     * Longitude of new location
     * @type {number}
     * @memberof EditMessageLiveLocationPostRequest
     */
    'longitude': number;
    /**
     * Unique identifier of the business connection on behalf of which the message to be edited was sent
     * @type {string}
     * @memberof EditMessageLiveLocationPostRequest
     */
    'business_connection_id'?: string;
    /**
     * 
     * @type {EditMessageTextPostRequestChatId}
     * @memberof EditMessageLiveLocationPostRequest
     */
    'chat_id'?: EditMessageTextPostRequestChatId;
    /**
     * Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit
     * @type {number}
     * @memberof EditMessageLiveLocationPostRequest
     */
    'message_id'?: number;
    /**
     * Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message
     * @type {string}
     * @memberof EditMessageLiveLocationPostRequest
     */
    'inline_message_id'?: string;
    /**
     * New period in seconds during which the location can be updated, starting from the message send date. If 0x7FFFFFFF is specified, then the location can be updated forever. Otherwise, the new value must not exceed the current *live\\_period* by more than a day, and the live location expiration date must remain within the next 90 days. If not specified, then *live\\_period* remains unchanged
     * @type {number}
     * @memberof EditMessageLiveLocationPostRequest
     */
    'live_period'?: number;
    /**
     * The radius of uncertainty for the location, measured in meters; 0-1500
     * @type {number}
     * @memberof EditMessageLiveLocationPostRequest
     */
    'horizontal_accuracy'?: number;
    /**
     * Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
     * @type {number}
     * @memberof EditMessageLiveLocationPostRequest
     */
    'heading'?: number;
    /**
     * The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
     * @type {number}
     * @memberof EditMessageLiveLocationPostRequest
     */
    'proximity_alert_radius'?: number;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof EditMessageLiveLocationPostRequest
     */
    'reply_markup'?: InlineKeyboardMarkup;
}
/**
 * 
 * @export
 * @interface EditMessageReplyMarkupPostRequest
 */
export interface EditMessageReplyMarkupPostRequest {
    /**
     * Unique identifier of the business connection on behalf of which the message to be edited was sent
     * @type {string}
     * @memberof EditMessageReplyMarkupPostRequest
     */
    'business_connection_id'?: string;
    /**
     * 
     * @type {EditMessageTextPostRequestChatId}
     * @memberof EditMessageReplyMarkupPostRequest
     */
    'chat_id'?: EditMessageTextPostRequestChatId;
    /**
     * Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit
     * @type {number}
     * @memberof EditMessageReplyMarkupPostRequest
     */
    'message_id'?: number;
    /**
     * Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message
     * @type {string}
     * @memberof EditMessageReplyMarkupPostRequest
     */
    'inline_message_id'?: string;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof EditMessageReplyMarkupPostRequest
     */
    'reply_markup'?: InlineKeyboardMarkup;
}
/**
 * 
 * @export
 * @interface EditMessageTextPost200Response
 */
export interface EditMessageTextPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof EditMessageTextPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {EditMessageTextPost200ResponseResult}
     * @memberof EditMessageTextPost200Response
     */
    'result': EditMessageTextPost200ResponseResult;
}
/**
 * @type EditMessageTextPost200ResponseResult
 * @export
 */
export type EditMessageTextPost200ResponseResult = Message | boolean;

/**
 * 
 * @export
 * @interface EditMessageTextPostRequest
 */
export interface EditMessageTextPostRequest {
    /**
     * New text of the message, 1-4096 characters after entities parsing
     * @type {string}
     * @memberof EditMessageTextPostRequest
     */
    'text': string;
    /**
     * Unique identifier of the business connection on behalf of which the message to be edited was sent
     * @type {string}
     * @memberof EditMessageTextPostRequest
     */
    'business_connection_id'?: string;
    /**
     * 
     * @type {EditMessageTextPostRequestChatId}
     * @memberof EditMessageTextPostRequest
     */
    'chat_id'?: EditMessageTextPostRequestChatId;
    /**
     * Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit
     * @type {number}
     * @memberof EditMessageTextPostRequest
     */
    'message_id'?: number;
    /**
     * Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message
     * @type {string}
     * @memberof EditMessageTextPostRequest
     */
    'inline_message_id'?: string;
    /**
     * Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof EditMessageTextPostRequest
     */
    'parse_mode'?: string;
    /**
     * A JSON-serialized list of special entities that appear in message text, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof EditMessageTextPostRequest
     */
    'entities'?: Array<MessageEntity>;
    /**
     * 
     * @type {LinkPreviewOptions}
     * @memberof EditMessageTextPostRequest
     */
    'link_preview_options'?: LinkPreviewOptions;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof EditMessageTextPostRequest
     */
    'reply_markup'?: InlineKeyboardMarkup;
}
/**
 * @type EditMessageTextPostRequestChatId
 * Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
 * @export
 */
export type EditMessageTextPostRequestChatId = number | string;

/**
 * 
 * @export
 * @interface EditUserStarSubscriptionPostRequest
 */
export interface EditUserStarSubscriptionPostRequest {
    /**
     * Identifier of the user whose subscription will be edited
     * @type {number}
     * @memberof EditUserStarSubscriptionPostRequest
     */
    'user_id': number;
    /**
     * Telegram payment identifier for the subscription
     * @type {string}
     * @memberof EditUserStarSubscriptionPostRequest
     */
    'telegram_payment_charge_id': string;
    /**
     * Pass *True* to cancel extension of the user subscription; the subscription must be active up to the end of the current subscription period. Pass *False* to allow the user to re-enable a subscription that was previously canceled by the bot.
     * @type {boolean}
     * @memberof EditUserStarSubscriptionPostRequest
     */
    'is_canceled': boolean;
}
/**
 * Describes data required for decrypting and authenticating [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement). See the [Telegram Passport Documentation](https://core.telegram.org/passport#receiving-information) for a complete description of the data decryption and authentication processes.
 * @export
 * @interface EncryptedCredentials
 */
export interface EncryptedCredentials {
    /**
     * Base64-encoded encrypted JSON-serialized data with unique user\'s payload, data hashes and secrets required for [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement) decryption and authentication
     * @type {string}
     * @memberof EncryptedCredentials
     */
    'data': string;
    /**
     * Base64-encoded data hash for data authentication
     * @type {string}
     * @memberof EncryptedCredentials
     */
    'hash': string;
    /**
     * Base64-encoded secret, encrypted with the bot\'s public RSA key, required for data decryption
     * @type {string}
     * @memberof EncryptedCredentials
     */
    'secret': string;
}
/**
 * Describes documents or other Telegram Passport elements shared with the bot by the user.
 * @export
 * @interface EncryptedPassportElement
 */
export interface EncryptedPassportElement {
    /**
     * Element type. One of “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “address”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”, “phone\\_number”, “email”.
     * @type {string}
     * @memberof EncryptedPassportElement
     */
    'type': EncryptedPassportElementTypeEnum;
    /**
     * Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
     * @type {string}
     * @memberof EncryptedPassportElement
     */
    'hash': string;
    /**
     * *Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user; available only for “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
     * @type {string}
     * @memberof EncryptedPassportElement
     */
    'data'?: string;
    /**
     * *Optional*. User\'s verified phone number; available only for “phone\\_number” type
     * @type {string}
     * @memberof EncryptedPassportElement
     */
    'phone_number'?: string;
    /**
     * *Optional*. User\'s verified email address; available only for “email” type
     * @type {string}
     * @memberof EncryptedPassportElement
     */
    'email'?: string;
    /**
     * *Optional*. Array of encrypted files with documents provided by the user; available only for “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration” and “temporary\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
     * @type {Array<PassportFile>}
     * @memberof EncryptedPassportElement
     */
    'files'?: Array<PassportFile>;
    /**
     * 
     * @type {PassportFile}
     * @memberof EncryptedPassportElement
     */
    'front_side'?: PassportFile;
    /**
     * 
     * @type {PassportFile}
     * @memberof EncryptedPassportElement
     */
    'reverse_side'?: PassportFile;
    /**
     * 
     * @type {PassportFile}
     * @memberof EncryptedPassportElement
     */
    'selfie'?: PassportFile;
    /**
     * *Optional*. Array of encrypted files with translated versions of documents provided by the user; available if requested for “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration” and “temporary\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
     * @type {Array<PassportFile>}
     * @memberof EncryptedPassportElement
     */
    'translation'?: Array<PassportFile>;
}

export const EncryptedPassportElementTypeEnum = {
    PersonalDetails: 'personal_details',
    Passport: 'passport',
    DriverLicense: 'driver_license',
    IdentityCard: 'identity_card',
    InternalPassport: 'internal_passport',
    Address: 'address',
    UtilityBill: 'utility_bill',
    BankStatement: 'bank_statement',
    RentalAgreement: 'rental_agreement',
    PassportRegistration: 'passport_registration',
    TemporaryRegistration: 'temporary_registration',
    PhoneNumber: 'phone_number',
    Email: 'email'
} as const;

export type EncryptedPassportElementTypeEnum = typeof EncryptedPassportElementTypeEnum[keyof typeof EncryptedPassportElementTypeEnum];

/**
 * 
 * @export
 * @interface ExportChatInviteLinkPost200Response
 */
export interface ExportChatInviteLinkPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ExportChatInviteLinkPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {string}
     * @memberof ExportChatInviteLinkPost200Response
     */
    'result': string;
}
/**
 * 
 * @export
 * @interface ExportChatInviteLinkPostRequest
 */
export interface ExportChatInviteLinkPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof ExportChatInviteLinkPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
}
/**
 * This object contains information about a message that is being replied to, which may come from another chat or forum topic.
 * @export
 * @interface ExternalReplyInfo
 */
export interface ExternalReplyInfo {
    /**
     * 
     * @type {MessageOrigin}
     * @memberof ExternalReplyInfo
     */
    'origin': MessageOrigin;
    /**
     * 
     * @type {Chat}
     * @memberof ExternalReplyInfo
     */
    'chat'?: Chat;
    /**
     * *Optional*. Unique message identifier inside the original chat. Available only if the original chat is a supergroup or a channel.
     * @type {number}
     * @memberof ExternalReplyInfo
     */
    'message_id'?: number;
    /**
     * 
     * @type {LinkPreviewOptions}
     * @memberof ExternalReplyInfo
     */
    'link_preview_options'?: LinkPreviewOptions;
    /**
     * 
     * @type {Animation}
     * @memberof ExternalReplyInfo
     */
    'animation'?: Animation;
    /**
     * 
     * @type {Audio}
     * @memberof ExternalReplyInfo
     */
    'audio'?: Audio;
    /**
     * 
     * @type {Document}
     * @memberof ExternalReplyInfo
     */
    'document'?: Document;
    /**
     * 
     * @type {PaidMediaInfo}
     * @memberof ExternalReplyInfo
     */
    'paid_media'?: PaidMediaInfo;
    /**
     * *Optional*. Message is a photo, available sizes of the photo
     * @type {Array<PhotoSize>}
     * @memberof ExternalReplyInfo
     */
    'photo'?: Array<PhotoSize>;
    /**
     * 
     * @type {Sticker}
     * @memberof ExternalReplyInfo
     */
    'sticker'?: Sticker;
    /**
     * 
     * @type {Story}
     * @memberof ExternalReplyInfo
     */
    'story'?: Story;
    /**
     * 
     * @type {Video}
     * @memberof ExternalReplyInfo
     */
    'video'?: Video;
    /**
     * 
     * @type {VideoNote}
     * @memberof ExternalReplyInfo
     */
    'video_note'?: VideoNote;
    /**
     * 
     * @type {Voice}
     * @memberof ExternalReplyInfo
     */
    'voice'?: Voice;
    /**
     * *Optional*. *True*, if the message media is covered by a spoiler animation
     * @type {boolean}
     * @memberof ExternalReplyInfo
     */
    'has_media_spoiler'?: boolean;
    /**
     * 
     * @type {Contact}
     * @memberof ExternalReplyInfo
     */
    'contact'?: Contact;
    /**
     * 
     * @type {Dice}
     * @memberof ExternalReplyInfo
     */
    'dice'?: Dice;
    /**
     * 
     * @type {Game}
     * @memberof ExternalReplyInfo
     */
    'game'?: Game;
    /**
     * 
     * @type {Giveaway}
     * @memberof ExternalReplyInfo
     */
    'giveaway'?: Giveaway;
    /**
     * 
     * @type {GiveawayWinners}
     * @memberof ExternalReplyInfo
     */
    'giveaway_winners'?: GiveawayWinners;
    /**
     * 
     * @type {Invoice}
     * @memberof ExternalReplyInfo
     */
    'invoice'?: Invoice;
    /**
     * 
     * @type {Location}
     * @memberof ExternalReplyInfo
     */
    'location'?: Location;
    /**
     * 
     * @type {Poll}
     * @memberof ExternalReplyInfo
     */
    'poll'?: Poll;
    /**
     * 
     * @type {Venue}
     * @memberof ExternalReplyInfo
     */
    'venue'?: Venue;
}
/**
 * Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot\'s message and tapped \'Reply\'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](https://core.telegram.org/bots/features#privacy-mode). Not supported in channels and for messages sent on behalf of a Telegram Business account.
 * @export
 * @interface ForceReply
 */
export interface ForceReply {
    /**
     * Shows reply interface to the user, as if they manually selected the bot\'s message and tapped \'Reply\'
     * @type {boolean}
     * @memberof ForceReply
     */
    'force_reply': boolean;
    /**
     * *Optional*. The placeholder to be shown in the input field when the reply is active; 1-64 characters
     * @type {string}
     * @memberof ForceReply
     */
    'input_field_placeholder'?: string;
    /**
     * *Optional*. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot\'s message is a reply to a message in the same chat and forum topic, sender of the original message.
     * @type {boolean}
     * @memberof ForceReply
     */
    'selective'?: boolean;
}
/**
 * This object represents a forum topic.
 * @export
 * @interface ForumTopic
 */
export interface ForumTopic {
    /**
     * Unique identifier of the forum topic
     * @type {number}
     * @memberof ForumTopic
     */
    'message_thread_id': number;
    /**
     * Name of the topic
     * @type {string}
     * @memberof ForumTopic
     */
    'name': string;
    /**
     * Color of the topic icon in RGB format
     * @type {number}
     * @memberof ForumTopic
     */
    'icon_color': number;
    /**
     * *Optional*. Unique identifier of the custom emoji shown as the topic icon
     * @type {string}
     * @memberof ForumTopic
     */
    'icon_custom_emoji_id'?: string;
}
/**
 * This object represents a service message about a new forum topic created in the chat.
 * @export
 * @interface ForumTopicCreated
 */
export interface ForumTopicCreated {
    /**
     * Name of the topic
     * @type {string}
     * @memberof ForumTopicCreated
     */
    'name': string;
    /**
     * Color of the topic icon in RGB format
     * @type {number}
     * @memberof ForumTopicCreated
     */
    'icon_color': number;
    /**
     * *Optional*. Unique identifier of the custom emoji shown as the topic icon
     * @type {string}
     * @memberof ForumTopicCreated
     */
    'icon_custom_emoji_id'?: string;
}
/**
 * This object represents a service message about an edited forum topic.
 * @export
 * @interface ForumTopicEdited
 */
export interface ForumTopicEdited {
    /**
     * *Optional*. New name of the topic, if it was edited
     * @type {string}
     * @memberof ForumTopicEdited
     */
    'name'?: string;
    /**
     * *Optional*. New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed
     * @type {string}
     * @memberof ForumTopicEdited
     */
    'icon_custom_emoji_id'?: string;
}
/**
 * 
 * @export
 * @interface ForwardMessagePostRequest
 */
export interface ForwardMessagePostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof ForwardMessagePostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * 
     * @type {ForwardMessagePostRequestFromChatId}
     * @memberof ForwardMessagePostRequest
     */
    'from_chat_id': ForwardMessagePostRequestFromChatId;
    /**
     * Message identifier in the chat specified in *from\\_chat\\_id*
     * @type {number}
     * @memberof ForwardMessagePostRequest
     */
    'message_id': number;
    /**
     * Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @type {number}
     * @memberof ForwardMessagePostRequest
     */
    'message_thread_id'?: number;
    /**
     * New start timestamp for the forwarded video in the message
     * @type {number}
     * @memberof ForwardMessagePostRequest
     */
    'video_start_timestamp'?: number;
    /**
     * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @type {boolean}
     * @memberof ForwardMessagePostRequest
     */
    'disable_notification'?: boolean;
    /**
     * Protects the contents of the forwarded message from forwarding and saving
     * @type {boolean}
     * @memberof ForwardMessagePostRequest
     */
    'protect_content'?: boolean;
}
/**
 * @type ForwardMessagePostRequestFromChatId
 * Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
 * @export
 */
export type ForwardMessagePostRequestFromChatId = number | string;

/**
 * 
 * @export
 * @interface ForwardMessagesPost200Response
 */
export interface ForwardMessagesPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ForwardMessagesPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {Array<MessageId>}
     * @memberof ForwardMessagesPost200Response
     */
    'result': Array<MessageId>;
}
/**
 * 
 * @export
 * @interface ForwardMessagesPostRequest
 */
export interface ForwardMessagesPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof ForwardMessagesPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * 
     * @type {ForwardMessagesPostRequestFromChatId}
     * @memberof ForwardMessagesPostRequest
     */
    'from_chat_id': ForwardMessagesPostRequestFromChatId;
    /**
     * A JSON-serialized list of 1-100 identifiers of messages in the chat *from\\_chat\\_id* to forward. The identifiers must be specified in a strictly increasing order.
     * @type {Array<number>}
     * @memberof ForwardMessagesPostRequest
     */
    'message_ids': Array<number>;
    /**
     * Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @type {number}
     * @memberof ForwardMessagesPostRequest
     */
    'message_thread_id'?: number;
    /**
     * Sends the messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @type {boolean}
     * @memberof ForwardMessagesPostRequest
     */
    'disable_notification'?: boolean;
    /**
     * Protects the contents of the forwarded messages from forwarding and saving
     * @type {boolean}
     * @memberof ForwardMessagesPostRequest
     */
    'protect_content'?: boolean;
}
/**
 * @type ForwardMessagesPostRequestFromChatId
 * Unique identifier for the chat where the original messages were sent (or channel username in the format `@channelusername`)
 * @export
 */
export type ForwardMessagesPostRequestFromChatId = number | string;

/**
 * This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
 * @export
 * @interface Game
 */
export interface Game {
    /**
     * Title of the game
     * @type {string}
     * @memberof Game
     */
    'title': string;
    /**
     * Description of the game
     * @type {string}
     * @memberof Game
     */
    'description': string;
    /**
     * Photo that will be displayed in the game message in chats.
     * @type {Array<PhotoSize>}
     * @memberof Game
     */
    'photo': Array<PhotoSize>;
    /**
     * *Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.
     * @type {string}
     * @memberof Game
     */
    'text'?: string;
    /**
     * *Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.
     * @type {Array<MessageEntity>}
     * @memberof Game
     */
    'text_entities'?: Array<MessageEntity>;
    /**
     * 
     * @type {Animation}
     * @memberof Game
     */
    'animation'?: Animation;
}
/**
 * This object represents one row of the high scores table for a game.
 * @export
 * @interface GameHighScore
 */
export interface GameHighScore {
    /**
     * Position in high score table for the game
     * @type {number}
     * @memberof GameHighScore
     */
    'position': number;
    /**
     * 
     * @type {User}
     * @memberof GameHighScore
     */
    'user': User;
    /**
     * Score
     * @type {number}
     * @memberof GameHighScore
     */
    'score': number;
}
/**
 * 
 * @export
 * @interface GetAvailableGiftsPost200Response
 */
export interface GetAvailableGiftsPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetAvailableGiftsPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {Gifts}
     * @memberof GetAvailableGiftsPost200Response
     */
    'result': Gifts;
}
/**
 * 
 * @export
 * @interface GetBusinessAccountGiftsPost200Response
 */
export interface GetBusinessAccountGiftsPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetBusinessAccountGiftsPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {OwnedGifts}
     * @memberof GetBusinessAccountGiftsPost200Response
     */
    'result': OwnedGifts;
}
/**
 * 
 * @export
 * @interface GetBusinessAccountGiftsPostRequest
 */
export interface GetBusinessAccountGiftsPostRequest {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof GetBusinessAccountGiftsPostRequest
     */
    'business_connection_id': string;
    /**
     * Pass True to exclude gifts that aren\'t saved to the account\'s profile page
     * @type {boolean}
     * @memberof GetBusinessAccountGiftsPostRequest
     */
    'exclude_unsaved'?: boolean;
    /**
     * Pass True to exclude gifts that are saved to the account\'s profile page
     * @type {boolean}
     * @memberof GetBusinessAccountGiftsPostRequest
     */
    'exclude_saved'?: boolean;
    /**
     * Pass True to exclude gifts that can be purchased an unlimited number of times
     * @type {boolean}
     * @memberof GetBusinessAccountGiftsPostRequest
     */
    'exclude_unlimited'?: boolean;
    /**
     * Pass True to exclude gifts that can be purchased a limited number of times
     * @type {boolean}
     * @memberof GetBusinessAccountGiftsPostRequest
     */
    'exclude_limited'?: boolean;
    /**
     * Pass True to exclude unique gifts
     * @type {boolean}
     * @memberof GetBusinessAccountGiftsPostRequest
     */
    'exclude_unique'?: boolean;
    /**
     * Pass True to sort results by gift price instead of send date. Sorting is applied before pagination.
     * @type {boolean}
     * @memberof GetBusinessAccountGiftsPostRequest
     */
    'sort_by_price'?: boolean;
    /**
     * Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
     * @type {string}
     * @memberof GetBusinessAccountGiftsPostRequest
     */
    'offset'?: string;
    /**
     * The maximum number of gifts to be returned; 1-100. Defaults to 100
     * @type {number}
     * @memberof GetBusinessAccountGiftsPostRequest
     */
    'limit'?: number;
}
/**
 * 
 * @export
 * @interface GetBusinessAccountStarBalancePost200Response
 */
export interface GetBusinessAccountStarBalancePost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetBusinessAccountStarBalancePost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {StarAmount}
     * @memberof GetBusinessAccountStarBalancePost200Response
     */
    'result': StarAmount;
}
/**
 * 
 * @export
 * @interface GetBusinessConnectionPost200Response
 */
export interface GetBusinessConnectionPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetBusinessConnectionPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {BusinessConnection}
     * @memberof GetBusinessConnectionPost200Response
     */
    'result': BusinessConnection;
}
/**
 * 
 * @export
 * @interface GetBusinessConnectionPostRequest
 */
export interface GetBusinessConnectionPostRequest {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof GetBusinessConnectionPostRequest
     */
    'business_connection_id': string;
}
/**
 * 
 * @export
 * @interface GetChatAdministratorsPost200Response
 */
export interface GetChatAdministratorsPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetChatAdministratorsPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {Array<ChatMember>}
     * @memberof GetChatAdministratorsPost200Response
     */
    'result': Array<ChatMember>;
}
/**
 * 
 * @export
 * @interface GetChatMemberCountPost200Response
 */
export interface GetChatMemberCountPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetChatMemberCountPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {number}
     * @memberof GetChatMemberCountPost200Response
     */
    'result': number;
}
/**
 * 
 * @export
 * @interface GetChatMemberPost200Response
 */
export interface GetChatMemberPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetChatMemberPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {ChatMember}
     * @memberof GetChatMemberPost200Response
     */
    'result': ChatMember;
}
/**
 * 
 * @export
 * @interface GetChatMemberPostRequest
 */
export interface GetChatMemberPostRequest {
    /**
     * 
     * @type {LeaveChatPostRequestChatId}
     * @memberof GetChatMemberPostRequest
     */
    'chat_id': LeaveChatPostRequestChatId;
    /**
     * Unique identifier of the target user
     * @type {number}
     * @memberof GetChatMemberPostRequest
     */
    'user_id': number;
}
/**
 * 
 * @export
 * @interface GetChatMenuButtonPost200Response
 */
export interface GetChatMenuButtonPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetChatMenuButtonPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {MenuButton}
     * @memberof GetChatMenuButtonPost200Response
     */
    'result': MenuButton;
}
/**
 * 
 * @export
 * @interface GetChatMenuButtonPostRequest
 */
export interface GetChatMenuButtonPostRequest {
    /**
     * Unique identifier for the target private chat. If not specified, default bot\'s menu button will be returned
     * @type {number}
     * @memberof GetChatMenuButtonPostRequest
     */
    'chat_id'?: number;
}
/**
 * 
 * @export
 * @interface GetChatPost200Response
 */
export interface GetChatPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetChatPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {ChatFullInfo}
     * @memberof GetChatPost200Response
     */
    'result': ChatFullInfo;
}
/**
 * 
 * @export
 * @interface GetCustomEmojiStickersPostRequest
 */
export interface GetCustomEmojiStickersPostRequest {
    /**
     * A JSON-serialized list of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.
     * @type {Array<string>}
     * @memberof GetCustomEmojiStickersPostRequest
     */
    'custom_emoji_ids': Array<string>;
}
/**
 * 
 * @export
 * @interface GetFilePost200Response
 */
export interface GetFilePost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetFilePost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {any}
     * @memberof GetFilePost200Response
     */
    'result': any;
}
/**
 * 
 * @export
 * @interface GetFilePostRequest
 */
export interface GetFilePostRequest {
    /**
     * File identifier to get information about
     * @type {string}
     * @memberof GetFilePostRequest
     */
    'file_id': string;
}
/**
 * 
 * @export
 * @interface GetForumTopicIconStickersPost200Response
 */
export interface GetForumTopicIconStickersPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetForumTopicIconStickersPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {Array<Sticker>}
     * @memberof GetForumTopicIconStickersPost200Response
     */
    'result': Array<Sticker>;
}
/**
 * 
 * @export
 * @interface GetGameHighScoresPost200Response
 */
export interface GetGameHighScoresPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetGameHighScoresPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {Array<GameHighScore>}
     * @memberof GetGameHighScoresPost200Response
     */
    'result': Array<GameHighScore>;
}
/**
 * 
 * @export
 * @interface GetGameHighScoresPostRequest
 */
export interface GetGameHighScoresPostRequest {
    /**
     * Target user id
     * @type {number}
     * @memberof GetGameHighScoresPostRequest
     */
    'user_id': number;
    /**
     * Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat
     * @type {number}
     * @memberof GetGameHighScoresPostRequest
     */
    'chat_id'?: number;
    /**
     * Required if *inline\\_message\\_id* is not specified. Identifier of the sent message
     * @type {number}
     * @memberof GetGameHighScoresPostRequest
     */
    'message_id'?: number;
    /**
     * Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message
     * @type {string}
     * @memberof GetGameHighScoresPostRequest
     */
    'inline_message_id'?: string;
}
/**
 * 
 * @export
 * @interface GetMePost200Response
 */
export interface GetMePost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetMePost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {User}
     * @memberof GetMePost200Response
     */
    'result': User;
}
/**
 * 
 * @export
 * @interface GetMyCommandsPost200Response
 */
export interface GetMyCommandsPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetMyCommandsPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {Array<BotCommand>}
     * @memberof GetMyCommandsPost200Response
     */
    'result': Array<BotCommand>;
}
/**
 * 
 * @export
 * @interface GetMyCommandsPostRequest
 */
export interface GetMyCommandsPostRequest {
    /**
     * 
     * @type {BotCommandScope}
     * @memberof GetMyCommandsPostRequest
     */
    'scope'?: BotCommandScope;
    /**
     * A two-letter ISO 639-1 language code or an empty string
     * @type {string}
     * @memberof GetMyCommandsPostRequest
     */
    'language_code'?: string;
}
/**
 * 
 * @export
 * @interface GetMyDefaultAdministratorRightsPost200Response
 */
export interface GetMyDefaultAdministratorRightsPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetMyDefaultAdministratorRightsPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {ChatAdministratorRights}
     * @memberof GetMyDefaultAdministratorRightsPost200Response
     */
    'result': ChatAdministratorRights;
}
/**
 * 
 * @export
 * @interface GetMyDefaultAdministratorRightsPostRequest
 */
export interface GetMyDefaultAdministratorRightsPostRequest {
    /**
     * Pass *True* to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.
     * @type {boolean}
     * @memberof GetMyDefaultAdministratorRightsPostRequest
     */
    'for_channels'?: boolean;
}
/**
 * 
 * @export
 * @interface GetMyDescriptionPost200Response
 */
export interface GetMyDescriptionPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetMyDescriptionPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {BotDescription}
     * @memberof GetMyDescriptionPost200Response
     */
    'result': BotDescription;
}
/**
 * 
 * @export
 * @interface GetMyNamePost200Response
 */
export interface GetMyNamePost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetMyNamePost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {BotName}
     * @memberof GetMyNamePost200Response
     */
    'result': BotName;
}
/**
 * 
 * @export
 * @interface GetMyNamePostRequest
 */
export interface GetMyNamePostRequest {
    /**
     * A two-letter ISO 639-1 language code or an empty string
     * @type {string}
     * @memberof GetMyNamePostRequest
     */
    'language_code'?: string;
}
/**
 * 
 * @export
 * @interface GetMyShortDescriptionPost200Response
 */
export interface GetMyShortDescriptionPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetMyShortDescriptionPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {BotShortDescription}
     * @memberof GetMyShortDescriptionPost200Response
     */
    'result': BotShortDescription;
}
/**
 * 
 * @export
 * @interface GetStarTransactionsPost200Response
 */
export interface GetStarTransactionsPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetStarTransactionsPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {StarTransactions}
     * @memberof GetStarTransactionsPost200Response
     */
    'result': StarTransactions;
}
/**
 * 
 * @export
 * @interface GetStarTransactionsPostRequest
 */
export interface GetStarTransactionsPostRequest {
    /**
     * Number of transactions to skip in the response
     * @type {number}
     * @memberof GetStarTransactionsPostRequest
     */
    'offset'?: number;
    /**
     * The maximum number of transactions to be retrieved. Values between 1-100 are accepted. Defaults to 100.
     * @type {number}
     * @memberof GetStarTransactionsPostRequest
     */
    'limit'?: number;
}
/**
 * 
 * @export
 * @interface GetStickerSetPost200Response
 */
export interface GetStickerSetPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetStickerSetPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {StickerSet}
     * @memberof GetStickerSetPost200Response
     */
    'result': StickerSet;
}
/**
 * 
 * @export
 * @interface GetStickerSetPostRequest
 */
export interface GetStickerSetPostRequest {
    /**
     * Name of the sticker set
     * @type {string}
     * @memberof GetStickerSetPostRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface GetUpdatesPost200Response
 */
export interface GetUpdatesPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetUpdatesPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {Array<Update>}
     * @memberof GetUpdatesPost200Response
     */
    'result': Array<Update>;
}
/**
 * 
 * @export
 * @interface GetUpdatesPostRequest
 */
export interface GetUpdatesPostRequest {
    /**
     * Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will be forgotten.
     * @type {number}
     * @memberof GetUpdatesPostRequest
     */
    'offset'?: number;
    /**
     * Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
     * @type {number}
     * @memberof GetUpdatesPostRequest
     */
    'limit'?: number;
    /**
     * Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
     * @type {number}
     * @memberof GetUpdatesPostRequest
     */
    'timeout'?: number;
    /**
     * A JSON-serialized list of the update types you want your bot to receive. For example, specify `[\"message\", \"edited_channel_post\", \"callback_query\"]` to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all update types except *chat\\_member*, *message\\_reaction*, and *message\\_reaction\\_count* (default). If not specified, the previous setting will be used.    Please note that this parameter doesn\'t affect updates created before the call to getUpdates, so unwanted updates may be received for a short period of time.
     * @type {Array<string>}
     * @memberof GetUpdatesPostRequest
     */
    'allowed_updates'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetUserChatBoostsPost200Response
 */
export interface GetUserChatBoostsPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetUserChatBoostsPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {UserChatBoosts}
     * @memberof GetUserChatBoostsPost200Response
     */
    'result': UserChatBoosts;
}
/**
 * 
 * @export
 * @interface GetUserChatBoostsPostRequest
 */
export interface GetUserChatBoostsPostRequest {
    /**
     * 
     * @type {GetUserChatBoostsPostRequestChatId}
     * @memberof GetUserChatBoostsPostRequest
     */
    'chat_id': GetUserChatBoostsPostRequestChatId;
    /**
     * Unique identifier of the target user
     * @type {number}
     * @memberof GetUserChatBoostsPostRequest
     */
    'user_id': number;
}
/**
 * @type GetUserChatBoostsPostRequestChatId
 * Unique identifier for the chat or username of the channel (in the format `@channelusername`)
 * @export
 */
export type GetUserChatBoostsPostRequestChatId = number | string;

/**
 * 
 * @export
 * @interface GetUserProfilePhotosPost200Response
 */
export interface GetUserProfilePhotosPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetUserProfilePhotosPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {UserProfilePhotos}
     * @memberof GetUserProfilePhotosPost200Response
     */
    'result': UserProfilePhotos;
}
/**
 * 
 * @export
 * @interface GetUserProfilePhotosPostRequest
 */
export interface GetUserProfilePhotosPostRequest {
    /**
     * Unique identifier of the target user
     * @type {number}
     * @memberof GetUserProfilePhotosPostRequest
     */
    'user_id': number;
    /**
     * Sequential number of the first photo to be returned. By default, all photos are returned.
     * @type {number}
     * @memberof GetUserProfilePhotosPostRequest
     */
    'offset'?: number;
    /**
     * Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
     * @type {number}
     * @memberof GetUserProfilePhotosPostRequest
     */
    'limit'?: number;
}
/**
 * 
 * @export
 * @interface GetWebhookInfoPost200Response
 */
export interface GetWebhookInfoPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetWebhookInfoPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {WebhookInfo}
     * @memberof GetWebhookInfoPost200Response
     */
    'result': WebhookInfo;
}
/**
 * This object represents a gift that can be sent by the bot.
 * @export
 * @interface Gift
 */
export interface Gift {
    /**
     * Unique identifier of the gift
     * @type {string}
     * @memberof Gift
     */
    'id': string;
    /**
     * 
     * @type {Sticker}
     * @memberof Gift
     */
    'sticker': Sticker;
    /**
     * The number of Telegram Stars that must be paid to send the sticker
     * @type {number}
     * @memberof Gift
     */
    'star_count': number;
    /**
     * *Optional*. The number of Telegram Stars that must be paid to upgrade the gift to a unique one
     * @type {number}
     * @memberof Gift
     */
    'upgrade_star_count'?: number;
    /**
     * *Optional*. The total number of the gifts of this type that can be sent; for limited gifts only
     * @type {number}
     * @memberof Gift
     */
    'total_count'?: number;
    /**
     * *Optional*. The number of remaining gifts of this type that can be sent; for limited gifts only
     * @type {number}
     * @memberof Gift
     */
    'remaining_count'?: number;
}
/**
 * Describes a service message about a regular gift that was sent or received.
 * @export
 * @interface GiftInfo
 */
export interface GiftInfo {
    /**
     * 
     * @type {Gift}
     * @memberof GiftInfo
     */
    'gift': Gift;
    /**
     * *Optional*. Unique identifier of the received gift for the bot; only present for gifts received on behalf of business accounts
     * @type {string}
     * @memberof GiftInfo
     */
    'owned_gift_id'?: string;
    /**
     * *Optional*. Number of Telegram Stars that can be claimed by the receiver by converting the gift; omitted if conversion to Telegram Stars is impossible
     * @type {number}
     * @memberof GiftInfo
     */
    'convert_star_count'?: number;
    /**
     * *Optional*. Number of Telegram Stars that were prepaid by the sender for the ability to upgrade the gift
     * @type {number}
     * @memberof GiftInfo
     */
    'prepaid_upgrade_star_count'?: number;
    /**
     * *Optional*. True, if the gift can be upgraded to a unique gift
     * @type {boolean}
     * @memberof GiftInfo
     */
    'can_be_upgraded'?: boolean;
    /**
     * *Optional*. Text of the message that was added to the gift
     * @type {string}
     * @memberof GiftInfo
     */
    'text'?: string;
    /**
     * *Optional*. Special entities that appear in the text
     * @type {Array<MessageEntity>}
     * @memberof GiftInfo
     */
    'entities'?: Array<MessageEntity>;
    /**
     * *Optional*. True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them
     * @type {boolean}
     * @memberof GiftInfo
     */
    'is_private'?: boolean;
}
/**
 * 
 * @export
 * @interface GiftPremiumSubscriptionPostRequest
 */
export interface GiftPremiumSubscriptionPostRequest {
    /**
     * Unique identifier of the target user who will receive a Telegram Premium subscription
     * @type {number}
     * @memberof GiftPremiumSubscriptionPostRequest
     */
    'user_id': number;
    /**
     * Number of months the Telegram Premium subscription will be active for the user; must be one of 3, 6, or 12
     * @type {number}
     * @memberof GiftPremiumSubscriptionPostRequest
     */
    'month_count': GiftPremiumSubscriptionPostRequestMonthCountEnum;
    /**
     * Number of Telegram Stars to pay for the Telegram Premium subscription; must be 1000 for 3 months, 1500 for 6 months, and 2500 for 12 months
     * @type {number}
     * @memberof GiftPremiumSubscriptionPostRequest
     */
    'star_count': number;
    /**
     * Text that will be shown along with the service message about the subscription; 0-128 characters
     * @type {string}
     * @memberof GiftPremiumSubscriptionPostRequest
     */
    'text'?: string;
    /**
     * Mode for parsing entities in the text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\_emoji” are ignored.
     * @type {string}
     * @memberof GiftPremiumSubscriptionPostRequest
     */
    'text_parse_mode'?: string;
    /**
     * A JSON-serialized list of special entities that appear in the gift text. It can be specified instead of *text\\_parse\\_mode*. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\_emoji” are ignored.
     * @type {Array<MessageEntity>}
     * @memberof GiftPremiumSubscriptionPostRequest
     */
    'text_entities'?: Array<MessageEntity>;
}

export const GiftPremiumSubscriptionPostRequestMonthCountEnum = {
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12
} as const;

export type GiftPremiumSubscriptionPostRequestMonthCountEnum = typeof GiftPremiumSubscriptionPostRequestMonthCountEnum[keyof typeof GiftPremiumSubscriptionPostRequestMonthCountEnum];

/**
 * This object represent a list of gifts.
 * @export
 * @interface Gifts
 */
export interface Gifts {
    /**
     * The list of gifts
     * @type {Array<Gift>}
     * @memberof Gifts
     */
    'gifts': Array<Gift>;
}
/**
 * This object represents a message about a scheduled giveaway.
 * @export
 * @interface Giveaway
 */
export interface Giveaway {
    /**
     * The list of chats which the user must join to participate in the giveaway
     * @type {Array<Chat>}
     * @memberof Giveaway
     */
    'chats': Array<Chat>;
    /**
     * Point in time (Unix timestamp) when winners of the giveaway will be selected
     * @type {number}
     * @memberof Giveaway
     */
    'winners_selection_date': number;
    /**
     * The number of users which are supposed to be selected as winners of the giveaway
     * @type {number}
     * @memberof Giveaway
     */
    'winner_count': number;
    /**
     * *Optional*. *True*, if only users who join the chats after the giveaway started should be eligible to win
     * @type {boolean}
     * @memberof Giveaway
     */
    'only_new_members'?: boolean;
    /**
     * *Optional*. *True*, if the list of giveaway winners will be visible to everyone
     * @type {boolean}
     * @memberof Giveaway
     */
    'has_public_winners'?: boolean;
    /**
     * *Optional*. Description of additional giveaway prize
     * @type {string}
     * @memberof Giveaway
     */
    'prize_description'?: string;
    /**
     * *Optional*. A list of two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes indicating the countries from which eligible users for the giveaway must come. If empty, then all users can participate in the giveaway. Users with a phone number that was bought on Fragment can always participate in giveaways.
     * @type {Array<string>}
     * @memberof Giveaway
     */
    'country_codes'?: Array<string>;
    /**
     * *Optional*. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only
     * @type {number}
     * @memberof Giveaway
     */
    'prize_star_count'?: number;
    /**
     * *Optional*. The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only
     * @type {number}
     * @memberof Giveaway
     */
    'premium_subscription_month_count'?: number;
}
/**
 * This object represents a service message about the completion of a giveaway without public winners.
 * @export
 * @interface GiveawayCompleted
 */
export interface GiveawayCompleted {
    /**
     * Number of winners in the giveaway
     * @type {number}
     * @memberof GiveawayCompleted
     */
    'winner_count': number;
    /**
     * *Optional*. Number of undistributed prizes
     * @type {number}
     * @memberof GiveawayCompleted
     */
    'unclaimed_prize_count'?: number;
    /**
     * 
     * @type {Message}
     * @memberof GiveawayCompleted
     */
    'giveaway_message'?: Message;
    /**
     * *Optional*. *True*, if the giveaway is a Telegram Star giveaway. Otherwise, currently, the giveaway is a Telegram Premium giveaway.
     * @type {boolean}
     * @memberof GiveawayCompleted
     */
    'is_star_giveaway'?: boolean;
}
/**
 * This object represents a service message about the creation of a scheduled giveaway.
 * @export
 * @interface GiveawayCreated
 */
export interface GiveawayCreated {
    /**
     * *Optional*. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only
     * @type {number}
     * @memberof GiveawayCreated
     */
    'prize_star_count'?: number;
}
/**
 * This object represents a message about the completion of a giveaway with public winners.
 * @export
 * @interface GiveawayWinners
 */
export interface GiveawayWinners {
    /**
     * 
     * @type {Chat}
     * @memberof GiveawayWinners
     */
    'chat': Chat;
    /**
     * Identifier of the message with the giveaway in the chat
     * @type {number}
     * @memberof GiveawayWinners
     */
    'giveaway_message_id': number;
    /**
     * Point in time (Unix timestamp) when winners of the giveaway were selected
     * @type {number}
     * @memberof GiveawayWinners
     */
    'winners_selection_date': number;
    /**
     * Total number of winners in the giveaway
     * @type {number}
     * @memberof GiveawayWinners
     */
    'winner_count': number;
    /**
     * List of up to 100 winners of the giveaway
     * @type {Array<User>}
     * @memberof GiveawayWinners
     */
    'winners': Array<User>;
    /**
     * *Optional*. The number of other chats the user had to join in order to be eligible for the giveaway
     * @type {number}
     * @memberof GiveawayWinners
     */
    'additional_chat_count'?: number;
    /**
     * *Optional*. The number of Telegram Stars that were split between giveaway winners; for Telegram Star giveaways only
     * @type {number}
     * @memberof GiveawayWinners
     */
    'prize_star_count'?: number;
    /**
     * *Optional*. The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only
     * @type {number}
     * @memberof GiveawayWinners
     */
    'premium_subscription_month_count'?: number;
    /**
     * *Optional*. Number of undistributed prizes
     * @type {number}
     * @memberof GiveawayWinners
     */
    'unclaimed_prize_count'?: number;
    /**
     * *Optional*. *True*, if only users who had joined the chats after the giveaway started were eligible to win
     * @type {boolean}
     * @memberof GiveawayWinners
     */
    'only_new_members'?: boolean;
    /**
     * *Optional*. *True*, if the giveaway was canceled because the payment for it was refunded
     * @type {boolean}
     * @memberof GiveawayWinners
     */
    'was_refunded'?: boolean;
    /**
     * *Optional*. Description of additional giveaway prize
     * @type {string}
     * @memberof GiveawayWinners
     */
    'prize_description'?: string;
}
/**
 * This object describes a message that was deleted or is otherwise inaccessible to the bot.
 * @export
 * @interface InaccessibleMessage
 */
export interface InaccessibleMessage {
    /**
     * 
     * @type {Chat}
     * @memberof InaccessibleMessage
     */
    'chat': Chat;
    /**
     * Unique message identifier inside the chat
     * @type {number}
     * @memberof InaccessibleMessage
     */
    'message_id': number;
    /**
     * Always 0. The field can be used to differentiate regular and inaccessible messages.
     * @type {number}
     * @memberof InaccessibleMessage
     */
    'date': number;
}
/**
 * This object represents one button of an inline keyboard. Exactly one of the optional fields must be used to specify type of the button.
 * @export
 * @interface InlineKeyboardButton
 */
export interface InlineKeyboardButton {
    /**
     * Label text on the button
     * @type {string}
     * @memberof InlineKeyboardButton
     */
    'text': string;
    /**
     * *Optional*. HTTP or tg:// URL to be opened when the button is pressed. Links `tg://user?id=<user_id>` can be used to mention a user by their identifier without using a username, if this is allowed by their privacy settings.
     * @type {string}
     * @memberof InlineKeyboardButton
     */
    'url'?: string;
    /**
     * *Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when the button is pressed, 1-64 bytes
     * @type {string}
     * @memberof InlineKeyboardButton
     */
    'callback_data'?: string;
    /**
     * 
     * @type {WebAppInfo}
     * @memberof InlineKeyboardButton
     */
    'web_app'?: WebAppInfo;
    /**
     * 
     * @type {LoginUrl}
     * @memberof InlineKeyboardButton
     */
    'login_url'?: LoginUrl;
    /**
     * *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot\'s username and the specified inline query in the input field. May be empty, in which case just the bot\'s username will be inserted. Not supported for messages sent on behalf of a Telegram Business account.
     * @type {string}
     * @memberof InlineKeyboardButton
     */
    'switch_inline_query'?: string;
    /**
     * *Optional*. If set, pressing the button will insert the bot\'s username and the specified inline query in the current chat\'s input field. May be empty, in which case only the bot\'s username will be inserted.    This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent on behalf of a Telegram Business account.
     * @type {string}
     * @memberof InlineKeyboardButton
     */
    'switch_inline_query_current_chat'?: string;
    /**
     * 
     * @type {SwitchInlineQueryChosenChat}
     * @memberof InlineKeyboardButton
     */
    'switch_inline_query_chosen_chat'?: SwitchInlineQueryChosenChat;
    /**
     * 
     * @type {CopyTextButton}
     * @memberof InlineKeyboardButton
     */
    'copy_text'?: CopyTextButton;
    /**
     * 
     * @type {any}
     * @memberof InlineKeyboardButton
     */
    'callback_game'?: any;
    /**
     * *Optional*. Specify *True*, to send a [Pay button](https://core.telegram.org/bots/api/#payments). Substrings “⭐” and “XTR” in the buttons\'s text will be replaced with a Telegram Star icon.    **NOTE:** This type of button **must** always be the first button in the first row and can only be used in invoice messages.
     * @type {boolean}
     * @memberof InlineKeyboardButton
     */
    'pay'?: boolean;
}
/**
 * This object represents an [inline keyboard](https://core.telegram.org/bots/features#inline-keyboards) that appears right next to the message it belongs to.
 * @export
 * @interface InlineKeyboardMarkup
 */
export interface InlineKeyboardMarkup {
    /**
     * Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects
     * @type {Array<Array<InlineKeyboardButton>>}
     * @memberof InlineKeyboardMarkup
     */
    'inline_keyboard': Array<Array<InlineKeyboardButton>>;
}
/**
 * This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
 * @export
 * @interface InlineQuery
 */
export interface InlineQuery {
    /**
     * Unique identifier for this query
     * @type {string}
     * @memberof InlineQuery
     */
    'id': string;
    /**
     * 
     * @type {User}
     * @memberof InlineQuery
     */
    'from': User;
    /**
     * Text of the query (up to 256 characters)
     * @type {string}
     * @memberof InlineQuery
     */
    'query': string;
    /**
     * Offset of the results to be returned, can be controlled by the bot
     * @type {string}
     * @memberof InlineQuery
     */
    'offset': string;
    /**
     * *Optional*. Type of the chat from which the inline query was sent. Can be either “sender” for a private chat with the inline query sender, “private”, “group”, “supergroup”, or “channel”. The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat
     * @type {string}
     * @memberof InlineQuery
     */
    'chat_type'?: InlineQueryChatTypeEnum;
    /**
     * 
     * @type {Location}
     * @memberof InlineQuery
     */
    'location'?: Location;
}

export const InlineQueryChatTypeEnum = {
    Sender: 'sender',
    Private: 'private',
    Group: 'group',
    Supergroup: 'supergroup',
    Channel: 'channel'
} as const;

export type InlineQueryChatTypeEnum = typeof InlineQueryChatTypeEnum[keyof typeof InlineQueryChatTypeEnum];

/**
 * @type InlineQueryResult
 * This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:  * [InlineQueryResultCachedAudio](https://core.telegram.org/bots/api/#inlinequeryresultcachedaudio) * [InlineQueryResultCachedDocument](https://core.telegram.org/bots/api/#inlinequeryresultcacheddocument) * [InlineQueryResultCachedGif](https://core.telegram.org/bots/api/#inlinequeryresultcachedgif) * [InlineQueryResultCachedMpeg4Gif](https://core.telegram.org/bots/api/#inlinequeryresultcachedmpeg4gif) * [InlineQueryResultCachedPhoto](https://core.telegram.org/bots/api/#inlinequeryresultcachedphoto) * [InlineQueryResultCachedSticker](https://core.telegram.org/bots/api/#inlinequeryresultcachedsticker) * [InlineQueryResultCachedVideo](https://core.telegram.org/bots/api/#inlinequeryresultcachedvideo) * [InlineQueryResultCachedVoice](https://core.telegram.org/bots/api/#inlinequeryresultcachedvoice) * [InlineQueryResultArticle](https://core.telegram.org/bots/api/#inlinequeryresultarticle) * [InlineQueryResultAudio](https://core.telegram.org/bots/api/#inlinequeryresultaudio) * [InlineQueryResultContact](https://core.telegram.org/bots/api/#inlinequeryresultcontact) * [InlineQueryResultGame](https://core.telegram.org/bots/api/#inlinequeryresultgame) * [InlineQueryResultDocument](https://core.telegram.org/bots/api/#inlinequeryresultdocument) * [InlineQueryResultGif](https://core.telegram.org/bots/api/#inlinequeryresultgif) * [InlineQueryResultLocation](https://core.telegram.org/bots/api/#inlinequeryresultlocation) * [InlineQueryResultMpeg4Gif](https://core.telegram.org/bots/api/#inlinequeryresultmpeg4gif) * [InlineQueryResultPhoto](https://core.telegram.org/bots/api/#inlinequeryresultphoto) * [InlineQueryResultVenue](https://core.telegram.org/bots/api/#inlinequeryresultvenue) * [InlineQueryResultVideo](https://core.telegram.org/bots/api/#inlinequeryresultvideo) * [InlineQueryResultVoice](https://core.telegram.org/bots/api/#inlinequeryresultvoice)
 * @export
 */
export type InlineQueryResult = InlineQueryResultArticle | InlineQueryResultAudio | InlineQueryResultCachedAudio | InlineQueryResultCachedDocument | InlineQueryResultCachedGif | InlineQueryResultCachedMpeg4Gif | InlineQueryResultCachedPhoto | InlineQueryResultCachedSticker | InlineQueryResultCachedVideo | InlineQueryResultCachedVoice | InlineQueryResultContact | InlineQueryResultDocument | InlineQueryResultGame | InlineQueryResultGif | InlineQueryResultLocation | InlineQueryResultMpeg4Gif | InlineQueryResultPhoto | InlineQueryResultVenue | InlineQueryResultVideo | InlineQueryResultVoice;

/**
 * Represents a link to an article or web page.
 * @export
 * @interface InlineQueryResultArticle
 */
export interface InlineQueryResultArticle {
    /**
     * Type of the result, must be *article*
     * @type {string}
     * @memberof InlineQueryResultArticle
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 Bytes
     * @type {string}
     * @memberof InlineQueryResultArticle
     */
    'id': string;
    /**
     * Title of the result
     * @type {string}
     * @memberof InlineQueryResultArticle
     */
    'title': string;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultArticle
     */
    'input_message_content': InputMessageContent;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultArticle
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * *Optional*. URL of the result
     * @type {string}
     * @memberof InlineQueryResultArticle
     */
    'url'?: string;
    /**
     * *Optional*. Short description of the result
     * @type {string}
     * @memberof InlineQueryResultArticle
     */
    'description'?: string;
    /**
     * *Optional*. Url of the thumbnail for the result
     * @type {string}
     * @memberof InlineQueryResultArticle
     */
    'thumbnail_url'?: string;
    /**
     * *Optional*. Thumbnail width
     * @type {number}
     * @memberof InlineQueryResultArticle
     */
    'thumbnail_width'?: number;
    /**
     * *Optional*. Thumbnail height
     * @type {number}
     * @memberof InlineQueryResultArticle
     */
    'thumbnail_height'?: number;
}
/**
 * Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the audio.
 * @export
 * @interface InlineQueryResultAudio
 */
export interface InlineQueryResultAudio {
    /**
     * Type of the result, must be *audio*
     * @type {string}
     * @memberof InlineQueryResultAudio
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultAudio
     */
    'id': string;
    /**
     * A valid URL for the audio file
     * @type {string}
     * @memberof InlineQueryResultAudio
     */
    'audio_url': string;
    /**
     * Title
     * @type {string}
     * @memberof InlineQueryResultAudio
     */
    'title': string;
    /**
     * *Optional*. Caption, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultAudio
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultAudio
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultAudio
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Performer
     * @type {string}
     * @memberof InlineQueryResultAudio
     */
    'performer'?: string;
    /**
     * *Optional*. Audio duration in seconds
     * @type {number}
     * @memberof InlineQueryResultAudio
     */
    'audio_duration'?: number;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultAudio
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultAudio
     */
    'input_message_content'?: InputMessageContent;
}
/**
 * Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the audio.
 * @export
 * @interface InlineQueryResultCachedAudio
 */
export interface InlineQueryResultCachedAudio {
    /**
     * Type of the result, must be *audio*
     * @type {string}
     * @memberof InlineQueryResultCachedAudio
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultCachedAudio
     */
    'id': string;
    /**
     * A valid file identifier for the audio file
     * @type {string}
     * @memberof InlineQueryResultCachedAudio
     */
    'audio_file_id': string;
    /**
     * *Optional*. Caption, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultCachedAudio
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultCachedAudio
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultCachedAudio
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultCachedAudio
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultCachedAudio
     */
    'input_message_content'?: InputMessageContent;
}
/**
 * Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the file.
 * @export
 * @interface InlineQueryResultCachedDocument
 */
export interface InlineQueryResultCachedDocument {
    /**
     * Type of the result, must be *document*
     * @type {string}
     * @memberof InlineQueryResultCachedDocument
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultCachedDocument
     */
    'id': string;
    /**
     * Title for the result
     * @type {string}
     * @memberof InlineQueryResultCachedDocument
     */
    'title': string;
    /**
     * A valid file identifier for the file
     * @type {string}
     * @memberof InlineQueryResultCachedDocument
     */
    'document_file_id': string;
    /**
     * *Optional*. Short description of the result
     * @type {string}
     * @memberof InlineQueryResultCachedDocument
     */
    'description'?: string;
    /**
     * *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultCachedDocument
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultCachedDocument
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultCachedDocument
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultCachedDocument
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultCachedDocument
     */
    'input_message_content'?: InputMessageContent;
}
/**
 * Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with specified content instead of the animation.
 * @export
 * @interface InlineQueryResultCachedGif
 */
export interface InlineQueryResultCachedGif {
    /**
     * Type of the result, must be *gif*
     * @type {string}
     * @memberof InlineQueryResultCachedGif
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultCachedGif
     */
    'id': string;
    /**
     * A valid file identifier for the GIF file
     * @type {string}
     * @memberof InlineQueryResultCachedGif
     */
    'gif_file_id': string;
    /**
     * *Optional*. Title for the result
     * @type {string}
     * @memberof InlineQueryResultCachedGif
     */
    'title'?: string;
    /**
     * *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultCachedGif
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultCachedGif
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultCachedGif
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Pass *True*, if the caption must be shown above the message media
     * @type {boolean}
     * @memberof InlineQueryResultCachedGif
     */
    'show_caption_above_media'?: boolean;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultCachedGif
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultCachedGif
     */
    'input_message_content'?: InputMessageContent;
}
/**
 * Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the animation.
 * @export
 * @interface InlineQueryResultCachedMpeg4Gif
 */
export interface InlineQueryResultCachedMpeg4Gif {
    /**
     * Type of the result, must be *mpeg4\\_gif*
     * @type {string}
     * @memberof InlineQueryResultCachedMpeg4Gif
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultCachedMpeg4Gif
     */
    'id': string;
    /**
     * A valid file identifier for the MPEG4 file
     * @type {string}
     * @memberof InlineQueryResultCachedMpeg4Gif
     */
    'mpeg4_file_id': string;
    /**
     * *Optional*. Title for the result
     * @type {string}
     * @memberof InlineQueryResultCachedMpeg4Gif
     */
    'title'?: string;
    /**
     * *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultCachedMpeg4Gif
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultCachedMpeg4Gif
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultCachedMpeg4Gif
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Pass *True*, if the caption must be shown above the message media
     * @type {boolean}
     * @memberof InlineQueryResultCachedMpeg4Gif
     */
    'show_caption_above_media'?: boolean;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultCachedMpeg4Gif
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultCachedMpeg4Gif
     */
    'input_message_content'?: InputMessageContent;
}
/**
 * Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the photo.
 * @export
 * @interface InlineQueryResultCachedPhoto
 */
export interface InlineQueryResultCachedPhoto {
    /**
     * Type of the result, must be *photo*
     * @type {string}
     * @memberof InlineQueryResultCachedPhoto
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultCachedPhoto
     */
    'id': string;
    /**
     * A valid file identifier of the photo
     * @type {string}
     * @memberof InlineQueryResultCachedPhoto
     */
    'photo_file_id': string;
    /**
     * *Optional*. Title for the result
     * @type {string}
     * @memberof InlineQueryResultCachedPhoto
     */
    'title'?: string;
    /**
     * *Optional*. Short description of the result
     * @type {string}
     * @memberof InlineQueryResultCachedPhoto
     */
    'description'?: string;
    /**
     * *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultCachedPhoto
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultCachedPhoto
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultCachedPhoto
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Pass *True*, if the caption must be shown above the message media
     * @type {boolean}
     * @memberof InlineQueryResultCachedPhoto
     */
    'show_caption_above_media'?: boolean;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultCachedPhoto
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultCachedPhoto
     */
    'input_message_content'?: InputMessageContent;
}
/**
 * Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the sticker.
 * @export
 * @interface InlineQueryResultCachedSticker
 */
export interface InlineQueryResultCachedSticker {
    /**
     * Type of the result, must be *sticker*
     * @type {string}
     * @memberof InlineQueryResultCachedSticker
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultCachedSticker
     */
    'id': string;
    /**
     * A valid file identifier of the sticker
     * @type {string}
     * @memberof InlineQueryResultCachedSticker
     */
    'sticker_file_id': string;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultCachedSticker
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultCachedSticker
     */
    'input_message_content'?: InputMessageContent;
}
/**
 * Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the video.
 * @export
 * @interface InlineQueryResultCachedVideo
 */
export interface InlineQueryResultCachedVideo {
    /**
     * Type of the result, must be *video*
     * @type {string}
     * @memberof InlineQueryResultCachedVideo
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultCachedVideo
     */
    'id': string;
    /**
     * A valid file identifier for the video file
     * @type {string}
     * @memberof InlineQueryResultCachedVideo
     */
    'video_file_id': string;
    /**
     * Title for the result
     * @type {string}
     * @memberof InlineQueryResultCachedVideo
     */
    'title': string;
    /**
     * *Optional*. Short description of the result
     * @type {string}
     * @memberof InlineQueryResultCachedVideo
     */
    'description'?: string;
    /**
     * *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultCachedVideo
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultCachedVideo
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultCachedVideo
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Pass *True*, if the caption must be shown above the message media
     * @type {boolean}
     * @memberof InlineQueryResultCachedVideo
     */
    'show_caption_above_media'?: boolean;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultCachedVideo
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultCachedVideo
     */
    'input_message_content'?: InputMessageContent;
}
/**
 * Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the voice message.
 * @export
 * @interface InlineQueryResultCachedVoice
 */
export interface InlineQueryResultCachedVoice {
    /**
     * Type of the result, must be *voice*
     * @type {string}
     * @memberof InlineQueryResultCachedVoice
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultCachedVoice
     */
    'id': string;
    /**
     * A valid file identifier for the voice message
     * @type {string}
     * @memberof InlineQueryResultCachedVoice
     */
    'voice_file_id': string;
    /**
     * Voice message title
     * @type {string}
     * @memberof InlineQueryResultCachedVoice
     */
    'title': string;
    /**
     * *Optional*. Caption, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultCachedVoice
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultCachedVoice
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultCachedVoice
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultCachedVoice
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultCachedVoice
     */
    'input_message_content'?: InputMessageContent;
}
/**
 * Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the contact.
 * @export
 * @interface InlineQueryResultContact
 */
export interface InlineQueryResultContact {
    /**
     * Type of the result, must be *contact*
     * @type {string}
     * @memberof InlineQueryResultContact
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 Bytes
     * @type {string}
     * @memberof InlineQueryResultContact
     */
    'id': string;
    /**
     * Contact\'s phone number
     * @type {string}
     * @memberof InlineQueryResultContact
     */
    'phone_number': string;
    /**
     * Contact\'s first name
     * @type {string}
     * @memberof InlineQueryResultContact
     */
    'first_name': string;
    /**
     * *Optional*. Contact\'s last name
     * @type {string}
     * @memberof InlineQueryResultContact
     */
    'last_name'?: string;
    /**
     * *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
     * @type {string}
     * @memberof InlineQueryResultContact
     */
    'vcard'?: string;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultContact
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultContact
     */
    'input_message_content'?: InputMessageContent;
    /**
     * *Optional*. Url of the thumbnail for the result
     * @type {string}
     * @memberof InlineQueryResultContact
     */
    'thumbnail_url'?: string;
    /**
     * *Optional*. Thumbnail width
     * @type {number}
     * @memberof InlineQueryResultContact
     */
    'thumbnail_width'?: number;
    /**
     * *Optional*. Thumbnail height
     * @type {number}
     * @memberof InlineQueryResultContact
     */
    'thumbnail_height'?: number;
}
/**
 * Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this method.
 * @export
 * @interface InlineQueryResultDocument
 */
export interface InlineQueryResultDocument {
    /**
     * Type of the result, must be *document*
     * @type {string}
     * @memberof InlineQueryResultDocument
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultDocument
     */
    'id': string;
    /**
     * Title for the result
     * @type {string}
     * @memberof InlineQueryResultDocument
     */
    'title': string;
    /**
     * A valid URL for the file
     * @type {string}
     * @memberof InlineQueryResultDocument
     */
    'document_url': string;
    /**
     * MIME type of the content of the file, either “application/pdf” or “application/zip”
     * @type {string}
     * @memberof InlineQueryResultDocument
     */
    'mime_type': InlineQueryResultDocumentMimeTypeEnum;
    /**
     * *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultDocument
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultDocument
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultDocument
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Short description of the result
     * @type {string}
     * @memberof InlineQueryResultDocument
     */
    'description'?: string;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultDocument
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultDocument
     */
    'input_message_content'?: InputMessageContent;
    /**
     * *Optional*. URL of the thumbnail (JPEG only) for the file
     * @type {string}
     * @memberof InlineQueryResultDocument
     */
    'thumbnail_url'?: string;
    /**
     * *Optional*. Thumbnail width
     * @type {number}
     * @memberof InlineQueryResultDocument
     */
    'thumbnail_width'?: number;
    /**
     * *Optional*. Thumbnail height
     * @type {number}
     * @memberof InlineQueryResultDocument
     */
    'thumbnail_height'?: number;
}

export const InlineQueryResultDocumentMimeTypeEnum = {
    ApplicationPdf: 'application/pdf',
    ApplicationZip: 'application/zip'
} as const;

export type InlineQueryResultDocumentMimeTypeEnum = typeof InlineQueryResultDocumentMimeTypeEnum[keyof typeof InlineQueryResultDocumentMimeTypeEnum];

/**
 * Represents a [Game](https://core.telegram.org/bots/api/#games).
 * @export
 * @interface InlineQueryResultGame
 */
export interface InlineQueryResultGame {
    /**
     * Type of the result, must be *game*
     * @type {string}
     * @memberof InlineQueryResultGame
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultGame
     */
    'id': string;
    /**
     * Short name of the game
     * @type {string}
     * @memberof InlineQueryResultGame
     */
    'game_short_name': string;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultGame
     */
    'reply_markup'?: InlineKeyboardMarkup;
}
/**
 * Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the animation.
 * @export
 * @interface InlineQueryResultGif
 */
export interface InlineQueryResultGif {
    /**
     * Type of the result, must be *gif*
     * @type {string}
     * @memberof InlineQueryResultGif
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultGif
     */
    'id': string;
    /**
     * A valid URL for the GIF file
     * @type {string}
     * @memberof InlineQueryResultGif
     */
    'gif_url': string;
    /**
     * URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
     * @type {string}
     * @memberof InlineQueryResultGif
     */
    'thumbnail_url': string;
    /**
     * *Optional*. Width of the GIF
     * @type {number}
     * @memberof InlineQueryResultGif
     */
    'gif_width'?: number;
    /**
     * *Optional*. Height of the GIF
     * @type {number}
     * @memberof InlineQueryResultGif
     */
    'gif_height'?: number;
    /**
     * *Optional*. Duration of the GIF in seconds
     * @type {number}
     * @memberof InlineQueryResultGif
     */
    'gif_duration'?: number;
    /**
     * *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
     * @type {string}
     * @memberof InlineQueryResultGif
     */
    'thumbnail_mime_type'?: InlineQueryResultGifThumbnailMimeTypeEnum;
    /**
     * *Optional*. Title for the result
     * @type {string}
     * @memberof InlineQueryResultGif
     */
    'title'?: string;
    /**
     * *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultGif
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultGif
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultGif
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Pass *True*, if the caption must be shown above the message media
     * @type {boolean}
     * @memberof InlineQueryResultGif
     */
    'show_caption_above_media'?: boolean;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultGif
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultGif
     */
    'input_message_content'?: InputMessageContent;
}

export const InlineQueryResultGifThumbnailMimeTypeEnum = {
    ImageJpeg: 'image/jpeg',
    ImageGif: 'image/gif',
    VideoMp4: 'video/mp4'
} as const;

export type InlineQueryResultGifThumbnailMimeTypeEnum = typeof InlineQueryResultGifThumbnailMimeTypeEnum[keyof typeof InlineQueryResultGifThumbnailMimeTypeEnum];

/**
 * Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the location.
 * @export
 * @interface InlineQueryResultLocation
 */
export interface InlineQueryResultLocation {
    /**
     * Type of the result, must be *location*
     * @type {string}
     * @memberof InlineQueryResultLocation
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 Bytes
     * @type {string}
     * @memberof InlineQueryResultLocation
     */
    'id': string;
    /**
     * Location latitude in degrees
     * @type {number}
     * @memberof InlineQueryResultLocation
     */
    'latitude': number;
    /**
     * Location longitude in degrees
     * @type {number}
     * @memberof InlineQueryResultLocation
     */
    'longitude': number;
    /**
     * Location title
     * @type {string}
     * @memberof InlineQueryResultLocation
     */
    'title': string;
    /**
     * *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
     * @type {number}
     * @memberof InlineQueryResultLocation
     */
    'horizontal_accuracy'?: number;
    /**
     * *Optional*. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.
     * @type {number}
     * @memberof InlineQueryResultLocation
     */
    'live_period'?: number;
    /**
     * *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
     * @type {number}
     * @memberof InlineQueryResultLocation
     */
    'heading'?: number;
    /**
     * *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
     * @type {number}
     * @memberof InlineQueryResultLocation
     */
    'proximity_alert_radius'?: number;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultLocation
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultLocation
     */
    'input_message_content'?: InputMessageContent;
    /**
     * *Optional*. Url of the thumbnail for the result
     * @type {string}
     * @memberof InlineQueryResultLocation
     */
    'thumbnail_url'?: string;
    /**
     * *Optional*. Thumbnail width
     * @type {number}
     * @memberof InlineQueryResultLocation
     */
    'thumbnail_width'?: number;
    /**
     * *Optional*. Thumbnail height
     * @type {number}
     * @memberof InlineQueryResultLocation
     */
    'thumbnail_height'?: number;
}
/**
 * Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the animation.
 * @export
 * @interface InlineQueryResultMpeg4Gif
 */
export interface InlineQueryResultMpeg4Gif {
    /**
     * Type of the result, must be *mpeg4\\_gif*
     * @type {string}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'id': string;
    /**
     * A valid URL for the MPEG4 file
     * @type {string}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'mpeg4_url': string;
    /**
     * URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
     * @type {string}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'thumbnail_url': string;
    /**
     * *Optional*. Video width
     * @type {number}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'mpeg4_width'?: number;
    /**
     * *Optional*. Video height
     * @type {number}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'mpeg4_height'?: number;
    /**
     * *Optional*. Video duration in seconds
     * @type {number}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'mpeg4_duration'?: number;
    /**
     * *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
     * @type {string}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'thumbnail_mime_type'?: InlineQueryResultMpeg4GifThumbnailMimeTypeEnum;
    /**
     * *Optional*. Title for the result
     * @type {string}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'title'?: string;
    /**
     * *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Pass *True*, if the caption must be shown above the message media
     * @type {boolean}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'show_caption_above_media'?: boolean;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultMpeg4Gif
     */
    'input_message_content'?: InputMessageContent;
}

export const InlineQueryResultMpeg4GifThumbnailMimeTypeEnum = {
    ImageJpeg: 'image/jpeg',
    ImageGif: 'image/gif',
    VideoMp4: 'video/mp4'
} as const;

export type InlineQueryResultMpeg4GifThumbnailMimeTypeEnum = typeof InlineQueryResultMpeg4GifThumbnailMimeTypeEnum[keyof typeof InlineQueryResultMpeg4GifThumbnailMimeTypeEnum];

/**
 * Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the photo.
 * @export
 * @interface InlineQueryResultPhoto
 */
export interface InlineQueryResultPhoto {
    /**
     * Type of the result, must be *photo*
     * @type {string}
     * @memberof InlineQueryResultPhoto
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultPhoto
     */
    'id': string;
    /**
     * A valid URL of the photo. Photo must be in **JPEG** format. Photo size must not exceed 5MB
     * @type {string}
     * @memberof InlineQueryResultPhoto
     */
    'photo_url': string;
    /**
     * URL of the thumbnail for the photo
     * @type {string}
     * @memberof InlineQueryResultPhoto
     */
    'thumbnail_url': string;
    /**
     * *Optional*. Width of the photo
     * @type {number}
     * @memberof InlineQueryResultPhoto
     */
    'photo_width'?: number;
    /**
     * *Optional*. Height of the photo
     * @type {number}
     * @memberof InlineQueryResultPhoto
     */
    'photo_height'?: number;
    /**
     * *Optional*. Title for the result
     * @type {string}
     * @memberof InlineQueryResultPhoto
     */
    'title'?: string;
    /**
     * *Optional*. Short description of the result
     * @type {string}
     * @memberof InlineQueryResultPhoto
     */
    'description'?: string;
    /**
     * *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultPhoto
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultPhoto
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultPhoto
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Pass *True*, if the caption must be shown above the message media
     * @type {boolean}
     * @memberof InlineQueryResultPhoto
     */
    'show_caption_above_media'?: boolean;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultPhoto
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultPhoto
     */
    'input_message_content'?: InputMessageContent;
}
/**
 * Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the venue.
 * @export
 * @interface InlineQueryResultVenue
 */
export interface InlineQueryResultVenue {
    /**
     * Type of the result, must be *venue*
     * @type {string}
     * @memberof InlineQueryResultVenue
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 Bytes
     * @type {string}
     * @memberof InlineQueryResultVenue
     */
    'id': string;
    /**
     * Latitude of the venue location in degrees
     * @type {number}
     * @memberof InlineQueryResultVenue
     */
    'latitude': number;
    /**
     * Longitude of the venue location in degrees
     * @type {number}
     * @memberof InlineQueryResultVenue
     */
    'longitude': number;
    /**
     * Title of the venue
     * @type {string}
     * @memberof InlineQueryResultVenue
     */
    'title': string;
    /**
     * Address of the venue
     * @type {string}
     * @memberof InlineQueryResultVenue
     */
    'address': string;
    /**
     * *Optional*. Foursquare identifier of the venue if known
     * @type {string}
     * @memberof InlineQueryResultVenue
     */
    'foursquare_id'?: string;
    /**
     * *Optional*. Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)
     * @type {string}
     * @memberof InlineQueryResultVenue
     */
    'foursquare_type'?: string;
    /**
     * *Optional*. Google Places identifier of the venue
     * @type {string}
     * @memberof InlineQueryResultVenue
     */
    'google_place_id'?: string;
    /**
     * *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
     * @type {string}
     * @memberof InlineQueryResultVenue
     */
    'google_place_type'?: string;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultVenue
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultVenue
     */
    'input_message_content'?: InputMessageContent;
    /**
     * *Optional*. Url of the thumbnail for the result
     * @type {string}
     * @memberof InlineQueryResultVenue
     */
    'thumbnail_url'?: string;
    /**
     * *Optional*. Thumbnail width
     * @type {number}
     * @memberof InlineQueryResultVenue
     */
    'thumbnail_width'?: number;
    /**
     * *Optional*. Thumbnail height
     * @type {number}
     * @memberof InlineQueryResultVenue
     */
    'thumbnail_height'?: number;
}
/**
 * Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the video.  If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you **must** replace its content using *input\\_message\\_content*.
 * @export
 * @interface InlineQueryResultVideo
 */
export interface InlineQueryResultVideo {
    /**
     * Type of the result, must be *video*
     * @type {string}
     * @memberof InlineQueryResultVideo
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultVideo
     */
    'id': string;
    /**
     * A valid URL for the embedded video player or video file
     * @type {string}
     * @memberof InlineQueryResultVideo
     */
    'video_url': string;
    /**
     * MIME type of the content of the video URL, “text/html” or “video/mp4”
     * @type {string}
     * @memberof InlineQueryResultVideo
     */
    'mime_type': InlineQueryResultVideoMimeTypeEnum;
    /**
     * URL of the thumbnail (JPEG only) for the video
     * @type {string}
     * @memberof InlineQueryResultVideo
     */
    'thumbnail_url': string;
    /**
     * Title for the result
     * @type {string}
     * @memberof InlineQueryResultVideo
     */
    'title': string;
    /**
     * *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultVideo
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultVideo
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultVideo
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Pass *True*, if the caption must be shown above the message media
     * @type {boolean}
     * @memberof InlineQueryResultVideo
     */
    'show_caption_above_media'?: boolean;
    /**
     * *Optional*. Video width
     * @type {number}
     * @memberof InlineQueryResultVideo
     */
    'video_width'?: number;
    /**
     * *Optional*. Video height
     * @type {number}
     * @memberof InlineQueryResultVideo
     */
    'video_height'?: number;
    /**
     * *Optional*. Video duration in seconds
     * @type {number}
     * @memberof InlineQueryResultVideo
     */
    'video_duration'?: number;
    /**
     * *Optional*. Short description of the result
     * @type {string}
     * @memberof InlineQueryResultVideo
     */
    'description'?: string;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultVideo
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultVideo
     */
    'input_message_content'?: InputMessageContent;
}

export const InlineQueryResultVideoMimeTypeEnum = {
    TextHtml: 'text/html',
    VideoMp4: 'video/mp4'
} as const;

export type InlineQueryResultVideoMimeTypeEnum = typeof InlineQueryResultVideoMimeTypeEnum[keyof typeof InlineQueryResultVideoMimeTypeEnum];

/**
 * Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the the voice message.
 * @export
 * @interface InlineQueryResultVoice
 */
export interface InlineQueryResultVoice {
    /**
     * Type of the result, must be *voice*
     * @type {string}
     * @memberof InlineQueryResultVoice
     */
    'type': string;
    /**
     * Unique identifier for this result, 1-64 bytes
     * @type {string}
     * @memberof InlineQueryResultVoice
     */
    'id': string;
    /**
     * A valid URL for the voice recording
     * @type {string}
     * @memberof InlineQueryResultVoice
     */
    'voice_url': string;
    /**
     * Recording title
     * @type {string}
     * @memberof InlineQueryResultVoice
     */
    'title': string;
    /**
     * *Optional*. Caption, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InlineQueryResultVoice
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InlineQueryResultVoice
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InlineQueryResultVoice
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Recording duration in seconds
     * @type {number}
     * @memberof InlineQueryResultVoice
     */
    'voice_duration'?: number;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof InlineQueryResultVoice
     */
    'reply_markup'?: InlineKeyboardMarkup;
    /**
     * 
     * @type {InputMessageContent}
     * @memberof InlineQueryResultVoice
     */
    'input_message_content'?: InputMessageContent;
}
/**
 * This object represents a button to be shown above inline query results. You **must** use exactly one of the optional fields.
 * @export
 * @interface InlineQueryResultsButton
 */
export interface InlineQueryResultsButton {
    /**
     * Label text on the button
     * @type {string}
     * @memberof InlineQueryResultsButton
     */
    'text': string;
    /**
     * 
     * @type {WebAppInfo}
     * @memberof InlineQueryResultsButton
     */
    'web_app'?: WebAppInfo;
    /**
     * *Optional*. [Deep-linking](https://core.telegram.org/bots/features#deep-linking) parameter for the /start message sent to the bot when a user presses the button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.    *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a \'Connect your YouTube account\' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a [*switch\\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot\'s inline capabilities.
     * @type {string}
     * @memberof InlineQueryResultsButton
     */
    'start_parameter'?: string;
}
/**
 * Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a contact message to be sent as the result of an inline query.
 * @export
 * @interface InputContactMessageContent
 */
export interface InputContactMessageContent {
    /**
     * Contact\'s phone number
     * @type {string}
     * @memberof InputContactMessageContent
     */
    'phone_number': string;
    /**
     * Contact\'s first name
     * @type {string}
     * @memberof InputContactMessageContent
     */
    'first_name': string;
    /**
     * *Optional*. Contact\'s last name
     * @type {string}
     * @memberof InputContactMessageContent
     */
    'last_name'?: string;
    /**
     * *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
     * @type {string}
     * @memberof InputContactMessageContent
     */
    'vcard'?: string;
}
/**
 * Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of an invoice message to be sent as the result of an inline query.
 * @export
 * @interface InputInvoiceMessageContent
 */
export interface InputInvoiceMessageContent {
    /**
     * Product name, 1-32 characters
     * @type {string}
     * @memberof InputInvoiceMessageContent
     */
    'title': string;
    /**
     * Product description, 1-255 characters
     * @type {string}
     * @memberof InputInvoiceMessageContent
     */
    'description': string;
    /**
     * Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.
     * @type {string}
     * @memberof InputInvoiceMessageContent
     */
    'payload': string;
    /**
     * Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies). Pass “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {string}
     * @memberof InputInvoiceMessageContent
     */
    'currency': string;
    /**
     * Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {Array<LabeledPrice>}
     * @memberof InputInvoiceMessageContent
     */
    'prices': Array<LabeledPrice>;
    /**
     * *Optional*. Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an empty string for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {string}
     * @memberof InputInvoiceMessageContent
     */
    'provider_token'?: string;
    /**
     * *Optional*. The maximum accepted amount for tips in the *smallest units* of the currency (integer, **not** float/double). For example, for a maximum tip of `US$ 1.45` pass `max_tip_amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {number}
     * @memberof InputInvoiceMessageContent
     */
    'max_tip_amount'?: number;
    /**
     * *Optional*. A JSON-serialized array of suggested amounts of tip in the *smallest units* of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed *max\\_tip\\_amount*.
     * @type {Array<number>}
     * @memberof InputInvoiceMessageContent
     */
    'suggested_tip_amounts'?: Array<number>;
    /**
     * *Optional*. A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider.
     * @type {string}
     * @memberof InputInvoiceMessageContent
     */
    'provider_data'?: string;
    /**
     * *Optional*. URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
     * @type {string}
     * @memberof InputInvoiceMessageContent
     */
    'photo_url'?: string;
    /**
     * *Optional*. Photo size in bytes
     * @type {number}
     * @memberof InputInvoiceMessageContent
     */
    'photo_size'?: number;
    /**
     * *Optional*. Photo width
     * @type {number}
     * @memberof InputInvoiceMessageContent
     */
    'photo_width'?: number;
    /**
     * *Optional*. Photo height
     * @type {number}
     * @memberof InputInvoiceMessageContent
     */
    'photo_height'?: number;
    /**
     * *Optional*. Pass *True* if you require the user\'s full name to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof InputInvoiceMessageContent
     */
    'need_name'?: boolean;
    /**
     * *Optional*. Pass *True* if you require the user\'s phone number to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof InputInvoiceMessageContent
     */
    'need_phone_number'?: boolean;
    /**
     * *Optional*. Pass *True* if you require the user\'s email address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof InputInvoiceMessageContent
     */
    'need_email'?: boolean;
    /**
     * *Optional*. Pass *True* if you require the user\'s shipping address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof InputInvoiceMessageContent
     */
    'need_shipping_address'?: boolean;
    /**
     * *Optional*. Pass *True* if the user\'s phone number should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof InputInvoiceMessageContent
     */
    'send_phone_number_to_provider'?: boolean;
    /**
     * *Optional*. Pass *True* if the user\'s email address should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof InputInvoiceMessageContent
     */
    'send_email_to_provider'?: boolean;
    /**
     * *Optional*. Pass *True* if the final price depends on the shipping method. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof InputInvoiceMessageContent
     */
    'is_flexible'?: boolean;
}
/**
 * Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a location message to be sent as the result of an inline query.
 * @export
 * @interface InputLocationMessageContent
 */
export interface InputLocationMessageContent {
    /**
     * Latitude of the location in degrees
     * @type {number}
     * @memberof InputLocationMessageContent
     */
    'latitude': number;
    /**
     * Longitude of the location in degrees
     * @type {number}
     * @memberof InputLocationMessageContent
     */
    'longitude': number;
    /**
     * *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
     * @type {number}
     * @memberof InputLocationMessageContent
     */
    'horizontal_accuracy'?: number;
    /**
     * *Optional*. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.
     * @type {number}
     * @memberof InputLocationMessageContent
     */
    'live_period'?: number;
    /**
     * *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
     * @type {number}
     * @memberof InputLocationMessageContent
     */
    'heading'?: number;
    /**
     * *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
     * @type {number}
     * @memberof InputLocationMessageContent
     */
    'proximity_alert_radius'?: number;
}
/**
 * @type InputMedia
 * This object represents the content of a media message to be sent. It should be one of  * [InputMediaAnimation](https://core.telegram.org/bots/api/#inputmediaanimation) * [InputMediaDocument](https://core.telegram.org/bots/api/#inputmediadocument) * [InputMediaAudio](https://core.telegram.org/bots/api/#inputmediaaudio) * [InputMediaPhoto](https://core.telegram.org/bots/api/#inputmediaphoto) * [InputMediaVideo](https://core.telegram.org/bots/api/#inputmediavideo)
 * @export
 */
export type InputMedia = InputMediaAnimation | InputMediaAudio | InputMediaDocument | InputMediaPhoto | InputMediaVideo;

/**
 * Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
 * @export
 * @interface InputMediaAnimation
 */
export interface InputMediaAnimation {
    /**
     * Type of the result, must be *animation*
     * @type {string}
     * @memberof InputMediaAnimation
     */
    'type': string;
    /**
     * File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\\<file\\_attach\\_name\\>” to upload a new one using multipart/form-data under \\<file\\_attach\\_name\\> name. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputMediaAnimation
     */
    'media': string;
    /**
     * *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail\'s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can\'t be reused and can be only uploaded as a new file, so you can pass “attach://\\<file\\_attach\\_name\\>” if the thumbnail was uploaded using multipart/form-data under \\<file\\_attach\\_name\\>. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputMediaAnimation
     */
    'thumbnail'?: string;
    /**
     * *Optional*. Caption of the animation to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InputMediaAnimation
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InputMediaAnimation
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InputMediaAnimation
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Pass *True*, if the caption must be shown above the message media
     * @type {boolean}
     * @memberof InputMediaAnimation
     */
    'show_caption_above_media'?: boolean;
    /**
     * *Optional*. Animation width
     * @type {number}
     * @memberof InputMediaAnimation
     */
    'width'?: number;
    /**
     * *Optional*. Animation height
     * @type {number}
     * @memberof InputMediaAnimation
     */
    'height'?: number;
    /**
     * *Optional*. Animation duration in seconds
     * @type {number}
     * @memberof InputMediaAnimation
     */
    'duration'?: number;
    /**
     * *Optional*. Pass *True* if the animation needs to be covered with a spoiler animation
     * @type {boolean}
     * @memberof InputMediaAnimation
     */
    'has_spoiler'?: boolean;
}
/**
 * Represents an audio file to be treated as music to be sent.
 * @export
 * @interface InputMediaAudio
 */
export interface InputMediaAudio {
    /**
     * Type of the result, must be *audio*
     * @type {string}
     * @memberof InputMediaAudio
     */
    'type': string;
    /**
     * File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\\<file\\_attach\\_name\\>” to upload a new one using multipart/form-data under \\<file\\_attach\\_name\\> name. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputMediaAudio
     */
    'media': string;
    /**
     * *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail\'s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can\'t be reused and can be only uploaded as a new file, so you can pass “attach://\\<file\\_attach\\_name\\>” if the thumbnail was uploaded using multipart/form-data under \\<file\\_attach\\_name\\>. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputMediaAudio
     */
    'thumbnail'?: string;
    /**
     * *Optional*. Caption of the audio to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InputMediaAudio
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InputMediaAudio
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InputMediaAudio
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Duration of the audio in seconds
     * @type {number}
     * @memberof InputMediaAudio
     */
    'duration'?: number;
    /**
     * *Optional*. Performer of the audio
     * @type {string}
     * @memberof InputMediaAudio
     */
    'performer'?: string;
    /**
     * *Optional*. Title of the audio
     * @type {string}
     * @memberof InputMediaAudio
     */
    'title'?: string;
}
/**
 * Represents a general file to be sent.
 * @export
 * @interface InputMediaDocument
 */
export interface InputMediaDocument {
    /**
     * Type of the result, must be *document*
     * @type {string}
     * @memberof InputMediaDocument
     */
    'type': string;
    /**
     * File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\\<file\\_attach\\_name\\>” to upload a new one using multipart/form-data under \\<file\\_attach\\_name\\> name. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputMediaDocument
     */
    'media': string;
    /**
     * *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail\'s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can\'t be reused and can be only uploaded as a new file, so you can pass “attach://\\<file\\_attach\\_name\\>” if the thumbnail was uploaded using multipart/form-data under \\<file\\_attach\\_name\\>. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputMediaDocument
     */
    'thumbnail'?: string;
    /**
     * *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InputMediaDocument
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InputMediaDocument
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InputMediaDocument
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always *True*, if the document is sent as part of an album.
     * @type {boolean}
     * @memberof InputMediaDocument
     */
    'disable_content_type_detection'?: boolean;
}
/**
 * Represents a photo to be sent.
 * @export
 * @interface InputMediaPhoto
 */
export interface InputMediaPhoto {
    /**
     * Type of the result, must be *photo*
     * @type {string}
     * @memberof InputMediaPhoto
     */
    'type': string;
    /**
     * File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\\<file\\_attach\\_name\\>” to upload a new one using multipart/form-data under \\<file\\_attach\\_name\\> name. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputMediaPhoto
     */
    'media': string;
    /**
     * *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InputMediaPhoto
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InputMediaPhoto
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InputMediaPhoto
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Pass *True*, if the caption must be shown above the message media
     * @type {boolean}
     * @memberof InputMediaPhoto
     */
    'show_caption_above_media'?: boolean;
    /**
     * *Optional*. Pass *True* if the photo needs to be covered with a spoiler animation
     * @type {boolean}
     * @memberof InputMediaPhoto
     */
    'has_spoiler'?: boolean;
}
/**
 * Represents a video to be sent.
 * @export
 * @interface InputMediaVideo
 */
export interface InputMediaVideo {
    /**
     * Type of the result, must be *video*
     * @type {string}
     * @memberof InputMediaVideo
     */
    'type': string;
    /**
     * File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\\<file\\_attach\\_name\\>” to upload a new one using multipart/form-data under \\<file\\_attach\\_name\\> name. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputMediaVideo
     */
    'media': string;
    /**
     * *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail\'s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can\'t be reused and can be only uploaded as a new file, so you can pass “attach://\\<file\\_attach\\_name\\>” if the thumbnail was uploaded using multipart/form-data under \\<file\\_attach\\_name\\>. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputMediaVideo
     */
    'thumbnail'?: string;
    /**
     * *Optional*. Cover for the video in the message. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\\<file\\_attach\\_name\\>” to upload a new one using multipart/form-data under \\<file\\_attach\\_name\\> name. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputMediaVideo
     */
    'cover'?: string;
    /**
     * *Optional*. Start timestamp for the video in the message
     * @type {number}
     * @memberof InputMediaVideo
     */
    'start_timestamp'?: number;
    /**
     * *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
     * @type {string}
     * @memberof InputMediaVideo
     */
    'caption'?: string;
    /**
     * *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InputMediaVideo
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InputMediaVideo
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Pass *True*, if the caption must be shown above the message media
     * @type {boolean}
     * @memberof InputMediaVideo
     */
    'show_caption_above_media'?: boolean;
    /**
     * *Optional*. Video width
     * @type {number}
     * @memberof InputMediaVideo
     */
    'width'?: number;
    /**
     * *Optional*. Video height
     * @type {number}
     * @memberof InputMediaVideo
     */
    'height'?: number;
    /**
     * *Optional*. Video duration in seconds
     * @type {number}
     * @memberof InputMediaVideo
     */
    'duration'?: number;
    /**
     * *Optional*. Pass *True* if the uploaded video is suitable for streaming
     * @type {boolean}
     * @memberof InputMediaVideo
     */
    'supports_streaming'?: boolean;
    /**
     * *Optional*. Pass *True* if the video needs to be covered with a spoiler animation
     * @type {boolean}
     * @memberof InputMediaVideo
     */
    'has_spoiler'?: boolean;
}
/**
 * @type InputMessageContent
 * This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 5 types:  * [InputTextMessageContent](https://core.telegram.org/bots/api/#inputtextmessagecontent) * [InputLocationMessageContent](https://core.telegram.org/bots/api/#inputlocationmessagecontent) * [InputVenueMessageContent](https://core.telegram.org/bots/api/#inputvenuemessagecontent) * [InputContactMessageContent](https://core.telegram.org/bots/api/#inputcontactmessagecontent) * [InputInvoiceMessageContent](https://core.telegram.org/bots/api/#inputinvoicemessagecontent)
 * @export
 */
export type InputMessageContent = InputContactMessageContent | InputInvoiceMessageContent | InputLocationMessageContent | InputTextMessageContent | InputVenueMessageContent;

/**
 * @type InputPaidMedia
 * This object describes the paid media to be sent. Currently, it can be one of  * [InputPaidMediaPhoto](https://core.telegram.org/bots/api/#inputpaidmediaphoto) * [InputPaidMediaVideo](https://core.telegram.org/bots/api/#inputpaidmediavideo)
 * @export
 */
export type InputPaidMedia = InputPaidMediaPhoto | InputPaidMediaVideo;

/**
 * The paid media to send is a photo.
 * @export
 * @interface InputPaidMediaPhoto
 */
export interface InputPaidMediaPhoto {
    /**
     * Type of the media, must be *photo*
     * @type {string}
     * @memberof InputPaidMediaPhoto
     */
    'type': string;
    /**
     * File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\\<file\\_attach\\_name\\>” to upload a new one using multipart/form-data under \\<file\\_attach\\_name\\> name. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputPaidMediaPhoto
     */
    'media': string;
}
/**
 * The paid media to send is a video.
 * @export
 * @interface InputPaidMediaVideo
 */
export interface InputPaidMediaVideo {
    /**
     * Type of the media, must be *video*
     * @type {string}
     * @memberof InputPaidMediaVideo
     */
    'type': string;
    /**
     * File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\\<file\\_attach\\_name\\>” to upload a new one using multipart/form-data under \\<file\\_attach\\_name\\> name. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputPaidMediaVideo
     */
    'media': string;
    /**
     * *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail\'s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can\'t be reused and can be only uploaded as a new file, so you can pass “attach://\\<file\\_attach\\_name\\>” if the thumbnail was uploaded using multipart/form-data under \\<file\\_attach\\_name\\>. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputPaidMediaVideo
     */
    'thumbnail'?: string;
    /**
     * *Optional*. Cover for the video in the message. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\\<file\\_attach\\_name\\>” to upload a new one using multipart/form-data under \\<file\\_attach\\_name\\> name. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputPaidMediaVideo
     */
    'cover'?: string;
    /**
     * *Optional*. Start timestamp for the video in the message
     * @type {number}
     * @memberof InputPaidMediaVideo
     */
    'start_timestamp'?: number;
    /**
     * *Optional*. Video width
     * @type {number}
     * @memberof InputPaidMediaVideo
     */
    'width'?: number;
    /**
     * *Optional*. Video height
     * @type {number}
     * @memberof InputPaidMediaVideo
     */
    'height'?: number;
    /**
     * *Optional*. Video duration in seconds
     * @type {number}
     * @memberof InputPaidMediaVideo
     */
    'duration'?: number;
    /**
     * *Optional*. Pass *True* if the uploaded video is suitable for streaming
     * @type {boolean}
     * @memberof InputPaidMediaVideo
     */
    'supports_streaming'?: boolean;
}
/**
 * This object contains information about one answer option in a poll to be sent.
 * @export
 * @interface InputPollOption
 */
export interface InputPollOption {
    /**
     * Option text, 1-100 characters
     * @type {string}
     * @memberof InputPollOption
     */
    'text': string;
    /**
     * *Optional*. Mode for parsing entities in the text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Currently, only custom emoji entities are allowed
     * @type {string}
     * @memberof InputPollOption
     */
    'text_parse_mode'?: string;
    /**
     * *Optional*. A JSON-serialized list of special entities that appear in the poll option text. It can be specified instead of *text\\_parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InputPollOption
     */
    'text_entities'?: Array<MessageEntity>;
}
/**
 * @type InputProfilePhoto
 * This object describes a profile photo to set. Currently, it can be one of  * [InputProfilePhotoStatic](https://core.telegram.org/bots/api/#inputprofilephotostatic) * [InputProfilePhotoAnimated](https://core.telegram.org/bots/api/#inputprofilephotoanimated)
 * @export
 */
export type InputProfilePhoto = InputProfilePhotoAnimated | InputProfilePhotoStatic;

/**
 * An animated profile photo in the MPEG4 format.
 * @export
 * @interface InputProfilePhotoAnimated
 */
export interface InputProfilePhotoAnimated {
    /**
     * Type of the profile photo, must be *animated*
     * @type {string}
     * @memberof InputProfilePhotoAnimated
     */
    'type': string;
    /**
     * The animated profile photo. Profile photos can\'t be reused and can only be uploaded as a new file, so you can pass “attach://\\<file\\_attach\\_name\\>” if the photo was uploaded using multipart/form-data under \\<file\\_attach\\_name\\>. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputProfilePhotoAnimated
     */
    'animation': string;
    /**
     * *Optional*. Timestamp in seconds of the frame that will be used as the static profile photo. Defaults to 0.0.
     * @type {number}
     * @memberof InputProfilePhotoAnimated
     */
    'main_frame_timestamp'?: number;
}
/**
 * A static profile photo in the .JPG format.
 * @export
 * @interface InputProfilePhotoStatic
 */
export interface InputProfilePhotoStatic {
    /**
     * Type of the profile photo, must be *static*
     * @type {string}
     * @memberof InputProfilePhotoStatic
     */
    'type': string;
    /**
     * The static profile photo. Profile photos can\'t be reused and can only be uploaded as a new file, so you can pass “attach://\\<file\\_attach\\_name\\>” if the photo was uploaded using multipart/form-data under \\<file\\_attach\\_name\\>. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputProfilePhotoStatic
     */
    'photo': string;
}
/**
 * This object describes a sticker to be added to a sticker set.
 * @export
 * @interface InputSticker
 */
export interface InputSticker {
    /**
     * The added sticker. Pass a *file\\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or pass “attach://\\<file\\_attach\\_name\\>” to upload a new file using multipart/form-data under \\<file\\_attach\\_name\\> name. Animated and video stickers can\'t be uploaded via HTTP URL. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputSticker
     */
    'sticker': string;
    /**
     * Format of the added sticker, must be one of “static” for a **.WEBP** or **.PNG** image, “animated” for a **.TGS** animation, “video” for a **.WEBM** video
     * @type {string}
     * @memberof InputSticker
     */
    'format': InputStickerFormatEnum;
    /**
     * List of 1-20 emoji associated with the sticker
     * @type {Array<string>}
     * @memberof InputSticker
     */
    'emoji_list': Array<string>;
    /**
     * 
     * @type {MaskPosition}
     * @memberof InputSticker
     */
    'mask_position'?: MaskPosition;
    /**
     * *Optional*. List of 0-20 search keywords for the sticker with total length of up to 64 characters. For “regular” and “custom\\_emoji” stickers only.
     * @type {Array<string>}
     * @memberof InputSticker
     */
    'keywords'?: Array<string>;
}

export const InputStickerFormatEnum = {
    Static: 'static',
    Animated: 'animated',
    Video: 'video'
} as const;

export type InputStickerFormatEnum = typeof InputStickerFormatEnum[keyof typeof InputStickerFormatEnum];

/**
 * @type InputStoryContent
 * This object describes the content of a story to post. Currently, it can be one of  * [InputStoryContentPhoto](https://core.telegram.org/bots/api/#inputstorycontentphoto) * [InputStoryContentVideo](https://core.telegram.org/bots/api/#inputstorycontentvideo)
 * @export
 */
export type InputStoryContent = InputStoryContentPhoto | InputStoryContentVideo;

/**
 * Describes a photo to post as a story.
 * @export
 * @interface InputStoryContentPhoto
 */
export interface InputStoryContentPhoto {
    /**
     * Type of the content, must be *photo*
     * @type {string}
     * @memberof InputStoryContentPhoto
     */
    'type': string;
    /**
     * The photo to post as a story. The photo must be of the size 1080x1920 and must not exceed 10 MB. The photo can\'t be reused and can only be uploaded as a new file, so you can pass “attach://\\<file\\_attach\\_name\\>” if the photo was uploaded using multipart/form-data under \\<file\\_attach\\_name\\>. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputStoryContentPhoto
     */
    'photo': string;
}
/**
 * Describes a video to post as a story.
 * @export
 * @interface InputStoryContentVideo
 */
export interface InputStoryContentVideo {
    /**
     * Type of the content, must be *video*
     * @type {string}
     * @memberof InputStoryContentVideo
     */
    'type': string;
    /**
     * The video to post as a story. The video must be of the size 720x1280, streamable, encoded with H.265 codec, with key frames added each second in the MPEG4 format, and must not exceed 30 MB. The video can\'t be reused and can only be uploaded as a new file, so you can pass “attach://\\<file\\_attach\\_name\\>” if the video was uploaded using multipart/form-data under \\<file\\_attach\\_name\\>. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     * @type {string}
     * @memberof InputStoryContentVideo
     */
    'video': string;
    /**
     * *Optional*. Precise duration of the video in seconds; 0-60
     * @type {number}
     * @memberof InputStoryContentVideo
     */
    'duration'?: number;
    /**
     * *Optional*. Timestamp in seconds of the frame that will be used as the static cover for the story. Defaults to 0.0.
     * @type {number}
     * @memberof InputStoryContentVideo
     */
    'cover_frame_timestamp'?: number;
    /**
     * *Optional*. Pass *True* if the video has no sound
     * @type {boolean}
     * @memberof InputStoryContentVideo
     */
    'is_animation'?: boolean;
}
/**
 * Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a text message to be sent as the result of an inline query.
 * @export
 * @interface InputTextMessageContent
 */
export interface InputTextMessageContent {
    /**
     * Text of the message to be sent, 1-4096 characters
     * @type {string}
     * @memberof InputTextMessageContent
     */
    'message_text': string;
    /**
     * *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof InputTextMessageContent
     */
    'parse_mode'?: string;
    /**
     * *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof InputTextMessageContent
     */
    'entities'?: Array<MessageEntity>;
    /**
     * 
     * @type {LinkPreviewOptions}
     * @memberof InputTextMessageContent
     */
    'link_preview_options'?: LinkPreviewOptions;
}
/**
 * Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a venue message to be sent as the result of an inline query.
 * @export
 * @interface InputVenueMessageContent
 */
export interface InputVenueMessageContent {
    /**
     * Latitude of the venue in degrees
     * @type {number}
     * @memberof InputVenueMessageContent
     */
    'latitude': number;
    /**
     * Longitude of the venue in degrees
     * @type {number}
     * @memberof InputVenueMessageContent
     */
    'longitude': number;
    /**
     * Name of the venue
     * @type {string}
     * @memberof InputVenueMessageContent
     */
    'title': string;
    /**
     * Address of the venue
     * @type {string}
     * @memberof InputVenueMessageContent
     */
    'address': string;
    /**
     * *Optional*. Foursquare identifier of the venue, if known
     * @type {string}
     * @memberof InputVenueMessageContent
     */
    'foursquare_id'?: string;
    /**
     * *Optional*. Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)
     * @type {string}
     * @memberof InputVenueMessageContent
     */
    'foursquare_type'?: string;
    /**
     * *Optional*. Google Places identifier of the venue
     * @type {string}
     * @memberof InputVenueMessageContent
     */
    'google_place_id'?: string;
    /**
     * *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
     * @type {string}
     * @memberof InputVenueMessageContent
     */
    'google_place_type'?: string;
}
/**
 * This object contains basic information about an invoice.
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * Product name
     * @type {string}
     * @memberof Invoice
     */
    'title': string;
    /**
     * Product description
     * @type {string}
     * @memberof Invoice
     */
    'description': string;
    /**
     * Unique bot deep-linking parameter that can be used to generate this invoice
     * @type {string}
     * @memberof Invoice
     */
    'start_parameter': string;
    /**
     * Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code, or “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90)
     * @type {string}
     * @memberof Invoice
     */
    'currency': string;
    /**
     * Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
     * @type {number}
     * @memberof Invoice
     */
    'total_amount': number;
}
/**
 * This object represents one button of the reply keyboard. At most one of the optional fields must be used to specify type of the button. For simple text buttons, *String* can be used instead of this object to specify the button text.
 * @export
 * @interface KeyboardButton
 */
export interface KeyboardButton {
    /**
     * Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
     * @type {string}
     * @memberof KeyboardButton
     */
    'text': string;
    /**
     * 
     * @type {KeyboardButtonRequestUsers}
     * @memberof KeyboardButton
     */
    'request_users'?: KeyboardButtonRequestUsers;
    /**
     * 
     * @type {KeyboardButtonRequestChat}
     * @memberof KeyboardButton
     */
    'request_chat'?: KeyboardButtonRequestChat;
    /**
     * *Optional*. If *True*, the user\'s phone number will be sent as a contact when the button is pressed. Available in private chats only.
     * @type {boolean}
     * @memberof KeyboardButton
     */
    'request_contact'?: boolean;
    /**
     * *Optional*. If *True*, the user\'s current location will be sent when the button is pressed. Available in private chats only.
     * @type {boolean}
     * @memberof KeyboardButton
     */
    'request_location'?: boolean;
    /**
     * 
     * @type {KeyboardButtonPollType}
     * @memberof KeyboardButton
     */
    'request_poll'?: KeyboardButtonPollType;
    /**
     * 
     * @type {WebAppInfo}
     * @memberof KeyboardButton
     */
    'web_app'?: WebAppInfo;
}
/**
 * This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
 * @export
 * @interface KeyboardButtonPollType
 */
export interface KeyboardButtonPollType {
    /**
     * *Optional*. If *quiz* is passed, the user will be allowed to create only polls in the quiz mode. If *regular* is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
     * @type {string}
     * @memberof KeyboardButtonPollType
     */
    'type'?: string;
}
/**
 * This object defines the criteria used to request a suitable chat. Information about the selected chat will be shared with the bot when the corresponding button is pressed. The bot will be granted requested rights in the chat if appropriate. [More about requesting chats »](https://core.telegram.org/bots/features#chat-and-user-selection).
 * @export
 * @interface KeyboardButtonRequestChat
 */
export interface KeyboardButtonRequestChat {
    /**
     * Signed 32-bit identifier of the request, which will be received back in the [ChatShared](https://core.telegram.org/bots/api/#chatshared) object. Must be unique within the message
     * @type {number}
     * @memberof KeyboardButtonRequestChat
     */
    'request_id': number;
    /**
     * Pass *True* to request a channel chat, pass *False* to request a group or a supergroup chat.
     * @type {boolean}
     * @memberof KeyboardButtonRequestChat
     */
    'chat_is_channel': boolean;
    /**
     * *Optional*. Pass *True* to request a forum supergroup, pass *False* to request a non-forum chat. If not specified, no additional restrictions are applied.
     * @type {boolean}
     * @memberof KeyboardButtonRequestChat
     */
    'chat_is_forum'?: boolean;
    /**
     * *Optional*. Pass *True* to request a supergroup or a channel with a username, pass *False* to request a chat without a username. If not specified, no additional restrictions are applied.
     * @type {boolean}
     * @memberof KeyboardButtonRequestChat
     */
    'chat_has_username'?: boolean;
    /**
     * *Optional*. Pass *True* to request a chat owned by the user. Otherwise, no additional restrictions are applied.
     * @type {boolean}
     * @memberof KeyboardButtonRequestChat
     */
    'chat_is_created'?: boolean;
    /**
     * 
     * @type {ChatAdministratorRights}
     * @memberof KeyboardButtonRequestChat
     */
    'user_administrator_rights'?: ChatAdministratorRights;
    /**
     * 
     * @type {ChatAdministratorRights}
     * @memberof KeyboardButtonRequestChat
     */
    'bot_administrator_rights'?: ChatAdministratorRights;
    /**
     * *Optional*. Pass *True* to request a chat with the bot as a member. Otherwise, no additional restrictions are applied.
     * @type {boolean}
     * @memberof KeyboardButtonRequestChat
     */
    'bot_is_member'?: boolean;
    /**
     * *Optional*. Pass *True* to request the chat\'s title
     * @type {boolean}
     * @memberof KeyboardButtonRequestChat
     */
    'request_title'?: boolean;
    /**
     * *Optional*. Pass *True* to request the chat\'s username
     * @type {boolean}
     * @memberof KeyboardButtonRequestChat
     */
    'request_username'?: boolean;
    /**
     * *Optional*. Pass *True* to request the chat\'s photo
     * @type {boolean}
     * @memberof KeyboardButtonRequestChat
     */
    'request_photo'?: boolean;
}
/**
 * This object defines the criteria used to request suitable users. Information about the selected users will be shared with the bot when the corresponding button is pressed. [More about requesting users »](https://core.telegram.org/bots/features#chat-and-user-selection)
 * @export
 * @interface KeyboardButtonRequestUsers
 */
export interface KeyboardButtonRequestUsers {
    /**
     * Signed 32-bit identifier of the request that will be received back in the [UsersShared](https://core.telegram.org/bots/api/#usersshared) object. Must be unique within the message
     * @type {number}
     * @memberof KeyboardButtonRequestUsers
     */
    'request_id': number;
    /**
     * *Optional*. Pass *True* to request bots, pass *False* to request regular users. If not specified, no additional restrictions are applied.
     * @type {boolean}
     * @memberof KeyboardButtonRequestUsers
     */
    'user_is_bot'?: boolean;
    /**
     * *Optional*. Pass *True* to request premium users, pass *False* to request non-premium users. If not specified, no additional restrictions are applied.
     * @type {boolean}
     * @memberof KeyboardButtonRequestUsers
     */
    'user_is_premium'?: boolean;
    /**
     * *Optional*. The maximum number of users to be selected; 1-10. Defaults to 1.
     * @type {number}
     * @memberof KeyboardButtonRequestUsers
     */
    'max_quantity'?: number;
    /**
     * *Optional*. Pass *True* to request the users\' first and last names
     * @type {boolean}
     * @memberof KeyboardButtonRequestUsers
     */
    'request_name'?: boolean;
    /**
     * *Optional*. Pass *True* to request the users\' usernames
     * @type {boolean}
     * @memberof KeyboardButtonRequestUsers
     */
    'request_username'?: boolean;
    /**
     * *Optional*. Pass *True* to request the users\' photos
     * @type {boolean}
     * @memberof KeyboardButtonRequestUsers
     */
    'request_photo'?: boolean;
}
/**
 * This object represents a portion of the price for goods or services.
 * @export
 * @interface LabeledPrice
 */
export interface LabeledPrice {
    /**
     * Portion label
     * @type {string}
     * @memberof LabeledPrice
     */
    'label': string;
    /**
     * Price of the product in the *smallest units* of the [currency](https://core.telegram.org/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
     * @type {number}
     * @memberof LabeledPrice
     */
    'amount': number;
}
/**
 * 
 * @export
 * @interface LeaveChatPostRequest
 */
export interface LeaveChatPostRequest {
    /**
     * 
     * @type {LeaveChatPostRequestChatId}
     * @memberof LeaveChatPostRequest
     */
    'chat_id': LeaveChatPostRequestChatId;
}
/**
 * @type LeaveChatPostRequestChatId
 * Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
 * @export
 */
export type LeaveChatPostRequestChatId = number | string;

/**
 * Describes the options used for link preview generation.
 * @export
 * @interface LinkPreviewOptions
 */
export interface LinkPreviewOptions {
    /**
     * *Optional*. *True*, if the link preview is disabled
     * @type {boolean}
     * @memberof LinkPreviewOptions
     */
    'is_disabled'?: boolean;
    /**
     * *Optional*. URL to use for the link preview. If empty, then the first URL found in the message text will be used
     * @type {string}
     * @memberof LinkPreviewOptions
     */
    'url'?: string;
    /**
     * *Optional*. *True*, if the media in the link preview is supposed to be shrunk; ignored if the URL isn\'t explicitly specified or media size change isn\'t supported for the preview
     * @type {boolean}
     * @memberof LinkPreviewOptions
     */
    'prefer_small_media'?: boolean;
    /**
     * *Optional*. *True*, if the media in the link preview is supposed to be enlarged; ignored if the URL isn\'t explicitly specified or media size change isn\'t supported for the preview
     * @type {boolean}
     * @memberof LinkPreviewOptions
     */
    'prefer_large_media'?: boolean;
    /**
     * *Optional*. *True*, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text
     * @type {boolean}
     * @memberof LinkPreviewOptions
     */
    'show_above_text'?: boolean;
}
/**
 * This object represents a point on the map.
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * Latitude as defined by the sender
     * @type {number}
     * @memberof Location
     */
    'latitude': number;
    /**
     * Longitude as defined by the sender
     * @type {number}
     * @memberof Location
     */
    'longitude': number;
    /**
     * *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
     * @type {number}
     * @memberof Location
     */
    'horizontal_accuracy'?: number;
    /**
     * *Optional*. Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only.
     * @type {number}
     * @memberof Location
     */
    'live_period'?: number;
    /**
     * *Optional*. The direction in which user is moving, in degrees; 1-360. For active live locations only.
     * @type {number}
     * @memberof Location
     */
    'heading'?: number;
    /**
     * *Optional*. The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
     * @type {number}
     * @memberof Location
     */
    'proximity_alert_radius'?: number;
}
/**
 * Describes the physical address of a location.
 * @export
 * @interface LocationAddress
 */
export interface LocationAddress {
    /**
     * The two-letter ISO 3166-1 alpha-2 country code of the country where the location is located
     * @type {string}
     * @memberof LocationAddress
     */
    'country_code': string;
    /**
     * *Optional*. State of the location
     * @type {string}
     * @memberof LocationAddress
     */
    'state'?: string;
    /**
     * *Optional*. City of the location
     * @type {string}
     * @memberof LocationAddress
     */
    'city'?: string;
    /**
     * *Optional*. Street address of the location
     * @type {string}
     * @memberof LocationAddress
     */
    'street'?: string;
}
/**
 * This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the [Telegram Login Widget](https://core.telegram.org/widgets/login) when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:  Telegram apps support these buttons as of [version 5.7](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).  Sample bot: [@discussbot](https://t.me/discussbot)
 * @export
 * @interface LoginUrl
 */
export interface LoginUrl {
    /**
     * An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).    **NOTE:** You **must** always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).
     * @type {string}
     * @memberof LoginUrl
     */
    'url': string;
    /**
     * *Optional*. New text of the button in forwarded messages.
     * @type {string}
     * @memberof LoginUrl
     */
    'forward_text'?: string;
    /**
     * *Optional*. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot\'s username will be assumed. The *url*\'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.
     * @type {string}
     * @memberof LoginUrl
     */
    'bot_username'?: string;
    /**
     * *Optional*. Pass *True* to request the permission for your bot to send messages to the user.
     * @type {boolean}
     * @memberof LoginUrl
     */
    'request_write_access'?: boolean;
}
/**
 * This object describes the position on faces where a mask should be placed by default.
 * @export
 * @interface MaskPosition
 */
export interface MaskPosition {
    /**
     * The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
     * @type {string}
     * @memberof MaskPosition
     */
    'point': MaskPositionPointEnum;
    /**
     * Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
     * @type {number}
     * @memberof MaskPosition
     */
    'x_shift': number;
    /**
     * Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
     * @type {number}
     * @memberof MaskPosition
     */
    'y_shift': number;
    /**
     * Mask scaling coefficient. For example, 2.0 means double size.
     * @type {number}
     * @memberof MaskPosition
     */
    'scale': number;
}

export const MaskPositionPointEnum = {
    Forehead: 'forehead',
    Eyes: 'eyes',
    Mouth: 'mouth',
    Chin: 'chin'
} as const;

export type MaskPositionPointEnum = typeof MaskPositionPointEnum[keyof typeof MaskPositionPointEnum];

/**
 * @type MaybeInaccessibleMessage
 * This object describes a message that can be inaccessible to the bot. It can be one of  * [Message](https://core.telegram.org/bots/api/#message) * [InaccessibleMessage](https://core.telegram.org/bots/api/#inaccessiblemessage)
 * @export
 */
export type MaybeInaccessibleMessage = InaccessibleMessage | Message;

/**
 * @type MenuButton
 * This object describes the bot\'s menu button in a private chat. It should be one of  * [MenuButtonCommands](https://core.telegram.org/bots/api/#menubuttoncommands) * [MenuButtonWebApp](https://core.telegram.org/bots/api/#menubuttonwebapp) * [MenuButtonDefault](https://core.telegram.org/bots/api/#menubuttondefault)
 * @export
 */
export type MenuButton = MenuButtonCommands | MenuButtonDefault | MenuButtonWebApp;

/**
 * Represents a menu button, which opens the bot\'s list of commands.
 * @export
 * @interface MenuButtonCommands
 */
export interface MenuButtonCommands {
    /**
     * Type of the button, must be *commands*
     * @type {string}
     * @memberof MenuButtonCommands
     */
    'type': string;
}
/**
 * Describes that no specific value for the menu button was set.
 * @export
 * @interface MenuButtonDefault
 */
export interface MenuButtonDefault {
    /**
     * Type of the button, must be *default*
     * @type {string}
     * @memberof MenuButtonDefault
     */
    'type': string;
}
/**
 * Represents a menu button, which launches a [Web App](https://core.telegram.org/bots/webapps).
 * @export
 * @interface MenuButtonWebApp
 */
export interface MenuButtonWebApp {
    /**
     * Type of the button, must be *web\\_app*
     * @type {string}
     * @memberof MenuButtonWebApp
     */
    'type': string;
    /**
     * Text on the button
     * @type {string}
     * @memberof MenuButtonWebApp
     */
    'text': string;
    /**
     * 
     * @type {WebAppInfo}
     * @memberof MenuButtonWebApp
     */
    'web_app': WebAppInfo;
}
/**
 * This object represents a message.
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * Unique message identifier inside this chat. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent
     * @type {number}
     * @memberof Message
     */
    'message_id': number;
    /**
     * Date the message was sent in Unix time. It is always a positive number, representing a valid date.
     * @type {number}
     * @memberof Message
     */
    'date': number;
    /**
     * 
     * @type {Chat}
     * @memberof Message
     */
    'chat': Chat;
    /**
     * *Optional*. Unique identifier of a message thread to which the message belongs; for supergroups only
     * @type {number}
     * @memberof Message
     */
    'message_thread_id'?: number;
    /**
     * 
     * @type {User}
     * @memberof Message
     */
    'from'?: User;
    /**
     * 
     * @type {Chat}
     * @memberof Message
     */
    'sender_chat'?: Chat;
    /**
     * *Optional*. If the sender of the message boosted the chat, the number of boosts added by the user
     * @type {number}
     * @memberof Message
     */
    'sender_boost_count'?: number;
    /**
     * 
     * @type {User}
     * @memberof Message
     */
    'sender_business_bot'?: User;
    /**
     * *Optional*. Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier.
     * @type {string}
     * @memberof Message
     */
    'business_connection_id'?: string;
    /**
     * 
     * @type {MessageOrigin}
     * @memberof Message
     */
    'forward_origin'?: MessageOrigin;
    /**
     * *Optional*. *True*, if the message is sent to a forum topic
     * @type {boolean}
     * @memberof Message
     */
    'is_topic_message'?: boolean;
    /**
     * *Optional*. *True*, if the message is a channel post that was automatically forwarded to the connected discussion group
     * @type {boolean}
     * @memberof Message
     */
    'is_automatic_forward'?: boolean;
    /**
     * 
     * @type {Message}
     * @memberof Message
     */
    'reply_to_message'?: Message;
    /**
     * 
     * @type {ExternalReplyInfo}
     * @memberof Message
     */
    'external_reply'?: ExternalReplyInfo;
    /**
     * 
     * @type {TextQuote}
     * @memberof Message
     */
    'quote'?: TextQuote;
    /**
     * 
     * @type {Story}
     * @memberof Message
     */
    'reply_to_story'?: Story;
    /**
     * 
     * @type {User}
     * @memberof Message
     */
    'via_bot'?: User;
    /**
     * *Optional*. Date the message was last edited in Unix time
     * @type {number}
     * @memberof Message
     */
    'edit_date'?: number;
    /**
     * *Optional*. *True*, if the message can\'t be forwarded
     * @type {boolean}
     * @memberof Message
     */
    'has_protected_content'?: boolean;
    /**
     * *Optional*. True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message
     * @type {boolean}
     * @memberof Message
     */
    'is_from_offline'?: boolean;
    /**
     * *Optional*. The unique identifier of a media message group this message belongs to
     * @type {string}
     * @memberof Message
     */
    'media_group_id'?: string;
    /**
     * *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
     * @type {string}
     * @memberof Message
     */
    'author_signature'?: string;
    /**
     * *Optional*. The number of Telegram Stars that were paid by the sender of the message to send it
     * @type {number}
     * @memberof Message
     */
    'paid_star_count'?: number;
    /**
     * *Optional*. For text messages, the actual UTF-8 text of the message
     * @type {string}
     * @memberof Message
     */
    'text'?: string;
    /**
     * *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
     * @type {Array<MessageEntity>}
     * @memberof Message
     */
    'entities'?: Array<MessageEntity>;
    /**
     * 
     * @type {LinkPreviewOptions}
     * @memberof Message
     */
    'link_preview_options'?: LinkPreviewOptions;
    /**
     * *Optional*. Unique identifier of the message effect added to the message
     * @type {string}
     * @memberof Message
     */
    'effect_id'?: string;
    /**
     * 
     * @type {Animation}
     * @memberof Message
     */
    'animation'?: Animation;
    /**
     * 
     * @type {Audio}
     * @memberof Message
     */
    'audio'?: Audio;
    /**
     * 
     * @type {Document}
     * @memberof Message
     */
    'document'?: Document;
    /**
     * 
     * @type {PaidMediaInfo}
     * @memberof Message
     */
    'paid_media'?: PaidMediaInfo;
    /**
     * *Optional*. Message is a photo, available sizes of the photo
     * @type {Array<PhotoSize>}
     * @memberof Message
     */
    'photo'?: Array<PhotoSize>;
    /**
     * 
     * @type {Sticker}
     * @memberof Message
     */
    'sticker'?: Sticker;
    /**
     * 
     * @type {Story}
     * @memberof Message
     */
    'story'?: Story;
    /**
     * 
     * @type {Video}
     * @memberof Message
     */
    'video'?: Video;
    /**
     * 
     * @type {VideoNote}
     * @memberof Message
     */
    'video_note'?: VideoNote;
    /**
     * 
     * @type {Voice}
     * @memberof Message
     */
    'voice'?: Voice;
    /**
     * *Optional*. Caption for the animation, audio, document, paid media, photo, video or voice
     * @type {string}
     * @memberof Message
     */
    'caption'?: string;
    /**
     * *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
     * @type {Array<MessageEntity>}
     * @memberof Message
     */
    'caption_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. True, if the caption must be shown above the message media
     * @type {boolean}
     * @memberof Message
     */
    'show_caption_above_media'?: boolean;
    /**
     * *Optional*. *True*, if the message media is covered by a spoiler animation
     * @type {boolean}
     * @memberof Message
     */
    'has_media_spoiler'?: boolean;
    /**
     * 
     * @type {Contact}
     * @memberof Message
     */
    'contact'?: Contact;
    /**
     * 
     * @type {Dice}
     * @memberof Message
     */
    'dice'?: Dice;
    /**
     * 
     * @type {Game}
     * @memberof Message
     */
    'game'?: Game;
    /**
     * 
     * @type {Poll}
     * @memberof Message
     */
    'poll'?: Poll;
    /**
     * 
     * @type {Venue}
     * @memberof Message
     */
    'venue'?: Venue;
    /**
     * 
     * @type {Location}
     * @memberof Message
     */
    'location'?: Location;
    /**
     * *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
     * @type {Array<User>}
     * @memberof Message
     */
    'new_chat_members'?: Array<User>;
    /**
     * 
     * @type {User}
     * @memberof Message
     */
    'left_chat_member'?: User;
    /**
     * *Optional*. A chat title was changed to this value
     * @type {string}
     * @memberof Message
     */
    'new_chat_title'?: string;
    /**
     * *Optional*. A chat photo was change to this value
     * @type {Array<PhotoSize>}
     * @memberof Message
     */
    'new_chat_photo'?: Array<PhotoSize>;
    /**
     * *Optional*. Service message: the chat photo was deleted
     * @type {boolean}
     * @memberof Message
     */
    'delete_chat_photo'?: boolean;
    /**
     * *Optional*. Service message: the group has been created
     * @type {boolean}
     * @memberof Message
     */
    'group_chat_created'?: boolean;
    /**
     * *Optional*. Service message: the supergroup has been created. This field can\'t be received in a message coming through updates, because bot can\'t be a member of a supergroup when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a directly created supergroup.
     * @type {boolean}
     * @memberof Message
     */
    'supergroup_chat_created'?: boolean;
    /**
     * *Optional*. Service message: the channel has been created. This field can\'t be received in a message coming through updates, because bot can\'t be a member of a channel when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a channel.
     * @type {boolean}
     * @memberof Message
     */
    'channel_chat_created'?: boolean;
    /**
     * 
     * @type {MessageAutoDeleteTimerChanged}
     * @memberof Message
     */
    'message_auto_delete_timer_changed'?: MessageAutoDeleteTimerChanged;
    /**
     * *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
     * @type {number}
     * @memberof Message
     */
    'migrate_to_chat_id'?: number;
    /**
     * *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
     * @type {number}
     * @memberof Message
     */
    'migrate_from_chat_id'?: number;
    /**
     * 
     * @type {MaybeInaccessibleMessage}
     * @memberof Message
     */
    'pinned_message'?: MaybeInaccessibleMessage;
    /**
     * 
     * @type {Invoice}
     * @memberof Message
     */
    'invoice'?: Invoice;
    /**
     * 
     * @type {SuccessfulPayment}
     * @memberof Message
     */
    'successful_payment'?: SuccessfulPayment;
    /**
     * 
     * @type {RefundedPayment}
     * @memberof Message
     */
    'refunded_payment'?: RefundedPayment;
    /**
     * 
     * @type {UsersShared}
     * @memberof Message
     */
    'users_shared'?: UsersShared;
    /**
     * 
     * @type {ChatShared}
     * @memberof Message
     */
    'chat_shared'?: ChatShared;
    /**
     * 
     * @type {GiftInfo}
     * @memberof Message
     */
    'gift'?: GiftInfo;
    /**
     * 
     * @type {UniqueGiftInfo}
     * @memberof Message
     */
    'unique_gift'?: UniqueGiftInfo;
    /**
     * *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](https://core.telegram.org/widgets/login)
     * @type {string}
     * @memberof Message
     */
    'connected_website'?: string;
    /**
     * 
     * @type {WriteAccessAllowed}
     * @memberof Message
     */
    'write_access_allowed'?: WriteAccessAllowed;
    /**
     * 
     * @type {PassportData}
     * @memberof Message
     */
    'passport_data'?: PassportData;
    /**
     * 
     * @type {ProximityAlertTriggered}
     * @memberof Message
     */
    'proximity_alert_triggered'?: ProximityAlertTriggered;
    /**
     * 
     * @type {ChatBoostAdded}
     * @memberof Message
     */
    'boost_added'?: ChatBoostAdded;
    /**
     * 
     * @type {ChatBackground}
     * @memberof Message
     */
    'chat_background_set'?: ChatBackground;
    /**
     * 
     * @type {ForumTopicCreated}
     * @memberof Message
     */
    'forum_topic_created'?: ForumTopicCreated;
    /**
     * 
     * @type {ForumTopicEdited}
     * @memberof Message
     */
    'forum_topic_edited'?: ForumTopicEdited;
    /**
     * 
     * @type {any}
     * @memberof Message
     */
    'forum_topic_closed'?: any;
    /**
     * 
     * @type {any}
     * @memberof Message
     */
    'forum_topic_reopened'?: any;
    /**
     * 
     * @type {any}
     * @memberof Message
     */
    'general_forum_topic_hidden'?: any;
    /**
     * 
     * @type {any}
     * @memberof Message
     */
    'general_forum_topic_unhidden'?: any;
    /**
     * 
     * @type {GiveawayCreated}
     * @memberof Message
     */
    'giveaway_created'?: GiveawayCreated;
    /**
     * 
     * @type {Giveaway}
     * @memberof Message
     */
    'giveaway'?: Giveaway;
    /**
     * 
     * @type {GiveawayWinners}
     * @memberof Message
     */
    'giveaway_winners'?: GiveawayWinners;
    /**
     * 
     * @type {GiveawayCompleted}
     * @memberof Message
     */
    'giveaway_completed'?: GiveawayCompleted;
    /**
     * 
     * @type {PaidMessagePriceChanged}
     * @memberof Message
     */
    'paid_message_price_changed'?: PaidMessagePriceChanged;
    /**
     * 
     * @type {VideoChatScheduled}
     * @memberof Message
     */
    'video_chat_scheduled'?: VideoChatScheduled;
    /**
     * 
     * @type {any}
     * @memberof Message
     */
    'video_chat_started'?: any;
    /**
     * 
     * @type {VideoChatEnded}
     * @memberof Message
     */
    'video_chat_ended'?: VideoChatEnded;
    /**
     * 
     * @type {VideoChatParticipantsInvited}
     * @memberof Message
     */
    'video_chat_participants_invited'?: VideoChatParticipantsInvited;
    /**
     * 
     * @type {WebAppData}
     * @memberof Message
     */
    'web_app_data'?: WebAppData;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof Message
     */
    'reply_markup'?: InlineKeyboardMarkup;
}
/**
 * This object represents a service message about a change in auto-delete timer settings.
 * @export
 * @interface MessageAutoDeleteTimerChanged
 */
export interface MessageAutoDeleteTimerChanged {
    /**
     * New auto-delete time for messages in the chat; in seconds
     * @type {number}
     * @memberof MessageAutoDeleteTimerChanged
     */
    'message_auto_delete_time': number;
}
/**
 * This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
 * @export
 * @interface MessageEntity
 */
export interface MessageEntity {
    /**
     * Type of the entity. Currently, can be “mention” (`@username`), “hashtag” (`#hashtag` or `#hashtag@chatusername`), “cashtag” (`$USD` or `$USD@chatusername`), “bot\\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “spoiler” (spoiler message), “blockquote” (block quotation), “expandable\\_blockquote” (collapsed-by-default block quotation), “code” (monowidth string), “pre” (monowidth block), “text\\_link” (for clickable text URLs), “text\\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions)), “custom\\_emoji” (for inline custom emoji stickers)
     * @type {string}
     * @memberof MessageEntity
     */
    'type': MessageEntityTypeEnum;
    /**
     * Offset in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length) to the start of the entity
     * @type {number}
     * @memberof MessageEntity
     */
    'offset': number;
    /**
     * Length of the entity in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)
     * @type {number}
     * @memberof MessageEntity
     */
    'length': number;
    /**
     * *Optional*. For “text\\_link” only, URL that will be opened after user taps on the text
     * @type {string}
     * @memberof MessageEntity
     */
    'url'?: string;
    /**
     * 
     * @type {User}
     * @memberof MessageEntity
     */
    'user'?: User;
    /**
     * *Optional*. For “pre” only, the programming language of the entity text
     * @type {string}
     * @memberof MessageEntity
     */
    'language'?: string;
    /**
     * *Optional*. For “custom\\_emoji” only, unique identifier of the custom emoji. Use [getCustomEmojiStickers](https://core.telegram.org/bots/api/#getcustomemojistickers) to get full information about the sticker
     * @type {string}
     * @memberof MessageEntity
     */
    'custom_emoji_id'?: string;
}

export const MessageEntityTypeEnum = {
    Mention: 'mention',
    Hashtag: 'hashtag',
    Cashtag: 'cashtag',
    BotCommand: 'bot_command',
    Url: 'url',
    Email: 'email',
    PhoneNumber: 'phone_number',
    Bold: 'bold',
    Italic: 'italic',
    Underline: 'underline',
    Strikethrough: 'strikethrough',
    Spoiler: 'spoiler',
    Blockquote: 'blockquote',
    ExpandableBlockquote: 'expandable_blockquote',
    Code: 'code',
    Pre: 'pre',
    TextLink: 'text_link',
    TextMention: 'text_mention',
    CustomEmoji: 'custom_emoji'
} as const;

export type MessageEntityTypeEnum = typeof MessageEntityTypeEnum[keyof typeof MessageEntityTypeEnum];

/**
 * This object represents a unique message identifier.
 * @export
 * @interface MessageId
 */
export interface MessageId {
    /**
     * Unique message identifier. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent
     * @type {number}
     * @memberof MessageId
     */
    'message_id': number;
}
/**
 * @type MessageOrigin
 * This object describes the origin of a message. It can be one of  * [MessageOriginUser](https://core.telegram.org/bots/api/#messageoriginuser) * [MessageOriginHiddenUser](https://core.telegram.org/bots/api/#messageoriginhiddenuser) * [MessageOriginChat](https://core.telegram.org/bots/api/#messageoriginchat) * [MessageOriginChannel](https://core.telegram.org/bots/api/#messageoriginchannel)
 * @export
 */
export type MessageOrigin = MessageOriginChannel | MessageOriginChat | MessageOriginHiddenUser | MessageOriginUser;

/**
 * The message was originally sent to a channel chat.
 * @export
 * @interface MessageOriginChannel
 */
export interface MessageOriginChannel {
    /**
     * Type of the message origin, always “channel”
     * @type {string}
     * @memberof MessageOriginChannel
     */
    'type': string;
    /**
     * Date the message was sent originally in Unix time
     * @type {number}
     * @memberof MessageOriginChannel
     */
    'date': number;
    /**
     * 
     * @type {Chat}
     * @memberof MessageOriginChannel
     */
    'chat': Chat;
    /**
     * Unique message identifier inside the chat
     * @type {number}
     * @memberof MessageOriginChannel
     */
    'message_id': number;
    /**
     * *Optional*. Signature of the original post author
     * @type {string}
     * @memberof MessageOriginChannel
     */
    'author_signature'?: string;
}
/**
 * The message was originally sent on behalf of a chat to a group chat.
 * @export
 * @interface MessageOriginChat
 */
export interface MessageOriginChat {
    /**
     * Type of the message origin, always “chat”
     * @type {string}
     * @memberof MessageOriginChat
     */
    'type': string;
    /**
     * Date the message was sent originally in Unix time
     * @type {number}
     * @memberof MessageOriginChat
     */
    'date': number;
    /**
     * 
     * @type {Chat}
     * @memberof MessageOriginChat
     */
    'sender_chat': Chat;
    /**
     * *Optional*. For messages originally sent by an anonymous chat administrator, original message author signature
     * @type {string}
     * @memberof MessageOriginChat
     */
    'author_signature'?: string;
}
/**
 * The message was originally sent by an unknown user.
 * @export
 * @interface MessageOriginHiddenUser
 */
export interface MessageOriginHiddenUser {
    /**
     * Type of the message origin, always “hidden\\_user”
     * @type {string}
     * @memberof MessageOriginHiddenUser
     */
    'type': string;
    /**
     * Date the message was sent originally in Unix time
     * @type {number}
     * @memberof MessageOriginHiddenUser
     */
    'date': number;
    /**
     * Name of the user that sent the message originally
     * @type {string}
     * @memberof MessageOriginHiddenUser
     */
    'sender_user_name': string;
}
/**
 * The message was originally sent by a known user.
 * @export
 * @interface MessageOriginUser
 */
export interface MessageOriginUser {
    /**
     * Type of the message origin, always “user”
     * @type {string}
     * @memberof MessageOriginUser
     */
    'type': string;
    /**
     * Date the message was sent originally in Unix time
     * @type {number}
     * @memberof MessageOriginUser
     */
    'date': number;
    /**
     * 
     * @type {User}
     * @memberof MessageOriginUser
     */
    'sender_user': User;
}
/**
 * This object represents reaction changes on a message with anonymous reactions.
 * @export
 * @interface MessageReactionCountUpdated
 */
export interface MessageReactionCountUpdated {
    /**
     * 
     * @type {Chat}
     * @memberof MessageReactionCountUpdated
     */
    'chat': Chat;
    /**
     * Unique message identifier inside the chat
     * @type {number}
     * @memberof MessageReactionCountUpdated
     */
    'message_id': number;
    /**
     * Date of the change in Unix time
     * @type {number}
     * @memberof MessageReactionCountUpdated
     */
    'date': number;
    /**
     * List of reactions that are present on the message
     * @type {Array<ReactionCount>}
     * @memberof MessageReactionCountUpdated
     */
    'reactions': Array<ReactionCount>;
}
/**
 * This object represents a change of a reaction on a message performed by a user.
 * @export
 * @interface MessageReactionUpdated
 */
export interface MessageReactionUpdated {
    /**
     * 
     * @type {Chat}
     * @memberof MessageReactionUpdated
     */
    'chat': Chat;
    /**
     * Unique identifier of the message inside the chat
     * @type {number}
     * @memberof MessageReactionUpdated
     */
    'message_id': number;
    /**
     * Date of the change in Unix time
     * @type {number}
     * @memberof MessageReactionUpdated
     */
    'date': number;
    /**
     * Previous list of reaction types that were set by the user
     * @type {Array<ReactionType>}
     * @memberof MessageReactionUpdated
     */
    'old_reaction': Array<ReactionType>;
    /**
     * New list of reaction types that have been set by the user
     * @type {Array<ReactionType>}
     * @memberof MessageReactionUpdated
     */
    'new_reaction': Array<ReactionType>;
    /**
     * 
     * @type {User}
     * @memberof MessageReactionUpdated
     */
    'user'?: User;
    /**
     * 
     * @type {Chat}
     * @memberof MessageReactionUpdated
     */
    'actor_chat'?: Chat;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {boolean}
     * @memberof ModelError
     */
    'ok': boolean;
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'error_code': number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'description': string;
    /**
     * 
     * @type {ResponseParameters}
     * @memberof ModelError
     */
    'parameters'?: ResponseParameters;
}
/**
 * This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).  The maximum file size to download is 20 MB
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * Identifier for this file, which can be used to download or reuse the file
     * @type {string}
     * @memberof ModelFile
     */
    'file_id': string;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
     * @type {string}
     * @memberof ModelFile
     */
    'file_unique_id': string;
    /**
     * *Optional*. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
     * @type {number}
     * @memberof ModelFile
     */
    'file_size'?: number;
    /**
     * *Optional*. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.
     * @type {string}
     * @memberof ModelFile
     */
    'file_path'?: string;
}
/**
 * This object represents information about an order.
 * @export
 * @interface OrderInfo
 */
export interface OrderInfo {
    /**
     * *Optional*. User name
     * @type {string}
     * @memberof OrderInfo
     */
    'name'?: string;
    /**
     * *Optional*. User\'s phone number
     * @type {string}
     * @memberof OrderInfo
     */
    'phone_number'?: string;
    /**
     * *Optional*. User email
     * @type {string}
     * @memberof OrderInfo
     */
    'email'?: string;
    /**
     * 
     * @type {ShippingAddress}
     * @memberof OrderInfo
     */
    'shipping_address'?: ShippingAddress;
}
/**
 * @type OwnedGift
 * This object describes a gift received and owned by a user or a chat. Currently, it can be one of  * [OwnedGiftRegular](https://core.telegram.org/bots/api/#ownedgiftregular) * [OwnedGiftUnique](https://core.telegram.org/bots/api/#ownedgiftunique)
 * @export
 */
export type OwnedGift = OwnedGiftRegular | OwnedGiftUnique;

/**
 * Describes a regular gift owned by a user or a chat.
 * @export
 * @interface OwnedGiftRegular
 */
export interface OwnedGiftRegular {
    /**
     * Type of the gift, always “regular”
     * @type {string}
     * @memberof OwnedGiftRegular
     */
    'type': string;
    /**
     * 
     * @type {Gift}
     * @memberof OwnedGiftRegular
     */
    'gift': Gift;
    /**
     * Date the gift was sent in Unix time
     * @type {number}
     * @memberof OwnedGiftRegular
     */
    'send_date': number;
    /**
     * *Optional*. Unique identifier of the gift for the bot; for gifts received on behalf of business accounts only
     * @type {string}
     * @memberof OwnedGiftRegular
     */
    'owned_gift_id'?: string;
    /**
     * 
     * @type {User}
     * @memberof OwnedGiftRegular
     */
    'sender_user'?: User;
    /**
     * *Optional*. Text of the message that was added to the gift
     * @type {string}
     * @memberof OwnedGiftRegular
     */
    'text'?: string;
    /**
     * *Optional*. Special entities that appear in the text
     * @type {Array<MessageEntity>}
     * @memberof OwnedGiftRegular
     */
    'entities'?: Array<MessageEntity>;
    /**
     * *Optional*. True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them
     * @type {boolean}
     * @memberof OwnedGiftRegular
     */
    'is_private'?: boolean;
    /**
     * *Optional*. True, if the gift is displayed on the account\'s profile page; for gifts received on behalf of business accounts only
     * @type {boolean}
     * @memberof OwnedGiftRegular
     */
    'is_saved'?: boolean;
    /**
     * *Optional*. True, if the gift can be upgraded to a unique gift; for gifts received on behalf of business accounts only
     * @type {boolean}
     * @memberof OwnedGiftRegular
     */
    'can_be_upgraded'?: boolean;
    /**
     * *Optional*. True, if the gift was refunded and isn\'t available anymore
     * @type {boolean}
     * @memberof OwnedGiftRegular
     */
    'was_refunded'?: boolean;
    /**
     * *Optional*. Number of Telegram Stars that can be claimed by the receiver instead of the gift; omitted if the gift cannot be converted to Telegram Stars
     * @type {number}
     * @memberof OwnedGiftRegular
     */
    'convert_star_count'?: number;
    /**
     * *Optional*. Number of Telegram Stars that were paid by the sender for the ability to upgrade the gift
     * @type {number}
     * @memberof OwnedGiftRegular
     */
    'prepaid_upgrade_star_count'?: number;
}
/**
 * Describes a unique gift received and owned by a user or a chat.
 * @export
 * @interface OwnedGiftUnique
 */
export interface OwnedGiftUnique {
    /**
     * Type of the gift, always “unique”
     * @type {string}
     * @memberof OwnedGiftUnique
     */
    'type': string;
    /**
     * 
     * @type {UniqueGift}
     * @memberof OwnedGiftUnique
     */
    'gift': UniqueGift;
    /**
     * Date the gift was sent in Unix time
     * @type {number}
     * @memberof OwnedGiftUnique
     */
    'send_date': number;
    /**
     * *Optional*. Unique identifier of the received gift for the bot; for gifts received on behalf of business accounts only
     * @type {string}
     * @memberof OwnedGiftUnique
     */
    'owned_gift_id'?: string;
    /**
     * 
     * @type {User}
     * @memberof OwnedGiftUnique
     */
    'sender_user'?: User;
    /**
     * *Optional*. True, if the gift is displayed on the account\'s profile page; for gifts received on behalf of business accounts only
     * @type {boolean}
     * @memberof OwnedGiftUnique
     */
    'is_saved'?: boolean;
    /**
     * *Optional*. True, if the gift can be transferred to another owner; for gifts received on behalf of business accounts only
     * @type {boolean}
     * @memberof OwnedGiftUnique
     */
    'can_be_transferred'?: boolean;
    /**
     * *Optional*. Number of Telegram Stars that must be paid to transfer the gift; omitted if the bot cannot transfer the gift
     * @type {number}
     * @memberof OwnedGiftUnique
     */
    'transfer_star_count'?: number;
}
/**
 * Contains the list of gifts received and owned by a user or a chat.
 * @export
 * @interface OwnedGifts
 */
export interface OwnedGifts {
    /**
     * The total number of gifts owned by the user or the chat
     * @type {number}
     * @memberof OwnedGifts
     */
    'total_count': number;
    /**
     * The list of gifts
     * @type {Array<OwnedGift>}
     * @memberof OwnedGifts
     */
    'gifts': Array<OwnedGift>;
    /**
     * *Optional*. Offset for the next request. If empty, then there are no more results
     * @type {string}
     * @memberof OwnedGifts
     */
    'next_offset'?: string;
}
/**
 * @type PaidMedia
 * This object describes paid media. Currently, it can be one of  * [PaidMediaPreview](https://core.telegram.org/bots/api/#paidmediapreview) * [PaidMediaPhoto](https://core.telegram.org/bots/api/#paidmediaphoto) * [PaidMediaVideo](https://core.telegram.org/bots/api/#paidmediavideo)
 * @export
 */
export type PaidMedia = PaidMediaPhoto | PaidMediaPreview | PaidMediaVideo;

/**
 * Describes the paid media added to a message.
 * @export
 * @interface PaidMediaInfo
 */
export interface PaidMediaInfo {
    /**
     * The number of Telegram Stars that must be paid to buy access to the media
     * @type {number}
     * @memberof PaidMediaInfo
     */
    'star_count': number;
    /**
     * Information about the paid media
     * @type {Array<PaidMedia>}
     * @memberof PaidMediaInfo
     */
    'paid_media': Array<PaidMedia>;
}
/**
 * The paid media is a photo.
 * @export
 * @interface PaidMediaPhoto
 */
export interface PaidMediaPhoto {
    /**
     * Type of the paid media, always “photo”
     * @type {string}
     * @memberof PaidMediaPhoto
     */
    'type': string;
    /**
     * The photo
     * @type {Array<PhotoSize>}
     * @memberof PaidMediaPhoto
     */
    'photo': Array<PhotoSize>;
}
/**
 * The paid media isn\'t available before the payment.
 * @export
 * @interface PaidMediaPreview
 */
export interface PaidMediaPreview {
    /**
     * Type of the paid media, always “preview”
     * @type {string}
     * @memberof PaidMediaPreview
     */
    'type': string;
    /**
     * *Optional*. Media width as defined by the sender
     * @type {number}
     * @memberof PaidMediaPreview
     */
    'width'?: number;
    /**
     * *Optional*. Media height as defined by the sender
     * @type {number}
     * @memberof PaidMediaPreview
     */
    'height'?: number;
    /**
     * *Optional*. Duration of the media in seconds as defined by the sender
     * @type {number}
     * @memberof PaidMediaPreview
     */
    'duration'?: number;
}
/**
 * This object contains information about a paid media purchase.
 * @export
 * @interface PaidMediaPurchased
 */
export interface PaidMediaPurchased {
    /**
     * 
     * @type {User}
     * @memberof PaidMediaPurchased
     */
    'from': User;
    /**
     * Bot-specified paid media payload
     * @type {string}
     * @memberof PaidMediaPurchased
     */
    'paid_media_payload': string;
}
/**
 * The paid media is a video.
 * @export
 * @interface PaidMediaVideo
 */
export interface PaidMediaVideo {
    /**
     * Type of the paid media, always “video”
     * @type {string}
     * @memberof PaidMediaVideo
     */
    'type': string;
    /**
     * 
     * @type {Video}
     * @memberof PaidMediaVideo
     */
    'video': Video;
}
/**
 * Describes a service message about a change in the price of paid messages within a chat.
 * @export
 * @interface PaidMessagePriceChanged
 */
export interface PaidMessagePriceChanged {
    /**
     * The new number of Telegram Stars that must be paid by non-administrator users of the supergroup chat for each sent message
     * @type {number}
     * @memberof PaidMessagePriceChanged
     */
    'paid_message_star_count': number;
}
/**
 * Describes Telegram Passport data shared with the bot by the user.
 * @export
 * @interface PassportData
 */
export interface PassportData {
    /**
     * Array with information about documents and other Telegram Passport elements that was shared with the bot
     * @type {Array<EncryptedPassportElement>}
     * @memberof PassportData
     */
    'data': Array<EncryptedPassportElement>;
    /**
     * 
     * @type {EncryptedCredentials}
     * @memberof PassportData
     */
    'credentials': EncryptedCredentials;
}
/**
 * @type PassportElementError
 * This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:  * [PassportElementErrorDataField](https://core.telegram.org/bots/api/#passportelementerrordatafield) * [PassportElementErrorFrontSide](https://core.telegram.org/bots/api/#passportelementerrorfrontside) * [PassportElementErrorReverseSide](https://core.telegram.org/bots/api/#passportelementerrorreverseside) * [PassportElementErrorSelfie](https://core.telegram.org/bots/api/#passportelementerrorselfie) * [PassportElementErrorFile](https://core.telegram.org/bots/api/#passportelementerrorfile) * [PassportElementErrorFiles](https://core.telegram.org/bots/api/#passportelementerrorfiles) * [PassportElementErrorTranslationFile](https://core.telegram.org/bots/api/#passportelementerrortranslationfile) * [PassportElementErrorTranslationFiles](https://core.telegram.org/bots/api/#passportelementerrortranslationfiles) * [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
 * @export
 */
export type PassportElementError = PassportElementErrorDataField | PassportElementErrorFile | PassportElementErrorFiles | PassportElementErrorFrontSide | PassportElementErrorReverseSide | PassportElementErrorSelfie | PassportElementErrorTranslationFile | PassportElementErrorTranslationFiles | PassportElementErrorUnspecified;

/**
 * Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field\'s value changes.
 * @export
 * @interface PassportElementErrorDataField
 */
export interface PassportElementErrorDataField {
    /**
     * Error source, must be *data*
     * @type {string}
     * @memberof PassportElementErrorDataField
     */
    'source': string;
    /**
     * The section of the user\'s Telegram Passport which has the error, one of “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “address”
     * @type {string}
     * @memberof PassportElementErrorDataField
     */
    'type': PassportElementErrorDataFieldTypeEnum;
    /**
     * Name of the data field which has the error
     * @type {string}
     * @memberof PassportElementErrorDataField
     */
    'field_name': string;
    /**
     * Base64-encoded data hash
     * @type {string}
     * @memberof PassportElementErrorDataField
     */
    'data_hash': string;
    /**
     * Error message
     * @type {string}
     * @memberof PassportElementErrorDataField
     */
    'message': string;
}

export const PassportElementErrorDataFieldTypeEnum = {
    PersonalDetails: 'personal_details',
    Passport: 'passport',
    DriverLicense: 'driver_license',
    IdentityCard: 'identity_card',
    InternalPassport: 'internal_passport',
    Address: 'address'
} as const;

export type PassportElementErrorDataFieldTypeEnum = typeof PassportElementErrorDataFieldTypeEnum[keyof typeof PassportElementErrorDataFieldTypeEnum];

/**
 * Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
 * @export
 * @interface PassportElementErrorFile
 */
export interface PassportElementErrorFile {
    /**
     * Error source, must be *file*
     * @type {string}
     * @memberof PassportElementErrorFile
     */
    'source': string;
    /**
     * The section of the user\'s Telegram Passport which has the issue, one of “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”
     * @type {string}
     * @memberof PassportElementErrorFile
     */
    'type': PassportElementErrorFileTypeEnum;
    /**
     * Base64-encoded file hash
     * @type {string}
     * @memberof PassportElementErrorFile
     */
    'file_hash': string;
    /**
     * Error message
     * @type {string}
     * @memberof PassportElementErrorFile
     */
    'message': string;
}

export const PassportElementErrorFileTypeEnum = {
    UtilityBill: 'utility_bill',
    BankStatement: 'bank_statement',
    RentalAgreement: 'rental_agreement',
    PassportRegistration: 'passport_registration',
    TemporaryRegistration: 'temporary_registration'
} as const;

export type PassportElementErrorFileTypeEnum = typeof PassportElementErrorFileTypeEnum[keyof typeof PassportElementErrorFileTypeEnum];

/**
 * Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
 * @export
 * @interface PassportElementErrorFiles
 */
export interface PassportElementErrorFiles {
    /**
     * Error source, must be *files*
     * @type {string}
     * @memberof PassportElementErrorFiles
     */
    'source': string;
    /**
     * The section of the user\'s Telegram Passport which has the issue, one of “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”
     * @type {string}
     * @memberof PassportElementErrorFiles
     */
    'type': PassportElementErrorFilesTypeEnum;
    /**
     * List of base64-encoded file hashes
     * @type {Array<string>}
     * @memberof PassportElementErrorFiles
     */
    'file_hashes': Array<string>;
    /**
     * Error message
     * @type {string}
     * @memberof PassportElementErrorFiles
     */
    'message': string;
}

export const PassportElementErrorFilesTypeEnum = {
    UtilityBill: 'utility_bill',
    BankStatement: 'bank_statement',
    RentalAgreement: 'rental_agreement',
    PassportRegistration: 'passport_registration',
    TemporaryRegistration: 'temporary_registration'
} as const;

export type PassportElementErrorFilesTypeEnum = typeof PassportElementErrorFilesTypeEnum[keyof typeof PassportElementErrorFilesTypeEnum];

/**
 * Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
 * @export
 * @interface PassportElementErrorFrontSide
 */
export interface PassportElementErrorFrontSide {
    /**
     * Error source, must be *front\\_side*
     * @type {string}
     * @memberof PassportElementErrorFrontSide
     */
    'source': string;
    /**
     * The section of the user\'s Telegram Passport which has the issue, one of “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”
     * @type {string}
     * @memberof PassportElementErrorFrontSide
     */
    'type': PassportElementErrorFrontSideTypeEnum;
    /**
     * Base64-encoded hash of the file with the front side of the document
     * @type {string}
     * @memberof PassportElementErrorFrontSide
     */
    'file_hash': string;
    /**
     * Error message
     * @type {string}
     * @memberof PassportElementErrorFrontSide
     */
    'message': string;
}

export const PassportElementErrorFrontSideTypeEnum = {
    Passport: 'passport',
    DriverLicense: 'driver_license',
    IdentityCard: 'identity_card',
    InternalPassport: 'internal_passport'
} as const;

export type PassportElementErrorFrontSideTypeEnum = typeof PassportElementErrorFrontSideTypeEnum[keyof typeof PassportElementErrorFrontSideTypeEnum];

/**
 * Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
 * @export
 * @interface PassportElementErrorReverseSide
 */
export interface PassportElementErrorReverseSide {
    /**
     * Error source, must be *reverse\\_side*
     * @type {string}
     * @memberof PassportElementErrorReverseSide
     */
    'source': string;
    /**
     * The section of the user\'s Telegram Passport which has the issue, one of “driver\\_license”, “identity\\_card”
     * @type {string}
     * @memberof PassportElementErrorReverseSide
     */
    'type': PassportElementErrorReverseSideTypeEnum;
    /**
     * Base64-encoded hash of the file with the reverse side of the document
     * @type {string}
     * @memberof PassportElementErrorReverseSide
     */
    'file_hash': string;
    /**
     * Error message
     * @type {string}
     * @memberof PassportElementErrorReverseSide
     */
    'message': string;
}

export const PassportElementErrorReverseSideTypeEnum = {
    DriverLicense: 'driver_license',
    IdentityCard: 'identity_card'
} as const;

export type PassportElementErrorReverseSideTypeEnum = typeof PassportElementErrorReverseSideTypeEnum[keyof typeof PassportElementErrorReverseSideTypeEnum];

/**
 * Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
 * @export
 * @interface PassportElementErrorSelfie
 */
export interface PassportElementErrorSelfie {
    /**
     * Error source, must be *selfie*
     * @type {string}
     * @memberof PassportElementErrorSelfie
     */
    'source': string;
    /**
     * The section of the user\'s Telegram Passport which has the issue, one of “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”
     * @type {string}
     * @memberof PassportElementErrorSelfie
     */
    'type': PassportElementErrorSelfieTypeEnum;
    /**
     * Base64-encoded hash of the file with the selfie
     * @type {string}
     * @memberof PassportElementErrorSelfie
     */
    'file_hash': string;
    /**
     * Error message
     * @type {string}
     * @memberof PassportElementErrorSelfie
     */
    'message': string;
}

export const PassportElementErrorSelfieTypeEnum = {
    Passport: 'passport',
    DriverLicense: 'driver_license',
    IdentityCard: 'identity_card',
    InternalPassport: 'internal_passport'
} as const;

export type PassportElementErrorSelfieTypeEnum = typeof PassportElementErrorSelfieTypeEnum[keyof typeof PassportElementErrorSelfieTypeEnum];

/**
 * Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
 * @export
 * @interface PassportElementErrorTranslationFile
 */
export interface PassportElementErrorTranslationFile {
    /**
     * Error source, must be *translation\\_file*
     * @type {string}
     * @memberof PassportElementErrorTranslationFile
     */
    'source': string;
    /**
     * Type of element of the user\'s Telegram Passport which has the issue, one of “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”
     * @type {string}
     * @memberof PassportElementErrorTranslationFile
     */
    'type': PassportElementErrorTranslationFileTypeEnum;
    /**
     * Base64-encoded file hash
     * @type {string}
     * @memberof PassportElementErrorTranslationFile
     */
    'file_hash': string;
    /**
     * Error message
     * @type {string}
     * @memberof PassportElementErrorTranslationFile
     */
    'message': string;
}

export const PassportElementErrorTranslationFileTypeEnum = {
    Passport: 'passport',
    DriverLicense: 'driver_license',
    IdentityCard: 'identity_card',
    InternalPassport: 'internal_passport',
    UtilityBill: 'utility_bill',
    BankStatement: 'bank_statement',
    RentalAgreement: 'rental_agreement',
    PassportRegistration: 'passport_registration',
    TemporaryRegistration: 'temporary_registration'
} as const;

export type PassportElementErrorTranslationFileTypeEnum = typeof PassportElementErrorTranslationFileTypeEnum[keyof typeof PassportElementErrorTranslationFileTypeEnum];

/**
 * Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
 * @export
 * @interface PassportElementErrorTranslationFiles
 */
export interface PassportElementErrorTranslationFiles {
    /**
     * Error source, must be *translation\\_files*
     * @type {string}
     * @memberof PassportElementErrorTranslationFiles
     */
    'source': string;
    /**
     * Type of element of the user\'s Telegram Passport which has the issue, one of “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”
     * @type {string}
     * @memberof PassportElementErrorTranslationFiles
     */
    'type': PassportElementErrorTranslationFilesTypeEnum;
    /**
     * List of base64-encoded file hashes
     * @type {Array<string>}
     * @memberof PassportElementErrorTranslationFiles
     */
    'file_hashes': Array<string>;
    /**
     * Error message
     * @type {string}
     * @memberof PassportElementErrorTranslationFiles
     */
    'message': string;
}

export const PassportElementErrorTranslationFilesTypeEnum = {
    Passport: 'passport',
    DriverLicense: 'driver_license',
    IdentityCard: 'identity_card',
    InternalPassport: 'internal_passport',
    UtilityBill: 'utility_bill',
    BankStatement: 'bank_statement',
    RentalAgreement: 'rental_agreement',
    PassportRegistration: 'passport_registration',
    TemporaryRegistration: 'temporary_registration'
} as const;

export type PassportElementErrorTranslationFilesTypeEnum = typeof PassportElementErrorTranslationFilesTypeEnum[keyof typeof PassportElementErrorTranslationFilesTypeEnum];

/**
 * Represents an issue in an unspecified place. The error is considered resolved when new data is added.
 * @export
 * @interface PassportElementErrorUnspecified
 */
export interface PassportElementErrorUnspecified {
    /**
     * Error source, must be *unspecified*
     * @type {string}
     * @memberof PassportElementErrorUnspecified
     */
    'source': string;
    /**
     * Type of element of the user\'s Telegram Passport which has the issue
     * @type {string}
     * @memberof PassportElementErrorUnspecified
     */
    'type': string;
    /**
     * Base64-encoded element hash
     * @type {string}
     * @memberof PassportElementErrorUnspecified
     */
    'element_hash': string;
    /**
     * Error message
     * @type {string}
     * @memberof PassportElementErrorUnspecified
     */
    'message': string;
}
/**
 * This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don\'t exceed 10MB.
 * @export
 * @interface PassportFile
 */
export interface PassportFile {
    /**
     * Identifier for this file, which can be used to download or reuse the file
     * @type {string}
     * @memberof PassportFile
     */
    'file_id': string;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
     * @type {string}
     * @memberof PassportFile
     */
    'file_unique_id': string;
    /**
     * File size in bytes
     * @type {number}
     * @memberof PassportFile
     */
    'file_size': number;
    /**
     * Unix time when the file was uploaded
     * @type {number}
     * @memberof PassportFile
     */
    'file_date': number;
}
/**
 * This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
 * @export
 * @interface PhotoSize
 */
export interface PhotoSize {
    /**
     * Identifier for this file, which can be used to download or reuse the file
     * @type {string}
     * @memberof PhotoSize
     */
    'file_id': string;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
     * @type {string}
     * @memberof PhotoSize
     */
    'file_unique_id': string;
    /**
     * Photo width
     * @type {number}
     * @memberof PhotoSize
     */
    'width': number;
    /**
     * Photo height
     * @type {number}
     * @memberof PhotoSize
     */
    'height': number;
    /**
     * *Optional*. File size in bytes
     * @type {number}
     * @memberof PhotoSize
     */
    'file_size'?: number;
}
/**
 * 
 * @export
 * @interface PinChatMessagePostRequest
 */
export interface PinChatMessagePostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof PinChatMessagePostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Identifier of a message to pin
     * @type {number}
     * @memberof PinChatMessagePostRequest
     */
    'message_id': number;
    /**
     * Unique identifier of the business connection on behalf of which the message will be pinned
     * @type {string}
     * @memberof PinChatMessagePostRequest
     */
    'business_connection_id'?: string;
    /**
     * Pass *True* if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
     * @type {boolean}
     * @memberof PinChatMessagePostRequest
     */
    'disable_notification'?: boolean;
}
/**
 * This object contains information about a poll.
 * @export
 * @interface Poll
 */
export interface Poll {
    /**
     * Unique poll identifier
     * @type {string}
     * @memberof Poll
     */
    'id': string;
    /**
     * Poll question, 1-300 characters
     * @type {string}
     * @memberof Poll
     */
    'question': string;
    /**
     * List of poll options
     * @type {Array<PollOption>}
     * @memberof Poll
     */
    'options': Array<PollOption>;
    /**
     * Total number of users that voted in the poll
     * @type {number}
     * @memberof Poll
     */
    'total_voter_count': number;
    /**
     * *True*, if the poll is closed
     * @type {boolean}
     * @memberof Poll
     */
    'is_closed': boolean;
    /**
     * *True*, if the poll is anonymous
     * @type {boolean}
     * @memberof Poll
     */
    'is_anonymous': boolean;
    /**
     * Poll type, currently can be “regular” or “quiz”
     * @type {string}
     * @memberof Poll
     */
    'type': PollTypeEnum;
    /**
     * *True*, if the poll allows multiple answers
     * @type {boolean}
     * @memberof Poll
     */
    'allows_multiple_answers': boolean;
    /**
     * *Optional*. Special entities that appear in the *question*. Currently, only custom emoji entities are allowed in poll questions
     * @type {Array<MessageEntity>}
     * @memberof Poll
     */
    'question_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
     * @type {number}
     * @memberof Poll
     */
    'correct_option_id'?: number;
    /**
     * *Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
     * @type {string}
     * @memberof Poll
     */
    'explanation'?: string;
    /**
     * *Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*
     * @type {Array<MessageEntity>}
     * @memberof Poll
     */
    'explanation_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Amount of time in seconds the poll will be active after creation
     * @type {number}
     * @memberof Poll
     */
    'open_period'?: number;
    /**
     * *Optional*. Point in time (Unix timestamp) when the poll will be automatically closed
     * @type {number}
     * @memberof Poll
     */
    'close_date'?: number;
}

export const PollTypeEnum = {
    Regular: 'regular',
    Quiz: 'quiz'
} as const;

export type PollTypeEnum = typeof PollTypeEnum[keyof typeof PollTypeEnum];

/**
 * This object represents an answer of a user in a non-anonymous poll.
 * @export
 * @interface PollAnswer
 */
export interface PollAnswer {
    /**
     * Unique poll identifier
     * @type {string}
     * @memberof PollAnswer
     */
    'poll_id': string;
    /**
     * 0-based identifiers of chosen answer options. May be empty if the vote was retracted.
     * @type {Array<number>}
     * @memberof PollAnswer
     */
    'option_ids': Array<number>;
    /**
     * 
     * @type {Chat}
     * @memberof PollAnswer
     */
    'voter_chat'?: Chat;
    /**
     * 
     * @type {User}
     * @memberof PollAnswer
     */
    'user'?: User;
}
/**
 * This object contains information about one answer option in a poll.
 * @export
 * @interface PollOption
 */
export interface PollOption {
    /**
     * Option text, 1-100 characters
     * @type {string}
     * @memberof PollOption
     */
    'text': string;
    /**
     * Number of users that voted for this option
     * @type {number}
     * @memberof PollOption
     */
    'voter_count': number;
    /**
     * *Optional*. Special entities that appear in the option *text*. Currently, only custom emoji entities are allowed in poll option texts
     * @type {Array<MessageEntity>}
     * @memberof PollOption
     */
    'text_entities'?: Array<MessageEntity>;
}
/**
 * 
 * @export
 * @interface PostStoryPost200Response
 */
export interface PostStoryPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof PostStoryPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {Story}
     * @memberof PostStoryPost200Response
     */
    'result': Story;
}
/**
 * This object contains information about an incoming pre-checkout query.
 * @export
 * @interface PreCheckoutQuery
 */
export interface PreCheckoutQuery {
    /**
     * Unique query identifier
     * @type {string}
     * @memberof PreCheckoutQuery
     */
    'id': string;
    /**
     * 
     * @type {User}
     * @memberof PreCheckoutQuery
     */
    'from': User;
    /**
     * Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code, or “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90)
     * @type {string}
     * @memberof PreCheckoutQuery
     */
    'currency': string;
    /**
     * Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
     * @type {number}
     * @memberof PreCheckoutQuery
     */
    'total_amount': number;
    /**
     * Bot-specified invoice payload
     * @type {string}
     * @memberof PreCheckoutQuery
     */
    'invoice_payload': string;
    /**
     * *Optional*. Identifier of the shipping option chosen by the user
     * @type {string}
     * @memberof PreCheckoutQuery
     */
    'shipping_option_id'?: string;
    /**
     * 
     * @type {OrderInfo}
     * @memberof PreCheckoutQuery
     */
    'order_info'?: OrderInfo;
}
/**
 * Describes an inline message to be sent by a user of a Mini App.
 * @export
 * @interface PreparedInlineMessage
 */
export interface PreparedInlineMessage {
    /**
     * Unique identifier of the prepared message
     * @type {string}
     * @memberof PreparedInlineMessage
     */
    'id': string;
    /**
     * Expiration date of the prepared message, in Unix time. Expired prepared messages can no longer be used
     * @type {number}
     * @memberof PreparedInlineMessage
     */
    'expiration_date': number;
}
/**
 * 
 * @export
 * @interface PromoteChatMemberPostRequest
 */
export interface PromoteChatMemberPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof PromoteChatMemberPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Unique identifier of the target user
     * @type {number}
     * @memberof PromoteChatMemberPostRequest
     */
    'user_id': number;
    /**
     * Pass *True* if the administrator\'s presence in the chat is hidden
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'is_anonymous'?: boolean;
    /**
     * Pass *True* if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_manage_chat'?: boolean;
    /**
     * Pass *True* if the administrator can delete messages of other users
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_delete_messages'?: boolean;
    /**
     * Pass *True* if the administrator can manage video chats
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_manage_video_chats'?: boolean;
    /**
     * Pass *True* if the administrator can restrict, ban or unban chat members, or access supergroup statistics
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_restrict_members'?: boolean;
    /**
     * Pass *True* if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by him)
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_promote_members'?: boolean;
    /**
     * Pass *True* if the administrator can change chat title, photo and other settings
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_change_info'?: boolean;
    /**
     * Pass *True* if the administrator can invite new users to the chat
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_invite_users'?: boolean;
    /**
     * Pass *True* if the administrator can post stories to the chat
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_post_stories'?: boolean;
    /**
     * Pass *True* if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat\'s story archive
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_edit_stories'?: boolean;
    /**
     * Pass *True* if the administrator can delete stories posted by other users
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_delete_stories'?: boolean;
    /**
     * Pass *True* if the administrator can post messages in the channel, or access channel statistics; for channels only
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_post_messages'?: boolean;
    /**
     * Pass *True* if the administrator can edit messages of other users and can pin messages; for channels only
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_edit_messages'?: boolean;
    /**
     * Pass *True* if the administrator can pin messages; for supergroups only
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_pin_messages'?: boolean;
    /**
     * Pass *True* if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only
     * @type {boolean}
     * @memberof PromoteChatMemberPostRequest
     */
    'can_manage_topics'?: boolean;
}
/**
 * This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
 * @export
 * @interface ProximityAlertTriggered
 */
export interface ProximityAlertTriggered {
    /**
     * 
     * @type {User}
     * @memberof ProximityAlertTriggered
     */
    'traveler': User;
    /**
     * 
     * @type {User}
     * @memberof ProximityAlertTriggered
     */
    'watcher': User;
    /**
     * The distance between the users
     * @type {number}
     * @memberof ProximityAlertTriggered
     */
    'distance': number;
}
/**
 * Represents a reaction added to a message along with the number of times it was added.
 * @export
 * @interface ReactionCount
 */
export interface ReactionCount {
    /**
     * 
     * @type {ReactionType}
     * @memberof ReactionCount
     */
    'type': ReactionType;
    /**
     * Number of times the reaction was added
     * @type {number}
     * @memberof ReactionCount
     */
    'total_count': number;
}
/**
 * @type ReactionType
 * This object describes the type of a reaction. Currently, it can be one of  * [ReactionTypeEmoji](https://core.telegram.org/bots/api/#reactiontypeemoji) * [ReactionTypeCustomEmoji](https://core.telegram.org/bots/api/#reactiontypecustomemoji) * [ReactionTypePaid](https://core.telegram.org/bots/api/#reactiontypepaid)
 * @export
 */
export type ReactionType = ReactionTypeCustomEmoji | ReactionTypeEmoji | ReactionTypePaid;

/**
 * The reaction is based on a custom emoji.
 * @export
 * @interface ReactionTypeCustomEmoji
 */
export interface ReactionTypeCustomEmoji {
    /**
     * Type of the reaction, always “custom\\_emoji”
     * @type {string}
     * @memberof ReactionTypeCustomEmoji
     */
    'type': string;
    /**
     * Custom emoji identifier
     * @type {string}
     * @memberof ReactionTypeCustomEmoji
     */
    'custom_emoji_id': string;
}
/**
 * The reaction is based on an emoji.
 * @export
 * @interface ReactionTypeEmoji
 */
export interface ReactionTypeEmoji {
    /**
     * Type of the reaction, always “emoji”
     * @type {string}
     * @memberof ReactionTypeEmoji
     */
    'type': string;
    /**
     * Reaction emoji. Currently, it can be one of \"❤\", \"👍\", \"👎\", \"🔥\", \"🥰\", \"👏\", \"😁\", \"🤔\", \"🤯\", \"😱\", \"🤬\", \"😢\", \"🎉\", \"🤩\", \"🤮\", \"💩\", \"🙏\", \"👌\", \"🕊\", \"🤡\", \"🥱\", \"🥴\", \"😍\", \"🐳\", \"❤‍🔥\", \"🌚\", \"🌭\", \"💯\", \"🤣\", \"⚡\", \"🍌\", \"🏆\", \"💔\", \"🤨\", \"😐\", \"🍓\", \"🍾\", \"💋\", \"🖕\", \"😈\", \"😴\", \"😭\", \"🤓\", \"👻\", \"👨‍💻\", \"👀\", \"🎃\", \"🙈\", \"😇\", \"😨\", \"🤝\", \"✍\", \"🤗\", \"🫡\", \"🎅\", \"🎄\", \"☃\", \"💅\", \"🤪\", \"🗿\", \"🆒\", \"💘\", \"🙉\", \"🦄\", \"😘\", \"💊\", \"🙊\", \"😎\", \"👾\", \"🤷‍♂\", \"🤷\", \"🤷‍♀\", \"😡\"
     * @type {string}
     * @memberof ReactionTypeEmoji
     */
    'emoji': ReactionTypeEmojiEmojiEnum;
}

export const ReactionTypeEmojiEmojiEnum = {
    : '❤',
    2: '👍',
    3: '👎',
    4: '🔥',
    5: '🥰',
    6: '👏',
    7: '😁',
    8: '🤔',
    9: '🤯',
    10: '😱',
    11: '🤬',
    12: '😢',
    13: '🎉',
    14: '🤩',
    15: '🤮',
    16: '💩',
    17: '🙏',
    18: '👌',
    19: '🕊',
    20: '🤡',
    21: '🥱',
    22: '🥴',
    23: '😍',
    24: '🐳',
    25: '❤‍🔥',
    26: '🌚',
    27: '🌭',
    28: '💯',
    29: '🤣',
    30: '⚡',
    31: '🍌',
    32: '🏆',
    33: '💔',
    34: '🤨',
    35: '😐',
    36: '🍓',
    37: '🍾',
    38: '💋',
    39: '🖕',
    40: '😈',
    41: '😴',
    42: '😭',
    43: '🤓',
    44: '👻',
    45: '👨‍💻',
    46: '👀',
    47: '🎃',
    48: '🙈',
    49: '😇',
    50: '😨',
    51: '🤝',
    52: '✍',
    53: '🤗',
    54: '🫡',
    55: '🎅',
    56: '🎄',
    57: '☃',
    58: '💅',
    59: '🤪',
    60: '🗿',
    61: '🆒',
    62: '💘',
    63: '🙉',
    64: '🦄',
    65: '😘',
    66: '💊',
    67: '🙊',
    68: '😎',
    69: '👾',
    70: '🤷‍♂',
    71: '🤷',
    72: '🤷‍♀',
    73: '😡'
} as const;

export type ReactionTypeEmojiEmojiEnum = typeof ReactionTypeEmojiEmojiEnum[keyof typeof ReactionTypeEmojiEmojiEnum];

/**
 * The reaction is paid.
 * @export
 * @interface ReactionTypePaid
 */
export interface ReactionTypePaid {
    /**
     * Type of the reaction, always “paid”
     * @type {string}
     * @memberof ReactionTypePaid
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ReadBusinessMessagePostRequest
 */
export interface ReadBusinessMessagePostRequest {
    /**
     * Unique identifier of the business connection on behalf of which to read the message
     * @type {string}
     * @memberof ReadBusinessMessagePostRequest
     */
    'business_connection_id': string;
    /**
     * Unique identifier of the chat in which the message was received. The chat must have been active in the last 24 hours.
     * @type {number}
     * @memberof ReadBusinessMessagePostRequest
     */
    'chat_id': number;
    /**
     * Unique identifier of the message to mark as read
     * @type {number}
     * @memberof ReadBusinessMessagePostRequest
     */
    'message_id': number;
}
/**
 * 
 * @export
 * @interface RefundStarPaymentPostRequest
 */
export interface RefundStarPaymentPostRequest {
    /**
     * Identifier of the user whose payment will be refunded
     * @type {number}
     * @memberof RefundStarPaymentPostRequest
     */
    'user_id': number;
    /**
     * Telegram payment identifier
     * @type {string}
     * @memberof RefundStarPaymentPostRequest
     */
    'telegram_payment_charge_id': string;
}
/**
 * This object contains basic information about a refunded payment.
 * @export
 * @interface RefundedPayment
 */
export interface RefundedPayment {
    /**
     * Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code, or “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90). Currently, always “XTR”
     * @type {string}
     * @memberof RefundedPayment
     */
    'currency': string;
    /**
     * Total refunded price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45`, `total_amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
     * @type {number}
     * @memberof RefundedPayment
     */
    'total_amount': number;
    /**
     * Bot-specified invoice payload
     * @type {string}
     * @memberof RefundedPayment
     */
    'invoice_payload': string;
    /**
     * Telegram payment identifier
     * @type {string}
     * @memberof RefundedPayment
     */
    'telegram_payment_charge_id': string;
    /**
     * *Optional*. Provider payment identifier
     * @type {string}
     * @memberof RefundedPayment
     */
    'provider_payment_charge_id'?: string;
}
/**
 * 
 * @export
 * @interface RemoveBusinessAccountProfilePhotoPostRequest
 */
export interface RemoveBusinessAccountProfilePhotoPostRequest {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof RemoveBusinessAccountProfilePhotoPostRequest
     */
    'business_connection_id': string;
    /**
     * Pass True to remove the public photo, which is visible even if the main photo is hidden by the business account\'s privacy settings. After the main photo is removed, the previous profile photo (if present) becomes the main photo.
     * @type {boolean}
     * @memberof RemoveBusinessAccountProfilePhotoPostRequest
     */
    'is_public'?: boolean;
}
/**
 * 
 * @export
 * @interface RemoveUserVerificationPostRequest
 */
export interface RemoveUserVerificationPostRequest {
    /**
     * Unique identifier of the target user
     * @type {number}
     * @memberof RemoveUserVerificationPostRequest
     */
    'user_id': number;
}
/**
 * This object represents a [custom keyboard](https://core.telegram.org/bots/features#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots/features#keyboards) for details and examples). Not supported in channels and for messages sent on behalf of a Telegram Business account.
 * @export
 * @interface ReplyKeyboardMarkup
 */
export interface ReplyKeyboardMarkup {
    /**
     * Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects
     * @type {Array<Array<KeyboardButton>>}
     * @memberof ReplyKeyboardMarkup
     */
    'keyboard': Array<Array<KeyboardButton>>;
    /**
     * *Optional*. Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to *false*, in which case the custom keyboard can be hidden and opened with a keyboard icon.
     * @type {boolean}
     * @memberof ReplyKeyboardMarkup
     */
    'is_persistent'?: boolean;
    /**
     * *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app\'s standard keyboard.
     * @type {boolean}
     * @memberof ReplyKeyboardMarkup
     */
    'resize_keyboard'?: boolean;
    /**
     * *Optional*. Requests clients to hide the keyboard as soon as it\'s been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.
     * @type {boolean}
     * @memberof ReplyKeyboardMarkup
     */
    'one_time_keyboard'?: boolean;
    /**
     * *Optional*. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters
     * @type {string}
     * @memberof ReplyKeyboardMarkup
     */
    'input_field_placeholder'?: string;
    /**
     * *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot\'s message is a reply to a message in the same chat and forum topic, sender of the original message.    *Example:* A user requests to change the bot\'s language, bot replies to the request with a keyboard to select the new language. Other users in the group don\'t see the keyboard.
     * @type {boolean}
     * @memberof ReplyKeyboardMarkup
     */
    'selective'?: boolean;
}
/**
 * Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)). Not supported in channels and for messages sent on behalf of a Telegram Business account.
 * @export
 * @interface ReplyKeyboardRemove
 */
export interface ReplyKeyboardRemove {
    /**
     * Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\\_time\\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))
     * @type {boolean}
     * @memberof ReplyKeyboardRemove
     */
    'remove_keyboard': boolean;
    /**
     * *Optional*. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot\'s message is a reply to a message in the same chat and forum topic, sender of the original message.    *Example:* A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven\'t voted yet.
     * @type {boolean}
     * @memberof ReplyKeyboardRemove
     */
    'selective'?: boolean;
}
/**
 * Describes reply parameters for the message that is being sent.
 * @export
 * @interface ReplyParameters
 */
export interface ReplyParameters {
    /**
     * Identifier of the message that will be replied to in the current chat, or in the chat *chat\\_id* if it is specified
     * @type {number}
     * @memberof ReplyParameters
     */
    'message_id': number;
    /**
     * 
     * @type {ReplyParametersChatId}
     * @memberof ReplyParameters
     */
    'chat_id'?: ReplyParametersChatId;
    /**
     * *Optional*. Pass *True* if the message should be sent even if the specified message to be replied to is not found. Always *False* for replies in another chat or forum topic. Always *True* for messages sent on behalf of a business account.
     * @type {boolean}
     * @memberof ReplyParameters
     */
    'allow_sending_without_reply'?: boolean;
    /**
     * *Optional*. Quoted part of the message to be replied to; 0-1024 characters after entities parsing. The quote must be an exact substring of the message to be replied to, including *bold*, *italic*, *underline*, *strikethrough*, *spoiler*, and *custom\\_emoji* entities. The message will fail to send if the quote isn\'t found in the original message.
     * @type {string}
     * @memberof ReplyParameters
     */
    'quote'?: string;
    /**
     * *Optional*. Mode for parsing entities in the quote. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof ReplyParameters
     */
    'quote_parse_mode'?: string;
    /**
     * *Optional*. A JSON-serialized list of special entities that appear in the quote. It can be specified instead of *quote\\_parse\\_mode*.
     * @type {Array<MessageEntity>}
     * @memberof ReplyParameters
     */
    'quote_entities'?: Array<MessageEntity>;
    /**
     * *Optional*. Position of the quote in the original message in UTF-16 code units
     * @type {number}
     * @memberof ReplyParameters
     */
    'quote_position'?: number;
}
/**
 * @type ReplyParametersChatId
 * *Optional*. If the message to be replied to is from a different chat, unique identifier for the chat or username of the channel (in the format `@channelusername`). Not supported for messages sent on behalf of a business account.
 * @export
 */
export type ReplyParametersChatId = number | string;

/**
 * Describes why a request was unsuccessful.
 * @export
 * @interface ResponseParameters
 */
export interface ResponseParameters {
    /**
     * *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
     * @type {number}
     * @memberof ResponseParameters
     */
    'migrate_to_chat_id'?: number;
    /**
     * *Optional*. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated
     * @type {number}
     * @memberof ResponseParameters
     */
    'retry_after'?: number;
}
/**
 * 
 * @export
 * @interface RestrictChatMemberPostRequest
 */
export interface RestrictChatMemberPostRequest {
    /**
     * 
     * @type {RestrictChatMemberPostRequestChatId}
     * @memberof RestrictChatMemberPostRequest
     */
    'chat_id': RestrictChatMemberPostRequestChatId;
    /**
     * Unique identifier of the target user
     * @type {number}
     * @memberof RestrictChatMemberPostRequest
     */
    'user_id': number;
    /**
     * 
     * @type {ChatPermissions}
     * @memberof RestrictChatMemberPostRequest
     */
    'permissions': ChatPermissions;
    /**
     * Pass *True* if chat permissions are set independently. Otherwise, the *can\\_send\\_other\\_messages* and *can\\_add\\_web\\_page\\_previews* permissions will imply the *can\\_send\\_messages*, *can\\_send\\_audios*, *can\\_send\\_documents*, *can\\_send\\_photos*, *can\\_send\\_videos*, *can\\_send\\_video\\_notes*, and *can\\_send\\_voice\\_notes* permissions; the *can\\_send\\_polls* permission will imply the *can\\_send\\_messages* permission.
     * @type {boolean}
     * @memberof RestrictChatMemberPostRequest
     */
    'use_independent_chat_permissions'?: boolean;
    /**
     * Date when restrictions will be lifted for the user; Unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
     * @type {number}
     * @memberof RestrictChatMemberPostRequest
     */
    'until_date'?: number;
}
/**
 * @type RestrictChatMemberPostRequestChatId
 * Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
 * @export
 */
export type RestrictChatMemberPostRequestChatId = number | string;

/**
 * @type RevenueWithdrawalState
 * This object describes the state of a revenue withdrawal operation. Currently, it can be one of  * [RevenueWithdrawalStatePending](https://core.telegram.org/bots/api/#revenuewithdrawalstatepending) * [RevenueWithdrawalStateSucceeded](https://core.telegram.org/bots/api/#revenuewithdrawalstatesucceeded) * [RevenueWithdrawalStateFailed](https://core.telegram.org/bots/api/#revenuewithdrawalstatefailed)
 * @export
 */
export type RevenueWithdrawalState = RevenueWithdrawalStateFailed | RevenueWithdrawalStatePending | RevenueWithdrawalStateSucceeded;

/**
 * The withdrawal failed and the transaction was refunded.
 * @export
 * @interface RevenueWithdrawalStateFailed
 */
export interface RevenueWithdrawalStateFailed {
    /**
     * Type of the state, always “failed”
     * @type {string}
     * @memberof RevenueWithdrawalStateFailed
     */
    'type': string;
}
/**
 * The withdrawal is in progress.
 * @export
 * @interface RevenueWithdrawalStatePending
 */
export interface RevenueWithdrawalStatePending {
    /**
     * Type of the state, always “pending”
     * @type {string}
     * @memberof RevenueWithdrawalStatePending
     */
    'type': string;
}
/**
 * The withdrawal succeeded.
 * @export
 * @interface RevenueWithdrawalStateSucceeded
 */
export interface RevenueWithdrawalStateSucceeded {
    /**
     * Type of the state, always “succeeded”
     * @type {string}
     * @memberof RevenueWithdrawalStateSucceeded
     */
    'type': string;
    /**
     * Date the withdrawal was completed in Unix time
     * @type {number}
     * @memberof RevenueWithdrawalStateSucceeded
     */
    'date': number;
    /**
     * An HTTPS URL that can be used to see transaction details
     * @type {string}
     * @memberof RevenueWithdrawalStateSucceeded
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface RevokeChatInviteLinkPostRequest
 */
export interface RevokeChatInviteLinkPostRequest {
    /**
     * 
     * @type {RevokeChatInviteLinkPostRequestChatId}
     * @memberof RevokeChatInviteLinkPostRequest
     */
    'chat_id': RevokeChatInviteLinkPostRequestChatId;
    /**
     * The invite link to revoke
     * @type {string}
     * @memberof RevokeChatInviteLinkPostRequest
     */
    'invite_link': string;
}
/**
 * @type RevokeChatInviteLinkPostRequestChatId
 * Unique identifier of the target chat or username of the target channel (in the format `@channelusername`)
 * @export
 */
export type RevokeChatInviteLinkPostRequestChatId = number | string;

/**
 * 
 * @export
 * @interface SavePreparedInlineMessagePost200Response
 */
export interface SavePreparedInlineMessagePost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof SavePreparedInlineMessagePost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {PreparedInlineMessage}
     * @memberof SavePreparedInlineMessagePost200Response
     */
    'result': PreparedInlineMessage;
}
/**
 * 
 * @export
 * @interface SavePreparedInlineMessagePostRequest
 */
export interface SavePreparedInlineMessagePostRequest {
    /**
     * Unique identifier of the target user that can use the prepared message
     * @type {number}
     * @memberof SavePreparedInlineMessagePostRequest
     */
    'user_id': number;
    /**
     * 
     * @type {InlineQueryResult}
     * @memberof SavePreparedInlineMessagePostRequest
     */
    'result': InlineQueryResult;
    /**
     * Pass *True* if the message can be sent to private chats with users
     * @type {boolean}
     * @memberof SavePreparedInlineMessagePostRequest
     */
    'allow_user_chats'?: boolean;
    /**
     * Pass *True* if the message can be sent to private chats with bots
     * @type {boolean}
     * @memberof SavePreparedInlineMessagePostRequest
     */
    'allow_bot_chats'?: boolean;
    /**
     * Pass *True* if the message can be sent to group and supergroup chats
     * @type {boolean}
     * @memberof SavePreparedInlineMessagePostRequest
     */
    'allow_group_chats'?: boolean;
    /**
     * Pass *True* if the message can be sent to channel chats
     * @type {boolean}
     * @memberof SavePreparedInlineMessagePostRequest
     */
    'allow_channel_chats'?: boolean;
}
/**
 * @type SendAnimationPostRequestAnimation
 * Animation to send. Pass a file\\_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
 * @export
 */
export type SendAnimationPostRequestAnimation = any | string;

/**
 * @type SendAudioPostRequestAudio
 * Audio file to send. Pass a file\\_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
 * @export
 */
export type SendAudioPostRequestAudio = any | string;

/**
 * @type SendAudioPostRequestThumbnail
 * Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail\'s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can\'t be reused and can be only uploaded as a new file, so you can pass “attach://\\<file\\_attach\\_name\\>” if the thumbnail was uploaded using multipart/form-data under \\<file\\_attach\\_name\\>. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
 * @export
 */
export type SendAudioPostRequestThumbnail = any | string;

/**
 * 
 * @export
 * @interface SendChatActionPostRequest
 */
export interface SendChatActionPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof SendChatActionPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\\_video* or *upload\\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\\_voice* or *upload\\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *choose\\_sticker* for [stickers](https://core.telegram.org/bots/api/#sendsticker), *find\\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\\_video\\_note* or *upload\\_video\\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
     * @type {string}
     * @memberof SendChatActionPostRequest
     */
    'action': SendChatActionPostRequestActionEnum;
    /**
     * Unique identifier of the business connection on behalf of which the action will be sent
     * @type {string}
     * @memberof SendChatActionPostRequest
     */
    'business_connection_id'?: string;
    /**
     * Unique identifier for the target message thread; for supergroups only
     * @type {number}
     * @memberof SendChatActionPostRequest
     */
    'message_thread_id'?: number;
}

export const SendChatActionPostRequestActionEnum = {
    Typing: 'typing',
    UploadPhoto: 'upload_photo',
    RecordVideo: 'record_video',
    UploadVideo: 'upload_video',
    RecordVoice: 'record_voice',
    UploadVoice: 'upload_voice',
    UploadDocument: 'upload_document',
    ChooseSticker: 'choose_sticker',
    FindLocation: 'find_location',
    RecordVideoNote: 'record_video_note',
    UploadVideoNote: 'upload_video_note'
} as const;

export type SendChatActionPostRequestActionEnum = typeof SendChatActionPostRequestActionEnum[keyof typeof SendChatActionPostRequestActionEnum];

/**
 * 
 * @export
 * @interface SendContactPostRequest
 */
export interface SendContactPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof SendContactPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Contact\'s phone number
     * @type {string}
     * @memberof SendContactPostRequest
     */
    'phone_number': string;
    /**
     * Contact\'s first name
     * @type {string}
     * @memberof SendContactPostRequest
     */
    'first_name': string;
    /**
     * Unique identifier of the business connection on behalf of which the message will be sent
     * @type {string}
     * @memberof SendContactPostRequest
     */
    'business_connection_id'?: string;
    /**
     * Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @type {number}
     * @memberof SendContactPostRequest
     */
    'message_thread_id'?: number;
    /**
     * Contact\'s last name
     * @type {string}
     * @memberof SendContactPostRequest
     */
    'last_name'?: string;
    /**
     * Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
     * @type {string}
     * @memberof SendContactPostRequest
     */
    'vcard'?: string;
    /**
     * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @type {boolean}
     * @memberof SendContactPostRequest
     */
    'disable_notification'?: boolean;
    /**
     * Protects the contents of the sent message from forwarding and saving
     * @type {boolean}
     * @memberof SendContactPostRequest
     */
    'protect_content'?: boolean;
    /**
     * Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\'s balance
     * @type {boolean}
     * @memberof SendContactPostRequest
     */
    'allow_paid_broadcast'?: boolean;
    /**
     * Unique identifier of the message effect to be added to the message; for private chats only
     * @type {string}
     * @memberof SendContactPostRequest
     */
    'message_effect_id'?: string;
    /**
     * 
     * @type {ReplyParameters}
     * @memberof SendContactPostRequest
     */
    'reply_parameters'?: ReplyParameters;
    /**
     * 
     * @type {SendMessagePostRequestReplyMarkup}
     * @memberof SendContactPostRequest
     */
    'reply_markup'?: SendMessagePostRequestReplyMarkup;
}
/**
 * 
 * @export
 * @interface SendDicePostRequest
 */
export interface SendDicePostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof SendDicePostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Unique identifier of the business connection on behalf of which the message will be sent
     * @type {string}
     * @memberof SendDicePostRequest
     */
    'business_connection_id'?: string;
    /**
     * Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @type {number}
     * @memberof SendDicePostRequest
     */
    'message_thread_id'?: number;
    /**
     * Emoji on which the dice throw animation is based. Currently, must be one of “🎲”, “🎯”, “🏀”, “⚽”, “🎳”, or “🎰”. Dice can have values 1-6 for “🎲”, “🎯” and “🎳”, values 1-5 for “🏀” and “⚽”, and values 1-64 for “🎰”. Defaults to “🎲”
     * @type {string}
     * @memberof SendDicePostRequest
     */
    'emoji'?: SendDicePostRequestEmojiEnum;
    /**
     * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @type {boolean}
     * @memberof SendDicePostRequest
     */
    'disable_notification'?: boolean;
    /**
     * Protects the contents of the sent message from forwarding
     * @type {boolean}
     * @memberof SendDicePostRequest
     */
    'protect_content'?: boolean;
    /**
     * Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\'s balance
     * @type {boolean}
     * @memberof SendDicePostRequest
     */
    'allow_paid_broadcast'?: boolean;
    /**
     * Unique identifier of the message effect to be added to the message; for private chats only
     * @type {string}
     * @memberof SendDicePostRequest
     */
    'message_effect_id'?: string;
    /**
     * 
     * @type {ReplyParameters}
     * @memberof SendDicePostRequest
     */
    'reply_parameters'?: ReplyParameters;
    /**
     * 
     * @type {SendMessagePostRequestReplyMarkup}
     * @memberof SendDicePostRequest
     */
    'reply_markup'?: SendMessagePostRequestReplyMarkup;
}

export const SendDicePostRequestEmojiEnum = {
    : '🎲',
    2: '🎯',
    3: '🏀',
    4: '⚽',
    5: '🎳',
    6: '🎰'
} as const;

export type SendDicePostRequestEmojiEnum = typeof SendDicePostRequestEmojiEnum[keyof typeof SendDicePostRequestEmojiEnum];

/**
 * @type SendDocumentPostRequestDocument
 * File to send. Pass a file\\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
 * @export
 */
export type SendDocumentPostRequestDocument = any | string;

/**
 * 
 * @export
 * @interface SendGamePostRequest
 */
export interface SendGamePostRequest {
    /**
     * Unique identifier for the target chat
     * @type {number}
     * @memberof SendGamePostRequest
     */
    'chat_id': number;
    /**
     * Short name of the game, serves as the unique identifier for the game. Set up your games via [@BotFather](https://t.me/botfather).
     * @type {string}
     * @memberof SendGamePostRequest
     */
    'game_short_name': string;
    /**
     * Unique identifier of the business connection on behalf of which the message will be sent
     * @type {string}
     * @memberof SendGamePostRequest
     */
    'business_connection_id'?: string;
    /**
     * Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @type {number}
     * @memberof SendGamePostRequest
     */
    'message_thread_id'?: number;
    /**
     * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @type {boolean}
     * @memberof SendGamePostRequest
     */
    'disable_notification'?: boolean;
    /**
     * Protects the contents of the sent message from forwarding and saving
     * @type {boolean}
     * @memberof SendGamePostRequest
     */
    'protect_content'?: boolean;
    /**
     * Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\'s balance
     * @type {boolean}
     * @memberof SendGamePostRequest
     */
    'allow_paid_broadcast'?: boolean;
    /**
     * Unique identifier of the message effect to be added to the message; for private chats only
     * @type {string}
     * @memberof SendGamePostRequest
     */
    'message_effect_id'?: string;
    /**
     * 
     * @type {ReplyParameters}
     * @memberof SendGamePostRequest
     */
    'reply_parameters'?: ReplyParameters;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof SendGamePostRequest
     */
    'reply_markup'?: InlineKeyboardMarkup;
}
/**
 * 
 * @export
 * @interface SendGiftPostRequest
 */
export interface SendGiftPostRequest {
    /**
     * Identifier of the gift
     * @type {string}
     * @memberof SendGiftPostRequest
     */
    'gift_id': string;
    /**
     * Required if *chat\\_id* is not specified. Unique identifier of the target user who will receive the gift.
     * @type {number}
     * @memberof SendGiftPostRequest
     */
    'user_id'?: number;
    /**
     * 
     * @type {SendGiftPostRequestChatId}
     * @memberof SendGiftPostRequest
     */
    'chat_id'?: SendGiftPostRequestChatId;
    /**
     * Pass *True* to pay for the gift upgrade from the bot\'s balance, thereby making the upgrade free for the receiver
     * @type {boolean}
     * @memberof SendGiftPostRequest
     */
    'pay_for_upgrade'?: boolean;
    /**
     * Text that will be shown along with the gift; 0-128 characters
     * @type {string}
     * @memberof SendGiftPostRequest
     */
    'text'?: string;
    /**
     * Mode for parsing entities in the text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\_emoji” are ignored.
     * @type {string}
     * @memberof SendGiftPostRequest
     */
    'text_parse_mode'?: string;
    /**
     * A JSON-serialized list of special entities that appear in the gift text. It can be specified instead of *text\\_parse\\_mode*. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\_emoji” are ignored.
     * @type {Array<MessageEntity>}
     * @memberof SendGiftPostRequest
     */
    'text_entities'?: Array<MessageEntity>;
}
/**
 * @type SendGiftPostRequestChatId
 * Required if *user\\_id* is not specified. Unique identifier for the chat or username of the channel (in the format `@channelusername`) that will receive the gift.
 * @export
 */
export type SendGiftPostRequestChatId = number | string;

/**
 * 
 * @export
 * @interface SendInvoicePostRequest
 */
export interface SendInvoicePostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof SendInvoicePostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Product name, 1-32 characters
     * @type {string}
     * @memberof SendInvoicePostRequest
     */
    'title': string;
    /**
     * Product description, 1-255 characters
     * @type {string}
     * @memberof SendInvoicePostRequest
     */
    'description': string;
    /**
     * Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.
     * @type {string}
     * @memberof SendInvoicePostRequest
     */
    'payload': string;
    /**
     * Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies). Pass “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {string}
     * @memberof SendInvoicePostRequest
     */
    'currency': string;
    /**
     * Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {Array<LabeledPrice>}
     * @memberof SendInvoicePostRequest
     */
    'prices': Array<LabeledPrice>;
    /**
     * Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @type {number}
     * @memberof SendInvoicePostRequest
     */
    'message_thread_id'?: number;
    /**
     * Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an empty string for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {string}
     * @memberof SendInvoicePostRequest
     */
    'provider_token'?: string;
    /**
     * The maximum accepted amount for tips in the *smallest units* of the currency (integer, **not** float/double). For example, for a maximum tip of `US$ 1.45` pass `max_tip_amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {number}
     * @memberof SendInvoicePostRequest
     */
    'max_tip_amount'?: number;
    /**
     * A JSON-serialized array of suggested amounts of tips in the *smallest units* of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed *max\\_tip\\_amount*.
     * @type {Array<number>}
     * @memberof SendInvoicePostRequest
     */
    'suggested_tip_amounts'?: Array<number>;
    /**
     * Unique deep-linking parameter. If left empty, **forwarded copies** of the sent message will have a *Pay* button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a *URL* button with a deep link to the bot (instead of a *Pay* button), with the value used as the start parameter
     * @type {string}
     * @memberof SendInvoicePostRequest
     */
    'start_parameter'?: string;
    /**
     * JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
     * @type {string}
     * @memberof SendInvoicePostRequest
     */
    'provider_data'?: string;
    /**
     * URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
     * @type {string}
     * @memberof SendInvoicePostRequest
     */
    'photo_url'?: string;
    /**
     * Photo size in bytes
     * @type {number}
     * @memberof SendInvoicePostRequest
     */
    'photo_size'?: number;
    /**
     * Photo width
     * @type {number}
     * @memberof SendInvoicePostRequest
     */
    'photo_width'?: number;
    /**
     * Photo height
     * @type {number}
     * @memberof SendInvoicePostRequest
     */
    'photo_height'?: number;
    /**
     * Pass *True* if you require the user\'s full name to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof SendInvoicePostRequest
     */
    'need_name'?: boolean;
    /**
     * Pass *True* if you require the user\'s phone number to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof SendInvoicePostRequest
     */
    'need_phone_number'?: boolean;
    /**
     * Pass *True* if you require the user\'s email address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof SendInvoicePostRequest
     */
    'need_email'?: boolean;
    /**
     * Pass *True* if you require the user\'s shipping address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof SendInvoicePostRequest
     */
    'need_shipping_address'?: boolean;
    /**
     * Pass *True* if the user\'s phone number should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof SendInvoicePostRequest
     */
    'send_phone_number_to_provider'?: boolean;
    /**
     * Pass *True* if the user\'s email address should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof SendInvoicePostRequest
     */
    'send_email_to_provider'?: boolean;
    /**
     * Pass *True* if the final price depends on the shipping method. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @type {boolean}
     * @memberof SendInvoicePostRequest
     */
    'is_flexible'?: boolean;
    /**
     * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @type {boolean}
     * @memberof SendInvoicePostRequest
     */
    'disable_notification'?: boolean;
    /**
     * Protects the contents of the sent message from forwarding and saving
     * @type {boolean}
     * @memberof SendInvoicePostRequest
     */
    'protect_content'?: boolean;
    /**
     * Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\'s balance
     * @type {boolean}
     * @memberof SendInvoicePostRequest
     */
    'allow_paid_broadcast'?: boolean;
    /**
     * Unique identifier of the message effect to be added to the message; for private chats only
     * @type {string}
     * @memberof SendInvoicePostRequest
     */
    'message_effect_id'?: string;
    /**
     * 
     * @type {ReplyParameters}
     * @memberof SendInvoicePostRequest
     */
    'reply_parameters'?: ReplyParameters;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof SendInvoicePostRequest
     */
    'reply_markup'?: InlineKeyboardMarkup;
}
/**
 * 
 * @export
 * @interface SendLocationPostRequest
 */
export interface SendLocationPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof SendLocationPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Latitude of the location
     * @type {number}
     * @memberof SendLocationPostRequest
     */
    'latitude': number;
    /**
     * Longitude of the location
     * @type {number}
     * @memberof SendLocationPostRequest
     */
    'longitude': number;
    /**
     * Unique identifier of the business connection on behalf of which the message will be sent
     * @type {string}
     * @memberof SendLocationPostRequest
     */
    'business_connection_id'?: string;
    /**
     * Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @type {number}
     * @memberof SendLocationPostRequest
     */
    'message_thread_id'?: number;
    /**
     * The radius of uncertainty for the location, measured in meters; 0-1500
     * @type {number}
     * @memberof SendLocationPostRequest
     */
    'horizontal_accuracy'?: number;
    /**
     * Period in seconds during which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.
     * @type {number}
     * @memberof SendLocationPostRequest
     */
    'live_period'?: number;
    /**
     * For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
     * @type {number}
     * @memberof SendLocationPostRequest
     */
    'heading'?: number;
    /**
     * For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
     * @type {number}
     * @memberof SendLocationPostRequest
     */
    'proximity_alert_radius'?: number;
    /**
     * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @type {boolean}
     * @memberof SendLocationPostRequest
     */
    'disable_notification'?: boolean;
    /**
     * Protects the contents of the sent message from forwarding and saving
     * @type {boolean}
     * @memberof SendLocationPostRequest
     */
    'protect_content'?: boolean;
    /**
     * Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\'s balance
     * @type {boolean}
     * @memberof SendLocationPostRequest
     */
    'allow_paid_broadcast'?: boolean;
    /**
     * Unique identifier of the message effect to be added to the message; for private chats only
     * @type {string}
     * @memberof SendLocationPostRequest
     */
    'message_effect_id'?: string;
    /**
     * 
     * @type {ReplyParameters}
     * @memberof SendLocationPostRequest
     */
    'reply_parameters'?: ReplyParameters;
    /**
     * 
     * @type {SendMessagePostRequestReplyMarkup}
     * @memberof SendLocationPostRequest
     */
    'reply_markup'?: SendMessagePostRequestReplyMarkup;
}
/**
 * 
 * @export
 * @interface SendMediaGroupPost200Response
 */
export interface SendMediaGroupPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof SendMediaGroupPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {Array<Message>}
     * @memberof SendMediaGroupPost200Response
     */
    'result': Array<Message>;
}
/**
 * @type SendMediaGroupPostRequestMediaInner
 * @export
 */
export type SendMediaGroupPostRequestMediaInner = InputMediaAudio | InputMediaDocument | InputMediaPhoto | InputMediaVideo;

/**
 * 
 * @export
 * @interface SendMessagePost200Response
 */
export interface SendMessagePost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof SendMessagePost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {Message}
     * @memberof SendMessagePost200Response
     */
    'result': Message;
}
/**
 * 
 * @export
 * @interface SendMessagePostRequest
 */
export interface SendMessagePostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof SendMessagePostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Text of the message to be sent, 1-4096 characters after entities parsing
     * @type {string}
     * @memberof SendMessagePostRequest
     */
    'text': string;
    /**
     * Unique identifier of the business connection on behalf of which the message will be sent
     * @type {string}
     * @memberof SendMessagePostRequest
     */
    'business_connection_id'?: string;
    /**
     * Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @type {number}
     * @memberof SendMessagePostRequest
     */
    'message_thread_id'?: number;
    /**
     * Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof SendMessagePostRequest
     */
    'parse_mode'?: string;
    /**
     * A JSON-serialized list of special entities that appear in message text, which can be specified instead of *parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof SendMessagePostRequest
     */
    'entities'?: Array<MessageEntity>;
    /**
     * 
     * @type {LinkPreviewOptions}
     * @memberof SendMessagePostRequest
     */
    'link_preview_options'?: LinkPreviewOptions;
    /**
     * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @type {boolean}
     * @memberof SendMessagePostRequest
     */
    'disable_notification'?: boolean;
    /**
     * Protects the contents of the sent message from forwarding and saving
     * @type {boolean}
     * @memberof SendMessagePostRequest
     */
    'protect_content'?: boolean;
    /**
     * Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\'s balance
     * @type {boolean}
     * @memberof SendMessagePostRequest
     */
    'allow_paid_broadcast'?: boolean;
    /**
     * Unique identifier of the message effect to be added to the message; for private chats only
     * @type {string}
     * @memberof SendMessagePostRequest
     */
    'message_effect_id'?: string;
    /**
     * 
     * @type {ReplyParameters}
     * @memberof SendMessagePostRequest
     */
    'reply_parameters'?: ReplyParameters;
    /**
     * 
     * @type {SendMessagePostRequestReplyMarkup}
     * @memberof SendMessagePostRequest
     */
    'reply_markup'?: SendMessagePostRequestReplyMarkup;
}
/**
 * @type SendMessagePostRequestChatId
 * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
 * @export
 */
export type SendMessagePostRequestChatId = number | string;

/**
 * @type SendMessagePostRequestReplyMarkup
 * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots/features#inline-keyboards), [custom reply keyboard](https://core.telegram.org/bots/features#keyboards), instructions to remove a reply keyboard or to force a reply from the user
 * @export
 */
export type SendMessagePostRequestReplyMarkup = ForceReply | InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove;

/**
 * @type SendPaidMediaPostRequestChatId
 * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`). If the chat is a channel, all Telegram Star proceeds from this media will be credited to the chat\'s balance. Otherwise, they will be credited to the bot\'s balance.
 * @export
 */
export type SendPaidMediaPostRequestChatId = number | string;

/**
 * @type SendPhotoPostRequestPhoto
 * Photo to send. Pass a file\\_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo\'s width and height must not exceed 10000 in total. Width and height ratio must be at most 20. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
 * @export
 */
export type SendPhotoPostRequestPhoto = any | string;

/**
 * 
 * @export
 * @interface SendPollPostRequest
 */
export interface SendPollPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof SendPollPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Poll question, 1-300 characters
     * @type {string}
     * @memberof SendPollPostRequest
     */
    'question': string;
    /**
     * A JSON-serialized list of 2-10 answer options
     * @type {Array<InputPollOption>}
     * @memberof SendPollPostRequest
     */
    'options': Array<InputPollOption>;
    /**
     * Unique identifier of the business connection on behalf of which the message will be sent
     * @type {string}
     * @memberof SendPollPostRequest
     */
    'business_connection_id'?: string;
    /**
     * Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @type {number}
     * @memberof SendPollPostRequest
     */
    'message_thread_id'?: number;
    /**
     * Mode for parsing entities in the question. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Currently, only custom emoji entities are allowed
     * @type {string}
     * @memberof SendPollPostRequest
     */
    'question_parse_mode'?: string;
    /**
     * A JSON-serialized list of special entities that appear in the poll question. It can be specified instead of *question\\_parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof SendPollPostRequest
     */
    'question_entities'?: Array<MessageEntity>;
    /**
     * *True*, if the poll needs to be anonymous, defaults to *True*
     * @type {boolean}
     * @memberof SendPollPostRequest
     */
    'is_anonymous'?: boolean;
    /**
     * Poll type, “quiz” or “regular”, defaults to “regular”
     * @type {string}
     * @memberof SendPollPostRequest
     */
    'type'?: SendPollPostRequestTypeEnum;
    /**
     * *True*, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
     * @type {boolean}
     * @memberof SendPollPostRequest
     */
    'allows_multiple_answers'?: boolean;
    /**
     * 0-based identifier of the correct answer option, required for polls in quiz mode
     * @type {number}
     * @memberof SendPollPostRequest
     */
    'correct_option_id'?: number;
    /**
     * Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
     * @type {string}
     * @memberof SendPollPostRequest
     */
    'explanation'?: string;
    /**
     * Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @type {string}
     * @memberof SendPollPostRequest
     */
    'explanation_parse_mode'?: string;
    /**
     * A JSON-serialized list of special entities that appear in the poll explanation. It can be specified instead of *explanation\\_parse\\_mode*
     * @type {Array<MessageEntity>}
     * @memberof SendPollPostRequest
     */
    'explanation_entities'?: Array<MessageEntity>;
    /**
     * Amount of time in seconds the poll will be active after creation, 5-600. Can\'t be used together with *close\\_date*.
     * @type {number}
     * @memberof SendPollPostRequest
     */
    'open_period'?: number;
    /**
     * Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can\'t be used together with *open\\_period*.
     * @type {number}
     * @memberof SendPollPostRequest
     */
    'close_date'?: number;
    /**
     * Pass *True* if the poll needs to be immediately closed. This can be useful for poll preview.
     * @type {boolean}
     * @memberof SendPollPostRequest
     */
    'is_closed'?: boolean;
    /**
     * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @type {boolean}
     * @memberof SendPollPostRequest
     */
    'disable_notification'?: boolean;
    /**
     * Protects the contents of the sent message from forwarding and saving
     * @type {boolean}
     * @memberof SendPollPostRequest
     */
    'protect_content'?: boolean;
    /**
     * Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\'s balance
     * @type {boolean}
     * @memberof SendPollPostRequest
     */
    'allow_paid_broadcast'?: boolean;
    /**
     * Unique identifier of the message effect to be added to the message; for private chats only
     * @type {string}
     * @memberof SendPollPostRequest
     */
    'message_effect_id'?: string;
    /**
     * 
     * @type {ReplyParameters}
     * @memberof SendPollPostRequest
     */
    'reply_parameters'?: ReplyParameters;
    /**
     * 
     * @type {SendMessagePostRequestReplyMarkup}
     * @memberof SendPollPostRequest
     */
    'reply_markup'?: SendMessagePostRequestReplyMarkup;
}

export const SendPollPostRequestTypeEnum = {
    Quiz: 'quiz',
    Regular: 'regular'
} as const;

export type SendPollPostRequestTypeEnum = typeof SendPollPostRequestTypeEnum[keyof typeof SendPollPostRequestTypeEnum];

/**
 * @type SendStickerPostRequestSticker
 * Sticker to send. Pass a file\\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP sticker from the Internet, or upload a new .WEBP, .TGS, or .WEBM sticker using multipart/form-data. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Video and animated stickers can\'t be sent via an HTTP URL.
 * @export
 */
export type SendStickerPostRequestSticker = any | string;

/**
 * 
 * @export
 * @interface SendVenuePostRequest
 */
export interface SendVenuePostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof SendVenuePostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Latitude of the venue
     * @type {number}
     * @memberof SendVenuePostRequest
     */
    'latitude': number;
    /**
     * Longitude of the venue
     * @type {number}
     * @memberof SendVenuePostRequest
     */
    'longitude': number;
    /**
     * Name of the venue
     * @type {string}
     * @memberof SendVenuePostRequest
     */
    'title': string;
    /**
     * Address of the venue
     * @type {string}
     * @memberof SendVenuePostRequest
     */
    'address': string;
    /**
     * Unique identifier of the business connection on behalf of which the message will be sent
     * @type {string}
     * @memberof SendVenuePostRequest
     */
    'business_connection_id'?: string;
    /**
     * Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @type {number}
     * @memberof SendVenuePostRequest
     */
    'message_thread_id'?: number;
    /**
     * Foursquare identifier of the venue
     * @type {string}
     * @memberof SendVenuePostRequest
     */
    'foursquare_id'?: string;
    /**
     * Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)
     * @type {string}
     * @memberof SendVenuePostRequest
     */
    'foursquare_type'?: string;
    /**
     * Google Places identifier of the venue
     * @type {string}
     * @memberof SendVenuePostRequest
     */
    'google_place_id'?: string;
    /**
     * Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
     * @type {string}
     * @memberof SendVenuePostRequest
     */
    'google_place_type'?: string;
    /**
     * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @type {boolean}
     * @memberof SendVenuePostRequest
     */
    'disable_notification'?: boolean;
    /**
     * Protects the contents of the sent message from forwarding and saving
     * @type {boolean}
     * @memberof SendVenuePostRequest
     */
    'protect_content'?: boolean;
    /**
     * Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\'s balance
     * @type {boolean}
     * @memberof SendVenuePostRequest
     */
    'allow_paid_broadcast'?: boolean;
    /**
     * Unique identifier of the message effect to be added to the message; for private chats only
     * @type {string}
     * @memberof SendVenuePostRequest
     */
    'message_effect_id'?: string;
    /**
     * 
     * @type {ReplyParameters}
     * @memberof SendVenuePostRequest
     */
    'reply_parameters'?: ReplyParameters;
    /**
     * 
     * @type {SendMessagePostRequestReplyMarkup}
     * @memberof SendVenuePostRequest
     */
    'reply_markup'?: SendMessagePostRequestReplyMarkup;
}
/**
 * @type SendVideoNotePostRequestVideoNote
 * Video note to send. Pass a file\\_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Sending video notes by a URL is currently unsupported
 * @export
 */
export type SendVideoNotePostRequestVideoNote = any | string;

/**
 * @type SendVideoPostRequestCover
 * Cover for the video in the message. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\\<file\\_attach\\_name\\>” to upload a new one using multipart/form-data under \\<file\\_attach\\_name\\> name. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
 * @export
 */
export type SendVideoPostRequestCover = any | string;

/**
 * @type SendVideoPostRequestVideo
 * Video to send. Pass a file\\_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
 * @export
 */
export type SendVideoPostRequestVideo = any | string;

/**
 * @type SendVoicePostRequestVoice
 * Audio file to send. Pass a file\\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
 * @export
 */
export type SendVoicePostRequestVoice = any | string;

/**
 * Describes an inline message sent by a [Web App](https://core.telegram.org/bots/webapps) on behalf of a user.
 * @export
 * @interface SentWebAppMessage
 */
export interface SentWebAppMessage {
    /**
     * *Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message.
     * @type {string}
     * @memberof SentWebAppMessage
     */
    'inline_message_id'?: string;
}
/**
 * 
 * @export
 * @interface SetBusinessAccountBioPostRequest
 */
export interface SetBusinessAccountBioPostRequest {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof SetBusinessAccountBioPostRequest
     */
    'business_connection_id': string;
    /**
     * The new value of the bio for the business account; 0-140 characters
     * @type {string}
     * @memberof SetBusinessAccountBioPostRequest
     */
    'bio'?: string;
}
/**
 * 
 * @export
 * @interface SetBusinessAccountGiftSettingsPostRequest
 */
export interface SetBusinessAccountGiftSettingsPostRequest {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof SetBusinessAccountGiftSettingsPostRequest
     */
    'business_connection_id': string;
    /**
     * Pass True, if a button for sending a gift to the user or by the business account must always be shown in the input field
     * @type {boolean}
     * @memberof SetBusinessAccountGiftSettingsPostRequest
     */
    'show_gift_button': boolean;
    /**
     * 
     * @type {AcceptedGiftTypes}
     * @memberof SetBusinessAccountGiftSettingsPostRequest
     */
    'accepted_gift_types': AcceptedGiftTypes;
}
/**
 * 
 * @export
 * @interface SetBusinessAccountNamePostRequest
 */
export interface SetBusinessAccountNamePostRequest {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof SetBusinessAccountNamePostRequest
     */
    'business_connection_id': string;
    /**
     * The new value of the first name for the business account; 1-64 characters
     * @type {string}
     * @memberof SetBusinessAccountNamePostRequest
     */
    'first_name': string;
    /**
     * The new value of the last name for the business account; 0-64 characters
     * @type {string}
     * @memberof SetBusinessAccountNamePostRequest
     */
    'last_name'?: string;
}
/**
 * 
 * @export
 * @interface SetBusinessAccountUsernamePostRequest
 */
export interface SetBusinessAccountUsernamePostRequest {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof SetBusinessAccountUsernamePostRequest
     */
    'business_connection_id': string;
    /**
     * The new value of the username for the business account; 0-32 characters
     * @type {string}
     * @memberof SetBusinessAccountUsernamePostRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface SetChatAdministratorCustomTitlePostRequest
 */
export interface SetChatAdministratorCustomTitlePostRequest {
    /**
     * 
     * @type {RestrictChatMemberPostRequestChatId}
     * @memberof SetChatAdministratorCustomTitlePostRequest
     */
    'chat_id': RestrictChatMemberPostRequestChatId;
    /**
     * Unique identifier of the target user
     * @type {number}
     * @memberof SetChatAdministratorCustomTitlePostRequest
     */
    'user_id': number;
    /**
     * New custom title for the administrator; 0-16 characters, emoji are not allowed
     * @type {string}
     * @memberof SetChatAdministratorCustomTitlePostRequest
     */
    'custom_title': string;
}
/**
 * 
 * @export
 * @interface SetChatDescriptionPostRequest
 */
export interface SetChatDescriptionPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof SetChatDescriptionPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * New chat description, 0-255 characters
     * @type {string}
     * @memberof SetChatDescriptionPostRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SetChatMenuButtonPostRequest
 */
export interface SetChatMenuButtonPostRequest {
    /**
     * Unique identifier for the target private chat. If not specified, default bot\'s menu button will be changed
     * @type {number}
     * @memberof SetChatMenuButtonPostRequest
     */
    'chat_id'?: number;
    /**
     * 
     * @type {MenuButton}
     * @memberof SetChatMenuButtonPostRequest
     */
    'menu_button'?: MenuButton;
}
/**
 * 
 * @export
 * @interface SetChatPermissionsPostRequest
 */
export interface SetChatPermissionsPostRequest {
    /**
     * 
     * @type {RestrictChatMemberPostRequestChatId}
     * @memberof SetChatPermissionsPostRequest
     */
    'chat_id': RestrictChatMemberPostRequestChatId;
    /**
     * 
     * @type {ChatPermissions}
     * @memberof SetChatPermissionsPostRequest
     */
    'permissions': ChatPermissions;
    /**
     * Pass *True* if chat permissions are set independently. Otherwise, the *can\\_send\\_other\\_messages* and *can\\_add\\_web\\_page\\_previews* permissions will imply the *can\\_send\\_messages*, *can\\_send\\_audios*, *can\\_send\\_documents*, *can\\_send\\_photos*, *can\\_send\\_videos*, *can\\_send\\_video\\_notes*, and *can\\_send\\_voice\\_notes* permissions; the *can\\_send\\_polls* permission will imply the *can\\_send\\_messages* permission.
     * @type {boolean}
     * @memberof SetChatPermissionsPostRequest
     */
    'use_independent_chat_permissions'?: boolean;
}
/**
 * 
 * @export
 * @interface SetChatStickerSetPostRequest
 */
export interface SetChatStickerSetPostRequest {
    /**
     * 
     * @type {RestrictChatMemberPostRequestChatId}
     * @memberof SetChatStickerSetPostRequest
     */
    'chat_id': RestrictChatMemberPostRequestChatId;
    /**
     * Name of the sticker set to be set as the group sticker set
     * @type {string}
     * @memberof SetChatStickerSetPostRequest
     */
    'sticker_set_name': string;
}
/**
 * 
 * @export
 * @interface SetChatTitlePostRequest
 */
export interface SetChatTitlePostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof SetChatTitlePostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * New chat title, 1-128 characters
     * @type {string}
     * @memberof SetChatTitlePostRequest
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface SetCustomEmojiStickerSetThumbnailPostRequest
 */
export interface SetCustomEmojiStickerSetThumbnailPostRequest {
    /**
     * Sticker set name
     * @type {string}
     * @memberof SetCustomEmojiStickerSetThumbnailPostRequest
     */
    'name': string;
    /**
     * Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the thumbnail and use the first sticker as the thumbnail.
     * @type {string}
     * @memberof SetCustomEmojiStickerSetThumbnailPostRequest
     */
    'custom_emoji_id'?: string;
}
/**
 * 
 * @export
 * @interface SetGameScorePostRequest
 */
export interface SetGameScorePostRequest {
    /**
     * User identifier
     * @type {number}
     * @memberof SetGameScorePostRequest
     */
    'user_id': number;
    /**
     * New score, must be non-negative
     * @type {number}
     * @memberof SetGameScorePostRequest
     */
    'score': number;
    /**
     * Pass *True* if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
     * @type {boolean}
     * @memberof SetGameScorePostRequest
     */
    'force'?: boolean;
    /**
     * Pass *True* if the game message should not be automatically edited to include the current scoreboard
     * @type {boolean}
     * @memberof SetGameScorePostRequest
     */
    'disable_edit_message'?: boolean;
    /**
     * Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat
     * @type {number}
     * @memberof SetGameScorePostRequest
     */
    'chat_id'?: number;
    /**
     * Required if *inline\\_message\\_id* is not specified. Identifier of the sent message
     * @type {number}
     * @memberof SetGameScorePostRequest
     */
    'message_id'?: number;
    /**
     * Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message
     * @type {string}
     * @memberof SetGameScorePostRequest
     */
    'inline_message_id'?: string;
}
/**
 * 
 * @export
 * @interface SetMessageReactionPostRequest
 */
export interface SetMessageReactionPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof SetMessageReactionPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Identifier of the target message. If the message belongs to a media group, the reaction is set to the first non-deleted message in the group instead.
     * @type {number}
     * @memberof SetMessageReactionPostRequest
     */
    'message_id': number;
    /**
     * A JSON-serialized list of reaction types to set on the message. Currently, as non-premium users, bots can set up to one reaction per message. A custom emoji reaction can be used if it is either already present on the message or explicitly allowed by chat administrators. Paid reactions can\'t be used by bots.
     * @type {Array<ReactionType>}
     * @memberof SetMessageReactionPostRequest
     */
    'reaction'?: Array<ReactionType>;
    /**
     * Pass *True* to set the reaction with a big animation
     * @type {boolean}
     * @memberof SetMessageReactionPostRequest
     */
    'is_big'?: boolean;
}
/**
 * 
 * @export
 * @interface SetMyCommandsPostRequest
 */
export interface SetMyCommandsPostRequest {
    /**
     * A JSON-serialized list of bot commands to be set as the list of the bot\'s commands. At most 100 commands can be specified.
     * @type {Array<BotCommand>}
     * @memberof SetMyCommandsPostRequest
     */
    'commands': Array<BotCommand>;
    /**
     * 
     * @type {BotCommandScope}
     * @memberof SetMyCommandsPostRequest
     */
    'scope'?: BotCommandScope;
    /**
     * A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
     * @type {string}
     * @memberof SetMyCommandsPostRequest
     */
    'language_code'?: string;
}
/**
 * 
 * @export
 * @interface SetMyDefaultAdministratorRightsPostRequest
 */
export interface SetMyDefaultAdministratorRightsPostRequest {
    /**
     * 
     * @type {ChatAdministratorRights}
     * @memberof SetMyDefaultAdministratorRightsPostRequest
     */
    'rights'?: ChatAdministratorRights;
    /**
     * Pass *True* to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed.
     * @type {boolean}
     * @memberof SetMyDefaultAdministratorRightsPostRequest
     */
    'for_channels'?: boolean;
}
/**
 * 
 * @export
 * @interface SetMyDescriptionPostRequest
 */
export interface SetMyDescriptionPostRequest {
    /**
     * New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language.
     * @type {string}
     * @memberof SetMyDescriptionPostRequest
     */
    'description'?: string;
    /**
     * A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for whose language there is no dedicated description.
     * @type {string}
     * @memberof SetMyDescriptionPostRequest
     */
    'language_code'?: string;
}
/**
 * 
 * @export
 * @interface SetMyNamePostRequest
 */
export interface SetMyNamePostRequest {
    /**
     * New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language.
     * @type {string}
     * @memberof SetMyNamePostRequest
     */
    'name'?: string;
    /**
     * A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language there is no dedicated name.
     * @type {string}
     * @memberof SetMyNamePostRequest
     */
    'language_code'?: string;
}
/**
 * 
 * @export
 * @interface SetMyShortDescriptionPostRequest
 */
export interface SetMyShortDescriptionPostRequest {
    /**
     * New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language.
     * @type {string}
     * @memberof SetMyShortDescriptionPostRequest
     */
    'short_description'?: string;
    /**
     * A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description.
     * @type {string}
     * @memberof SetMyShortDescriptionPostRequest
     */
    'language_code'?: string;
}
/**
 * 
 * @export
 * @interface SetPassportDataErrorsPostRequest
 */
export interface SetPassportDataErrorsPostRequest {
    /**
     * User identifier
     * @type {number}
     * @memberof SetPassportDataErrorsPostRequest
     */
    'user_id': number;
    /**
     * A JSON-serialized array describing the errors
     * @type {Array<PassportElementError>}
     * @memberof SetPassportDataErrorsPostRequest
     */
    'errors': Array<PassportElementError>;
}
/**
 * 
 * @export
 * @interface SetStickerEmojiListPostRequest
 */
export interface SetStickerEmojiListPostRequest {
    /**
     * File identifier of the sticker
     * @type {string}
     * @memberof SetStickerEmojiListPostRequest
     */
    'sticker': string;
    /**
     * A JSON-serialized list of 1-20 emoji associated with the sticker
     * @type {Array<string>}
     * @memberof SetStickerEmojiListPostRequest
     */
    'emoji_list': Array<string>;
}
/**
 * 
 * @export
 * @interface SetStickerKeywordsPostRequest
 */
export interface SetStickerKeywordsPostRequest {
    /**
     * File identifier of the sticker
     * @type {string}
     * @memberof SetStickerKeywordsPostRequest
     */
    'sticker': string;
    /**
     * A JSON-serialized list of 0-20 search keywords for the sticker with total length of up to 64 characters
     * @type {Array<string>}
     * @memberof SetStickerKeywordsPostRequest
     */
    'keywords'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SetStickerMaskPositionPostRequest
 */
export interface SetStickerMaskPositionPostRequest {
    /**
     * File identifier of the sticker
     * @type {string}
     * @memberof SetStickerMaskPositionPostRequest
     */
    'sticker': string;
    /**
     * 
     * @type {MaskPosition}
     * @memberof SetStickerMaskPositionPostRequest
     */
    'mask_position'?: MaskPosition;
}
/**
 * 
 * @export
 * @interface SetStickerPositionInSetPostRequest
 */
export interface SetStickerPositionInSetPostRequest {
    /**
     * File identifier of the sticker
     * @type {string}
     * @memberof SetStickerPositionInSetPostRequest
     */
    'sticker': string;
    /**
     * New sticker position in the set, zero-based
     * @type {number}
     * @memberof SetStickerPositionInSetPostRequest
     */
    'position': number;
}
/**
 * @type SetStickerSetThumbnailPostRequestThumbnail
 * A **.WEBP** or **.PNG** image with the thumbnail, must be up to 128 kilobytes in size and have a width and height of exactly 100px, or a **.TGS** animation with a thumbnail up to 32 kilobytes in size (see [https://core.telegram.org/stickers#animation-requirements](https://core.telegram.org/stickers#animation-requirements) for animated sticker technical requirements), or a **.WEBM** video with the thumbnail up to 32 kilobytes in size; see [https://core.telegram.org/stickers#video-requirements](https://core.telegram.org/stickers#video-requirements) for video sticker technical requirements. Pass a *file\\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More information on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Animated and video sticker set thumbnails can\'t be uploaded via HTTP URL. If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail.
 * @export
 */
export type SetStickerSetThumbnailPostRequestThumbnail = any | string;

/**
 * 
 * @export
 * @interface SetStickerSetTitlePostRequest
 */
export interface SetStickerSetTitlePostRequest {
    /**
     * Sticker set name
     * @type {string}
     * @memberof SetStickerSetTitlePostRequest
     */
    'name': string;
    /**
     * Sticker set title, 1-64 characters
     * @type {string}
     * @memberof SetStickerSetTitlePostRequest
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface SetUserEmojiStatusPostRequest
 */
export interface SetUserEmojiStatusPostRequest {
    /**
     * Unique identifier of the target user
     * @type {number}
     * @memberof SetUserEmojiStatusPostRequest
     */
    'user_id': number;
    /**
     * Custom emoji identifier of the emoji status to set. Pass an empty string to remove the status.
     * @type {string}
     * @memberof SetUserEmojiStatusPostRequest
     */
    'emoji_status_custom_emoji_id'?: string;
    /**
     * Expiration date of the emoji status, if any
     * @type {number}
     * @memberof SetUserEmojiStatusPostRequest
     */
    'emoji_status_expiration_date'?: number;
}
/**
 * 
 * @export
 * @interface SetWebhookPost200Response
 */
export interface SetWebhookPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof SetWebhookPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SetWebhookPost200Response
     */
    'result': boolean;
}
/**
 * This object contains information about a user that was shared with the bot using a [KeyboardButtonRequestUsers](https://core.telegram.org/bots/api/#keyboardbuttonrequestusers) button.
 * @export
 * @interface SharedUser
 */
export interface SharedUser {
    /**
     * Identifier of the shared user. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so 64-bit integers or double-precision float types are safe for storing these identifiers. The bot may not have access to the user and could be unable to use this identifier, unless the user is already known to the bot by some other means.
     * @type {number}
     * @memberof SharedUser
     */
    'user_id': number;
    /**
     * *Optional*. First name of the user, if the name was requested by the bot
     * @type {string}
     * @memberof SharedUser
     */
    'first_name'?: string;
    /**
     * *Optional*. Last name of the user, if the name was requested by the bot
     * @type {string}
     * @memberof SharedUser
     */
    'last_name'?: string;
    /**
     * *Optional*. Username of the user, if the username was requested by the bot
     * @type {string}
     * @memberof SharedUser
     */
    'username'?: string;
    /**
     * *Optional*. Available sizes of the chat photo, if the photo was requested by the bot
     * @type {Array<PhotoSize>}
     * @memberof SharedUser
     */
    'photo'?: Array<PhotoSize>;
}
/**
 * This object represents a shipping address.
 * @export
 * @interface ShippingAddress
 */
export interface ShippingAddress {
    /**
     * Two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code
     * @type {string}
     * @memberof ShippingAddress
     */
    'country_code': string;
    /**
     * State, if applicable
     * @type {string}
     * @memberof ShippingAddress
     */
    'state': string;
    /**
     * City
     * @type {string}
     * @memberof ShippingAddress
     */
    'city': string;
    /**
     * First line for the address
     * @type {string}
     * @memberof ShippingAddress
     */
    'street_line1': string;
    /**
     * Second line for the address
     * @type {string}
     * @memberof ShippingAddress
     */
    'street_line2': string;
    /**
     * Address post code
     * @type {string}
     * @memberof ShippingAddress
     */
    'post_code': string;
}
/**
 * This object represents one shipping option.
 * @export
 * @interface ShippingOption
 */
export interface ShippingOption {
    /**
     * Shipping option identifier
     * @type {string}
     * @memberof ShippingOption
     */
    'id': string;
    /**
     * Option title
     * @type {string}
     * @memberof ShippingOption
     */
    'title': string;
    /**
     * List of price portions
     * @type {Array<LabeledPrice>}
     * @memberof ShippingOption
     */
    'prices': Array<LabeledPrice>;
}
/**
 * This object contains information about an incoming shipping query.
 * @export
 * @interface ShippingQuery
 */
export interface ShippingQuery {
    /**
     * Unique query identifier
     * @type {string}
     * @memberof ShippingQuery
     */
    'id': string;
    /**
     * 
     * @type {User}
     * @memberof ShippingQuery
     */
    'from': User;
    /**
     * Bot-specified invoice payload
     * @type {string}
     * @memberof ShippingQuery
     */
    'invoice_payload': string;
    /**
     * 
     * @type {ShippingAddress}
     * @memberof ShippingQuery
     */
    'shipping_address': ShippingAddress;
}
/**
 * Describes an amount of Telegram Stars.
 * @export
 * @interface StarAmount
 */
export interface StarAmount {
    /**
     * Integer amount of Telegram Stars, rounded to 0; can be negative
     * @type {number}
     * @memberof StarAmount
     */
    'amount': number;
    /**
     * *Optional*. The number of 1/1000000000 shares of Telegram Stars; from -999999999 to 999999999; can be negative if and only if *amount* is non-positive
     * @type {number}
     * @memberof StarAmount
     */
    'nanostar_amount'?: number;
}
/**
 * Describes a Telegram Star transaction. Note that if the buyer initiates a chargeback with the payment provider from whom they acquired Stars (e.g., Apple, Google) following this transaction, the refunded Stars will be deducted from the bot\'s balance. This is outside of Telegram\'s control.
 * @export
 * @interface StarTransaction
 */
export interface StarTransaction {
    /**
     * Unique identifier of the transaction. Coincides with the identifier of the original transaction for refund transactions. Coincides with *SuccessfulPayment.telegram\\_payment\\_charge\\_id* for successful incoming payments from users.
     * @type {string}
     * @memberof StarTransaction
     */
    'id': string;
    /**
     * Integer amount of Telegram Stars transferred by the transaction
     * @type {number}
     * @memberof StarTransaction
     */
    'amount': number;
    /**
     * Date the transaction was created in Unix time
     * @type {number}
     * @memberof StarTransaction
     */
    'date': number;
    /**
     * *Optional*. The number of 1/1000000000 shares of Telegram Stars transferred by the transaction; from 0 to 999999999
     * @type {number}
     * @memberof StarTransaction
     */
    'nanostar_amount'?: number;
    /**
     * 
     * @type {TransactionPartner}
     * @memberof StarTransaction
     */
    'source'?: TransactionPartner;
    /**
     * 
     * @type {TransactionPartner}
     * @memberof StarTransaction
     */
    'receiver'?: TransactionPartner;
}
/**
 * Contains a list of Telegram Star transactions.
 * @export
 * @interface StarTransactions
 */
export interface StarTransactions {
    /**
     * The list of transactions
     * @type {Array<StarTransaction>}
     * @memberof StarTransactions
     */
    'transactions': Array<StarTransaction>;
}
/**
 * This object represents a sticker.
 * @export
 * @interface Sticker
 */
export interface Sticker {
    /**
     * Identifier for this file, which can be used to download or reuse the file
     * @type {string}
     * @memberof Sticker
     */
    'file_id': string;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
     * @type {string}
     * @memberof Sticker
     */
    'file_unique_id': string;
    /**
     * Type of the sticker, currently one of “regular”, “mask”, “custom\\_emoji”. The type of the sticker is independent from its format, which is determined by the fields *is\\_animated* and *is\\_video*.
     * @type {string}
     * @memberof Sticker
     */
    'type': StickerTypeEnum;
    /**
     * Sticker width
     * @type {number}
     * @memberof Sticker
     */
    'width': number;
    /**
     * Sticker height
     * @type {number}
     * @memberof Sticker
     */
    'height': number;
    /**
     * *True*, if the sticker is [animated](https://telegram.org/blog/animated-stickers)
     * @type {boolean}
     * @memberof Sticker
     */
    'is_animated': boolean;
    /**
     * *True*, if the sticker is a [video sticker](https://telegram.org/blog/video-stickers-better-reactions)
     * @type {boolean}
     * @memberof Sticker
     */
    'is_video': boolean;
    /**
     * 
     * @type {PhotoSize}
     * @memberof Sticker
     */
    'thumbnail'?: PhotoSize;
    /**
     * *Optional*. Emoji associated with the sticker
     * @type {string}
     * @memberof Sticker
     */
    'emoji'?: string;
    /**
     * *Optional*. Name of the sticker set to which the sticker belongs
     * @type {string}
     * @memberof Sticker
     */
    'set_name'?: string;
    /**
     * 
     * @type {any}
     * @memberof Sticker
     */
    'premium_animation'?: any;
    /**
     * 
     * @type {MaskPosition}
     * @memberof Sticker
     */
    'mask_position'?: MaskPosition;
    /**
     * *Optional*. For custom emoji stickers, unique identifier of the custom emoji
     * @type {string}
     * @memberof Sticker
     */
    'custom_emoji_id'?: string;
    /**
     * *Optional*. *True*, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places
     * @type {boolean}
     * @memberof Sticker
     */
    'needs_repainting'?: boolean;
    /**
     * *Optional*. File size in bytes
     * @type {number}
     * @memberof Sticker
     */
    'file_size'?: number;
}

export const StickerTypeEnum = {
    Regular: 'regular',
    Mask: 'mask',
    CustomEmoji: 'custom_emoji'
} as const;

export type StickerTypeEnum = typeof StickerTypeEnum[keyof typeof StickerTypeEnum];

/**
 * This object represents a sticker set.
 * @export
 * @interface StickerSet
 */
export interface StickerSet {
    /**
     * Sticker set name
     * @type {string}
     * @memberof StickerSet
     */
    'name': string;
    /**
     * Sticker set title
     * @type {string}
     * @memberof StickerSet
     */
    'title': string;
    /**
     * Type of stickers in the set, currently one of “regular”, “mask”, “custom\\_emoji”
     * @type {string}
     * @memberof StickerSet
     */
    'sticker_type': StickerSetStickerTypeEnum;
    /**
     * List of all set stickers
     * @type {Array<Sticker>}
     * @memberof StickerSet
     */
    'stickers': Array<Sticker>;
    /**
     * 
     * @type {PhotoSize}
     * @memberof StickerSet
     */
    'thumbnail'?: PhotoSize;
}

export const StickerSetStickerTypeEnum = {
    Regular: 'regular',
    Mask: 'mask',
    CustomEmoji: 'custom_emoji'
} as const;

export type StickerSetStickerTypeEnum = typeof StickerSetStickerTypeEnum[keyof typeof StickerSetStickerTypeEnum];

/**
 * 
 * @export
 * @interface StopMessageLiveLocationPostRequest
 */
export interface StopMessageLiveLocationPostRequest {
    /**
     * Unique identifier of the business connection on behalf of which the message to be edited was sent
     * @type {string}
     * @memberof StopMessageLiveLocationPostRequest
     */
    'business_connection_id'?: string;
    /**
     * 
     * @type {EditMessageTextPostRequestChatId}
     * @memberof StopMessageLiveLocationPostRequest
     */
    'chat_id'?: EditMessageTextPostRequestChatId;
    /**
     * Required if *inline\\_message\\_id* is not specified. Identifier of the message with live location to stop
     * @type {number}
     * @memberof StopMessageLiveLocationPostRequest
     */
    'message_id'?: number;
    /**
     * Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message
     * @type {string}
     * @memberof StopMessageLiveLocationPostRequest
     */
    'inline_message_id'?: string;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof StopMessageLiveLocationPostRequest
     */
    'reply_markup'?: InlineKeyboardMarkup;
}
/**
 * 
 * @export
 * @interface StopPollPost200Response
 */
export interface StopPollPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof StopPollPost200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {Poll}
     * @memberof StopPollPost200Response
     */
    'result': Poll;
}
/**
 * 
 * @export
 * @interface StopPollPostRequest
 */
export interface StopPollPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof StopPollPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Identifier of the original message with the poll
     * @type {number}
     * @memberof StopPollPostRequest
     */
    'message_id': number;
    /**
     * Unique identifier of the business connection on behalf of which the message to be edited was sent
     * @type {string}
     * @memberof StopPollPostRequest
     */
    'business_connection_id'?: string;
    /**
     * 
     * @type {InlineKeyboardMarkup}
     * @memberof StopPollPostRequest
     */
    'reply_markup'?: InlineKeyboardMarkup;
}
/**
 * This object represents a story.
 * @export
 * @interface Story
 */
export interface Story {
    /**
     * 
     * @type {Chat}
     * @memberof Story
     */
    'chat': Chat;
    /**
     * Unique identifier for the story in the chat
     * @type {number}
     * @memberof Story
     */
    'id': number;
}
/**
 * Describes a clickable area on a story media.
 * @export
 * @interface StoryArea
 */
export interface StoryArea {
    /**
     * 
     * @type {StoryAreaPosition}
     * @memberof StoryArea
     */
    'position': StoryAreaPosition;
    /**
     * 
     * @type {StoryAreaType}
     * @memberof StoryArea
     */
    'type': StoryAreaType;
}
/**
 * Describes the position of a clickable area within a story.
 * @export
 * @interface StoryAreaPosition
 */
export interface StoryAreaPosition {
    /**
     * The abscissa of the area\'s center, as a percentage of the media width
     * @type {number}
     * @memberof StoryAreaPosition
     */
    'x_percentage': number;
    /**
     * The ordinate of the area\'s center, as a percentage of the media height
     * @type {number}
     * @memberof StoryAreaPosition
     */
    'y_percentage': number;
    /**
     * The width of the area\'s rectangle, as a percentage of the media width
     * @type {number}
     * @memberof StoryAreaPosition
     */
    'width_percentage': number;
    /**
     * The height of the area\'s rectangle, as a percentage of the media height
     * @type {number}
     * @memberof StoryAreaPosition
     */
    'height_percentage': number;
    /**
     * The clockwise rotation angle of the rectangle, in degrees; 0-360
     * @type {number}
     * @memberof StoryAreaPosition
     */
    'rotation_angle': number;
    /**
     * The radius of the rectangle corner rounding, as a percentage of the media width
     * @type {number}
     * @memberof StoryAreaPosition
     */
    'corner_radius_percentage': number;
}
/**
 * @type StoryAreaType
 * Describes the type of a clickable area on a story. Currently, it can be one of  * [StoryAreaTypeLocation](https://core.telegram.org/bots/api/#storyareatypelocation) * [StoryAreaTypeSuggestedReaction](https://core.telegram.org/bots/api/#storyareatypesuggestedreaction) * [StoryAreaTypeLink](https://core.telegram.org/bots/api/#storyareatypelink) * [StoryAreaTypeWeather](https://core.telegram.org/bots/api/#storyareatypeweather) * [StoryAreaTypeUniqueGift](https://core.telegram.org/bots/api/#storyareatypeuniquegift)
 * @export
 */
export type StoryAreaType = StoryAreaTypeLink | StoryAreaTypeLocation | StoryAreaTypeSuggestedReaction | StoryAreaTypeUniqueGift | StoryAreaTypeWeather;

/**
 * Describes a story area pointing to an HTTP or tg:// link. Currently, a story can have up to 3 link areas.
 * @export
 * @interface StoryAreaTypeLink
 */
export interface StoryAreaTypeLink {
    /**
     * Type of the area, always “link”
     * @type {string}
     * @memberof StoryAreaTypeLink
     */
    'type': string;
    /**
     * HTTP or tg:// URL to be opened when the area is clicked
     * @type {string}
     * @memberof StoryAreaTypeLink
     */
    'url': string;
}
/**
 * Describes a story area pointing to a location. Currently, a story can have up to 10 location areas.
 * @export
 * @interface StoryAreaTypeLocation
 */
export interface StoryAreaTypeLocation {
    /**
     * Type of the area, always “location”
     * @type {string}
     * @memberof StoryAreaTypeLocation
     */
    'type': string;
    /**
     * Location latitude in degrees
     * @type {number}
     * @memberof StoryAreaTypeLocation
     */
    'latitude': number;
    /**
     * Location longitude in degrees
     * @type {number}
     * @memberof StoryAreaTypeLocation
     */
    'longitude': number;
    /**
     * 
     * @type {LocationAddress}
     * @memberof StoryAreaTypeLocation
     */
    'address'?: LocationAddress;
}
/**
 * Describes a story area pointing to a suggested reaction. Currently, a story can have up to 5 suggested reaction areas.
 * @export
 * @interface StoryAreaTypeSuggestedReaction
 */
export interface StoryAreaTypeSuggestedReaction {
    /**
     * Type of the area, always “suggested\\_reaction”
     * @type {string}
     * @memberof StoryAreaTypeSuggestedReaction
     */
    'type': string;
    /**
     * 
     * @type {ReactionType}
     * @memberof StoryAreaTypeSuggestedReaction
     */
    'reaction_type': ReactionType;
    /**
     * *Optional*. Pass *True* if the reaction area has a dark background
     * @type {boolean}
     * @memberof StoryAreaTypeSuggestedReaction
     */
    'is_dark'?: boolean;
    /**
     * *Optional*. Pass *True* if reaction area corner is flipped
     * @type {boolean}
     * @memberof StoryAreaTypeSuggestedReaction
     */
    'is_flipped'?: boolean;
}
/**
 * Describes a story area pointing to a unique gift. Currently, a story can have at most 1 unique gift area.
 * @export
 * @interface StoryAreaTypeUniqueGift
 */
export interface StoryAreaTypeUniqueGift {
    /**
     * Type of the area, always “unique\\_gift”
     * @type {string}
     * @memberof StoryAreaTypeUniqueGift
     */
    'type': string;
    /**
     * Unique name of the gift
     * @type {string}
     * @memberof StoryAreaTypeUniqueGift
     */
    'name': string;
}
/**
 * Describes a story area containing weather information. Currently, a story can have up to 3 weather areas.
 * @export
 * @interface StoryAreaTypeWeather
 */
export interface StoryAreaTypeWeather {
    /**
     * Type of the area, always “weather”
     * @type {string}
     * @memberof StoryAreaTypeWeather
     */
    'type': string;
    /**
     * Temperature, in degree Celsius
     * @type {number}
     * @memberof StoryAreaTypeWeather
     */
    'temperature': number;
    /**
     * Emoji representing the weather
     * @type {string}
     * @memberof StoryAreaTypeWeather
     */
    'emoji': string;
    /**
     * A color of the area background in the ARGB format
     * @type {number}
     * @memberof StoryAreaTypeWeather
     */
    'background_color': number;
}
/**
 * This object contains basic information about a successful payment. Note that if the buyer initiates a chargeback with the relevant payment provider following this transaction, the funds may be debited from your balance. This is outside of Telegram\'s control.
 * @export
 * @interface SuccessfulPayment
 */
export interface SuccessfulPayment {
    /**
     * Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code, or “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90)
     * @type {string}
     * @memberof SuccessfulPayment
     */
    'currency': string;
    /**
     * Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
     * @type {number}
     * @memberof SuccessfulPayment
     */
    'total_amount': number;
    /**
     * Bot-specified invoice payload
     * @type {string}
     * @memberof SuccessfulPayment
     */
    'invoice_payload': string;
    /**
     * Telegram payment identifier
     * @type {string}
     * @memberof SuccessfulPayment
     */
    'telegram_payment_charge_id': string;
    /**
     * Provider payment identifier
     * @type {string}
     * @memberof SuccessfulPayment
     */
    'provider_payment_charge_id': string;
    /**
     * *Optional*. Expiration date of the subscription, in Unix time; for recurring payments only
     * @type {number}
     * @memberof SuccessfulPayment
     */
    'subscription_expiration_date'?: number;
    /**
     * *Optional*. True, if the payment is a recurring payment for a subscription
     * @type {boolean}
     * @memberof SuccessfulPayment
     */
    'is_recurring'?: boolean;
    /**
     * *Optional*. True, if the payment is the first payment for a subscription
     * @type {boolean}
     * @memberof SuccessfulPayment
     */
    'is_first_recurring'?: boolean;
    /**
     * *Optional*. Identifier of the shipping option chosen by the user
     * @type {string}
     * @memberof SuccessfulPayment
     */
    'shipping_option_id'?: string;
    /**
     * 
     * @type {OrderInfo}
     * @memberof SuccessfulPayment
     */
    'order_info'?: OrderInfo;
}
/**
 * This object represents an inline button that switches the current user to inline mode in a chosen chat, with an optional default inline query.
 * @export
 * @interface SwitchInlineQueryChosenChat
 */
export interface SwitchInlineQueryChosenChat {
    /**
     * *Optional*. The default inline query to be inserted in the input field. If left empty, only the bot\'s username will be inserted
     * @type {string}
     * @memberof SwitchInlineQueryChosenChat
     */
    'query'?: string;
    /**
     * *Optional*. True, if private chats with users can be chosen
     * @type {boolean}
     * @memberof SwitchInlineQueryChosenChat
     */
    'allow_user_chats'?: boolean;
    /**
     * *Optional*. True, if private chats with bots can be chosen
     * @type {boolean}
     * @memberof SwitchInlineQueryChosenChat
     */
    'allow_bot_chats'?: boolean;
    /**
     * *Optional*. True, if group and supergroup chats can be chosen
     * @type {boolean}
     * @memberof SwitchInlineQueryChosenChat
     */
    'allow_group_chats'?: boolean;
    /**
     * *Optional*. True, if channel chats can be chosen
     * @type {boolean}
     * @memberof SwitchInlineQueryChosenChat
     */
    'allow_channel_chats'?: boolean;
}
/**
 * This object contains information about the quoted part of a message that is replied to by the given message.
 * @export
 * @interface TextQuote
 */
export interface TextQuote {
    /**
     * Text of the quoted part of a message that is replied to by the given message
     * @type {string}
     * @memberof TextQuote
     */
    'text': string;
    /**
     * Approximate quote position in the original message in UTF-16 code units as specified by the sender
     * @type {number}
     * @memberof TextQuote
     */
    'position': number;
    /**
     * *Optional*. Special entities that appear in the quote. Currently, only *bold*, *italic*, *underline*, *strikethrough*, *spoiler*, and *custom\\_emoji* entities are kept in quotes.
     * @type {Array<MessageEntity>}
     * @memberof TextQuote
     */
    'entities'?: Array<MessageEntity>;
    /**
     * *Optional*. True, if the quote was chosen manually by the message sender. Otherwise, the quote was added automatically by the server.
     * @type {boolean}
     * @memberof TextQuote
     */
    'is_manual'?: boolean;
}
/**
 * @type TransactionPartner
 * This object describes the source of a transaction, or its recipient for outgoing transactions. Currently, it can be one of  * [TransactionPartnerUser](https://core.telegram.org/bots/api/#transactionpartneruser) * [TransactionPartnerChat](https://core.telegram.org/bots/api/#transactionpartnerchat) * [TransactionPartnerAffiliateProgram](https://core.telegram.org/bots/api/#transactionpartneraffiliateprogram) * [TransactionPartnerFragment](https://core.telegram.org/bots/api/#transactionpartnerfragment) * [TransactionPartnerTelegramAds](https://core.telegram.org/bots/api/#transactionpartnertelegramads) * [TransactionPartnerTelegramApi](https://core.telegram.org/bots/api/#transactionpartnertelegramapi) * [TransactionPartnerOther](https://core.telegram.org/bots/api/#transactionpartnerother)
 * @export
 */
export type TransactionPartner = TransactionPartnerAffiliateProgram | TransactionPartnerChat | TransactionPartnerFragment | TransactionPartnerOther | TransactionPartnerTelegramAds | TransactionPartnerTelegramApi | TransactionPartnerUser;

/**
 * Describes the affiliate program that issued the affiliate commission received via this transaction.
 * @export
 * @interface TransactionPartnerAffiliateProgram
 */
export interface TransactionPartnerAffiliateProgram {
    /**
     * Type of the transaction partner, always “affiliate\\_program”
     * @type {string}
     * @memberof TransactionPartnerAffiliateProgram
     */
    'type': string;
    /**
     * The number of Telegram Stars received by the bot for each 1000 Telegram Stars received by the affiliate program sponsor from referred users
     * @type {number}
     * @memberof TransactionPartnerAffiliateProgram
     */
    'commission_per_mille': number;
    /**
     * 
     * @type {User}
     * @memberof TransactionPartnerAffiliateProgram
     */
    'sponsor_user'?: User;
}
/**
 * Describes a transaction with a chat.
 * @export
 * @interface TransactionPartnerChat
 */
export interface TransactionPartnerChat {
    /**
     * Type of the transaction partner, always “chat”
     * @type {string}
     * @memberof TransactionPartnerChat
     */
    'type': string;
    /**
     * 
     * @type {Chat}
     * @memberof TransactionPartnerChat
     */
    'chat': Chat;
    /**
     * 
     * @type {Gift}
     * @memberof TransactionPartnerChat
     */
    'gift'?: Gift;
}
/**
 * Describes a withdrawal transaction with Fragment.
 * @export
 * @interface TransactionPartnerFragment
 */
export interface TransactionPartnerFragment {
    /**
     * Type of the transaction partner, always “fragment”
     * @type {string}
     * @memberof TransactionPartnerFragment
     */
    'type': string;
    /**
     * 
     * @type {RevenueWithdrawalState}
     * @memberof TransactionPartnerFragment
     */
    'withdrawal_state'?: RevenueWithdrawalState;
}
/**
 * Describes a transaction with an unknown source or recipient.
 * @export
 * @interface TransactionPartnerOther
 */
export interface TransactionPartnerOther {
    /**
     * Type of the transaction partner, always “other”
     * @type {string}
     * @memberof TransactionPartnerOther
     */
    'type': string;
}
/**
 * Describes a withdrawal transaction to the Telegram Ads platform.
 * @export
 * @interface TransactionPartnerTelegramAds
 */
export interface TransactionPartnerTelegramAds {
    /**
     * Type of the transaction partner, always “telegram\\_ads”
     * @type {string}
     * @memberof TransactionPartnerTelegramAds
     */
    'type': string;
}
/**
 * Describes a transaction with payment for [paid broadcasting](https://core.telegram.org/bots/api/#paid-broadcasts).
 * @export
 * @interface TransactionPartnerTelegramApi
 */
export interface TransactionPartnerTelegramApi {
    /**
     * Type of the transaction partner, always “telegram\\_api”
     * @type {string}
     * @memberof TransactionPartnerTelegramApi
     */
    'type': string;
    /**
     * The number of successful requests that exceeded regular limits and were therefore billed
     * @type {number}
     * @memberof TransactionPartnerTelegramApi
     */
    'request_count': number;
}
/**
 * Describes a transaction with a user.
 * @export
 * @interface TransactionPartnerUser
 */
export interface TransactionPartnerUser {
    /**
     * Type of the transaction partner, always “user”
     * @type {string}
     * @memberof TransactionPartnerUser
     */
    'type': string;
    /**
     * Type of the transaction, currently one of “invoice\\_payment” for payments via invoices, “paid\\_media\\_payment” for payments for paid media, “gift\\_purchase” for gifts sent by the bot, “premium\\_purchase” for Telegram Premium subscriptions gifted by the bot, “business\\_account\\_transfer” for direct transfers from managed business accounts
     * @type {string}
     * @memberof TransactionPartnerUser
     */
    'transaction_type': TransactionPartnerUserTransactionTypeEnum;
    /**
     * 
     * @type {User}
     * @memberof TransactionPartnerUser
     */
    'user': User;
    /**
     * 
     * @type {AffiliateInfo}
     * @memberof TransactionPartnerUser
     */
    'affiliate'?: AffiliateInfo;
    /**
     * *Optional*. Bot-specified invoice payload. Can be available only for “invoice\\_payment” transactions.
     * @type {string}
     * @memberof TransactionPartnerUser
     */
    'invoice_payload'?: string;
    /**
     * *Optional*. The duration of the paid subscription. Can be available only for “invoice\\_payment” transactions.
     * @type {number}
     * @memberof TransactionPartnerUser
     */
    'subscription_period'?: number;
    /**
     * *Optional*. Information about the paid media bought by the user; for “paid\\_media\\_payment” transactions only
     * @type {Array<PaidMedia>}
     * @memberof TransactionPartnerUser
     */
    'paid_media'?: Array<PaidMedia>;
    /**
     * *Optional*. Bot-specified paid media payload. Can be available only for “paid\\_media\\_payment” transactions.
     * @type {string}
     * @memberof TransactionPartnerUser
     */
    'paid_media_payload'?: string;
    /**
     * 
     * @type {Gift}
     * @memberof TransactionPartnerUser
     */
    'gift'?: Gift;
    /**
     * *Optional*. Number of months the gifted Telegram Premium subscription will be active for; for “premium\\_purchase” transactions only
     * @type {number}
     * @memberof TransactionPartnerUser
     */
    'premium_subscription_duration'?: number;
}

export const TransactionPartnerUserTransactionTypeEnum = {
    InvoicePayment: 'invoice_payment',
    PaidMediaPayment: 'paid_media_payment',
    GiftPurchase: 'gift_purchase',
    PremiumPurchase: 'premium_purchase',
    BusinessAccountTransfer: 'business_account_transfer'
} as const;

export type TransactionPartnerUserTransactionTypeEnum = typeof TransactionPartnerUserTransactionTypeEnum[keyof typeof TransactionPartnerUserTransactionTypeEnum];

/**
 * 
 * @export
 * @interface TransferBusinessAccountStarsPostRequest
 */
export interface TransferBusinessAccountStarsPostRequest {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof TransferBusinessAccountStarsPostRequest
     */
    'business_connection_id': string;
    /**
     * Number of Telegram Stars to transfer; 1-10000
     * @type {number}
     * @memberof TransferBusinessAccountStarsPostRequest
     */
    'star_count': number;
}
/**
 * 
 * @export
 * @interface TransferGiftPostRequest
 */
export interface TransferGiftPostRequest {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof TransferGiftPostRequest
     */
    'business_connection_id': string;
    /**
     * Unique identifier of the regular gift that should be transferred
     * @type {string}
     * @memberof TransferGiftPostRequest
     */
    'owned_gift_id': string;
    /**
     * Unique identifier of the chat which will own the gift. The chat must be active in the last 24 hours.
     * @type {number}
     * @memberof TransferGiftPostRequest
     */
    'new_owner_chat_id': number;
    /**
     * The amount of Telegram Stars that will be paid for the transfer from the business account balance. If positive, then the *can\\_transfer\\_stars* business bot right is required.
     * @type {number}
     * @memberof TransferGiftPostRequest
     */
    'star_count'?: number;
}
/**
 * 
 * @export
 * @interface UnbanChatMemberPostRequest
 */
export interface UnbanChatMemberPostRequest {
    /**
     * 
     * @type {BanChatMemberPostRequestChatId}
     * @memberof UnbanChatMemberPostRequest
     */
    'chat_id': BanChatMemberPostRequestChatId;
    /**
     * Unique identifier of the target user
     * @type {number}
     * @memberof UnbanChatMemberPostRequest
     */
    'user_id': number;
    /**
     * Do nothing if the user is not banned
     * @type {boolean}
     * @memberof UnbanChatMemberPostRequest
     */
    'only_if_banned'?: boolean;
}
/**
 * This object describes a unique gift that was upgraded from a regular gift.
 * @export
 * @interface UniqueGift
 */
export interface UniqueGift {
    /**
     * Human-readable name of the regular gift from which this unique gift was upgraded
     * @type {string}
     * @memberof UniqueGift
     */
    'base_name': string;
    /**
     * Unique name of the gift. This name can be used in `https://t.me/nft/...` links and story areas
     * @type {string}
     * @memberof UniqueGift
     */
    'name': string;
    /**
     * Unique number of the upgraded gift among gifts upgraded from the same regular gift
     * @type {number}
     * @memberof UniqueGift
     */
    'number': number;
    /**
     * 
     * @type {UniqueGiftModel}
     * @memberof UniqueGift
     */
    'model': UniqueGiftModel;
    /**
     * 
     * @type {UniqueGiftSymbol}
     * @memberof UniqueGift
     */
    'symbol': UniqueGiftSymbol;
    /**
     * 
     * @type {UniqueGiftBackdrop}
     * @memberof UniqueGift
     */
    'backdrop': UniqueGiftBackdrop;
}
/**
 * This object describes the backdrop of a unique gift.
 * @export
 * @interface UniqueGiftBackdrop
 */
export interface UniqueGiftBackdrop {
    /**
     * Name of the backdrop
     * @type {string}
     * @memberof UniqueGiftBackdrop
     */
    'name': string;
    /**
     * 
     * @type {UniqueGiftBackdropColors}
     * @memberof UniqueGiftBackdrop
     */
    'colors': UniqueGiftBackdropColors;
    /**
     * The number of unique gifts that receive this backdrop for every 1000 gifts upgraded
     * @type {number}
     * @memberof UniqueGiftBackdrop
     */
    'rarity_per_mille': number;
}
/**
 * This object describes the colors of the backdrop of a unique gift.
 * @export
 * @interface UniqueGiftBackdropColors
 */
export interface UniqueGiftBackdropColors {
    /**
     * The color in the center of the backdrop in RGB format
     * @type {number}
     * @memberof UniqueGiftBackdropColors
     */
    'center_color': number;
    /**
     * The color on the edges of the backdrop in RGB format
     * @type {number}
     * @memberof UniqueGiftBackdropColors
     */
    'edge_color': number;
    /**
     * The color to be applied to the symbol in RGB format
     * @type {number}
     * @memberof UniqueGiftBackdropColors
     */
    'symbol_color': number;
    /**
     * The color for the text on the backdrop in RGB format
     * @type {number}
     * @memberof UniqueGiftBackdropColors
     */
    'text_color': number;
}
/**
 * Describes a service message about a unique gift that was sent or received.
 * @export
 * @interface UniqueGiftInfo
 */
export interface UniqueGiftInfo {
    /**
     * 
     * @type {UniqueGift}
     * @memberof UniqueGiftInfo
     */
    'gift': UniqueGift;
    /**
     * Origin of the gift. Currently, either “upgrade” or “transfer”
     * @type {string}
     * @memberof UniqueGiftInfo
     */
    'origin': UniqueGiftInfoOriginEnum;
    /**
     * *Optional*. Unique identifier of the received gift for the bot; only present for gifts received on behalf of business accounts
     * @type {string}
     * @memberof UniqueGiftInfo
     */
    'owned_gift_id'?: string;
    /**
     * *Optional*. Number of Telegram Stars that must be paid to transfer the gift; omitted if the bot cannot transfer the gift
     * @type {number}
     * @memberof UniqueGiftInfo
     */
    'transfer_star_count'?: number;
}

export const UniqueGiftInfoOriginEnum = {
    Upgrade: 'upgrade',
    Transfer: 'transfer'
} as const;

export type UniqueGiftInfoOriginEnum = typeof UniqueGiftInfoOriginEnum[keyof typeof UniqueGiftInfoOriginEnum];

/**
 * This object describes the model of a unique gift.
 * @export
 * @interface UniqueGiftModel
 */
export interface UniqueGiftModel {
    /**
     * Name of the model
     * @type {string}
     * @memberof UniqueGiftModel
     */
    'name': string;
    /**
     * 
     * @type {Sticker}
     * @memberof UniqueGiftModel
     */
    'sticker': Sticker;
    /**
     * The number of unique gifts that receive this model for every 1000 gifts upgraded
     * @type {number}
     * @memberof UniqueGiftModel
     */
    'rarity_per_mille': number;
}
/**
 * This object describes the symbol shown on the pattern of a unique gift.
 * @export
 * @interface UniqueGiftSymbol
 */
export interface UniqueGiftSymbol {
    /**
     * Name of the symbol
     * @type {string}
     * @memberof UniqueGiftSymbol
     */
    'name': string;
    /**
     * 
     * @type {Sticker}
     * @memberof UniqueGiftSymbol
     */
    'sticker': Sticker;
    /**
     * The number of unique gifts that receive this model for every 1000 gifts upgraded
     * @type {number}
     * @memberof UniqueGiftSymbol
     */
    'rarity_per_mille': number;
}
/**
 * 
 * @export
 * @interface UnpinChatMessagePostRequest
 */
export interface UnpinChatMessagePostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof UnpinChatMessagePostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Unique identifier of the business connection on behalf of which the message will be unpinned
     * @type {string}
     * @memberof UnpinChatMessagePostRequest
     */
    'business_connection_id'?: string;
    /**
     * Identifier of the message to unpin. Required if *business\\_connection\\_id* is specified. If not specified, the most recent pinned message (by sending date) will be unpinned.
     * @type {number}
     * @memberof UnpinChatMessagePostRequest
     */
    'message_id'?: number;
}
/**
 * This [object](https://core.telegram.org/bots/api/#available-types) represents an incoming update.   At most **one** of the optional parameters can be present in any given update.
 * @export
 * @interface Update
 */
export interface Update {
    /**
     * The update\'s unique identifier. Update identifiers start from a certain positive number and increase sequentially. This identifier becomes especially handy if you\'re using [webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
     * @type {number}
     * @memberof Update
     */
    'update_id': number;
    /**
     * 
     * @type {Message}
     * @memberof Update
     */
    'message'?: Message;
    /**
     * 
     * @type {Message}
     * @memberof Update
     */
    'edited_message'?: Message;
    /**
     * 
     * @type {Message}
     * @memberof Update
     */
    'channel_post'?: Message;
    /**
     * 
     * @type {Message}
     * @memberof Update
     */
    'edited_channel_post'?: Message;
    /**
     * 
     * @type {BusinessConnection}
     * @memberof Update
     */
    'business_connection'?: BusinessConnection;
    /**
     * 
     * @type {Message}
     * @memberof Update
     */
    'business_message'?: Message;
    /**
     * 
     * @type {Message}
     * @memberof Update
     */
    'edited_business_message'?: Message;
    /**
     * 
     * @type {BusinessMessagesDeleted}
     * @memberof Update
     */
    'deleted_business_messages'?: BusinessMessagesDeleted;
    /**
     * 
     * @type {MessageReactionUpdated}
     * @memberof Update
     */
    'message_reaction'?: MessageReactionUpdated;
    /**
     * 
     * @type {MessageReactionCountUpdated}
     * @memberof Update
     */
    'message_reaction_count'?: MessageReactionCountUpdated;
    /**
     * 
     * @type {InlineQuery}
     * @memberof Update
     */
    'inline_query'?: InlineQuery;
    /**
     * 
     * @type {ChosenInlineResult}
     * @memberof Update
     */
    'chosen_inline_result'?: ChosenInlineResult;
    /**
     * 
     * @type {CallbackQuery}
     * @memberof Update
     */
    'callback_query'?: CallbackQuery;
    /**
     * 
     * @type {ShippingQuery}
     * @memberof Update
     */
    'shipping_query'?: ShippingQuery;
    /**
     * 
     * @type {PreCheckoutQuery}
     * @memberof Update
     */
    'pre_checkout_query'?: PreCheckoutQuery;
    /**
     * 
     * @type {PaidMediaPurchased}
     * @memberof Update
     */
    'purchased_paid_media'?: PaidMediaPurchased;
    /**
     * 
     * @type {Poll}
     * @memberof Update
     */
    'poll'?: Poll;
    /**
     * 
     * @type {PollAnswer}
     * @memberof Update
     */
    'poll_answer'?: PollAnswer;
    /**
     * 
     * @type {ChatMemberUpdated}
     * @memberof Update
     */
    'my_chat_member'?: ChatMemberUpdated;
    /**
     * 
     * @type {ChatMemberUpdated}
     * @memberof Update
     */
    'chat_member'?: ChatMemberUpdated;
    /**
     * 
     * @type {ChatJoinRequest}
     * @memberof Update
     */
    'chat_join_request'?: ChatJoinRequest;
    /**
     * 
     * @type {ChatBoostUpdated}
     * @memberof Update
     */
    'chat_boost'?: ChatBoostUpdated;
    /**
     * 
     * @type {ChatBoostRemoved}
     * @memberof Update
     */
    'removed_chat_boost'?: ChatBoostRemoved;
}
/**
 * 
 * @export
 * @interface UpgradeGiftPostRequest
 */
export interface UpgradeGiftPostRequest {
    /**
     * Unique identifier of the business connection
     * @type {string}
     * @memberof UpgradeGiftPostRequest
     */
    'business_connection_id': string;
    /**
     * Unique identifier of the regular gift that should be upgraded to a unique one
     * @type {string}
     * @memberof UpgradeGiftPostRequest
     */
    'owned_gift_id': string;
    /**
     * Pass True to keep the original gift text, sender and receiver in the upgraded gift
     * @type {boolean}
     * @memberof UpgradeGiftPostRequest
     */
    'keep_original_details'?: boolean;
    /**
     * The amount of Telegram Stars that will be paid for the upgrade from the business account balance. If `gift.prepaid_upgrade_star_count > 0`, then pass 0, otherwise, the *can\\_transfer\\_stars* business bot right is required and `gift.upgrade_star_count` must be passed.
     * @type {number}
     * @memberof UpgradeGiftPostRequest
     */
    'star_count'?: number;
}
/**
 * This object represents a Telegram user or bot.
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier.
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * *True*, if this user is a bot
     * @type {boolean}
     * @memberof User
     */
    'is_bot': boolean;
    /**
     * User\'s or bot\'s first name
     * @type {string}
     * @memberof User
     */
    'first_name': string;
    /**
     * *Optional*. User\'s or bot\'s last name
     * @type {string}
     * @memberof User
     */
    'last_name'?: string;
    /**
     * *Optional*. User\'s or bot\'s username
     * @type {string}
     * @memberof User
     */
    'username'?: string;
    /**
     * *Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user\'s language
     * @type {string}
     * @memberof User
     */
    'language_code'?: string;
    /**
     * *Optional*. *True*, if this user is a Telegram Premium user
     * @type {boolean}
     * @memberof User
     */
    'is_premium'?: boolean;
    /**
     * *Optional*. *True*, if this user added the bot to the attachment menu
     * @type {boolean}
     * @memberof User
     */
    'added_to_attachment_menu'?: boolean;
    /**
     * *Optional*. *True*, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
     * @type {boolean}
     * @memberof User
     */
    'can_join_groups'?: boolean;
    /**
     * *Optional*. *True*, if [privacy mode](https://core.telegram.org/bots/features#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
     * @type {boolean}
     * @memberof User
     */
    'can_read_all_group_messages'?: boolean;
    /**
     * *Optional*. *True*, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
     * @type {boolean}
     * @memberof User
     */
    'supports_inline_queries'?: boolean;
    /**
     * *Optional*. *True*, if the bot can be connected to a Telegram Business account to receive its messages. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
     * @type {boolean}
     * @memberof User
     */
    'can_connect_to_business'?: boolean;
    /**
     * *Optional*. *True*, if the bot has a main Web App. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
     * @type {boolean}
     * @memberof User
     */
    'has_main_web_app'?: boolean;
}
/**
 * This object represents a list of boosts added to a chat by a user.
 * @export
 * @interface UserChatBoosts
 */
export interface UserChatBoosts {
    /**
     * The list of boosts added to the chat by the user
     * @type {Array<ChatBoost>}
     * @memberof UserChatBoosts
     */
    'boosts': Array<ChatBoost>;
}
/**
 * This object represent a user\'s profile pictures.
 * @export
 * @interface UserProfilePhotos
 */
export interface UserProfilePhotos {
    /**
     * Total number of profile pictures the target user has
     * @type {number}
     * @memberof UserProfilePhotos
     */
    'total_count': number;
    /**
     * Requested profile pictures (in up to 4 sizes each)
     * @type {Array<Array<PhotoSize>>}
     * @memberof UserProfilePhotos
     */
    'photos': Array<Array<PhotoSize>>;
}
/**
 * This object contains information about the users whose identifiers were shared with the bot using a [KeyboardButtonRequestUsers](https://core.telegram.org/bots/api/#keyboardbuttonrequestusers) button.
 * @export
 * @interface UsersShared
 */
export interface UsersShared {
    /**
     * Identifier of the request
     * @type {number}
     * @memberof UsersShared
     */
    'request_id': number;
    /**
     * Information about users shared with the bot.
     * @type {Array<SharedUser>}
     * @memberof UsersShared
     */
    'users': Array<SharedUser>;
}
/**
 * This object represents a venue.
 * @export
 * @interface Venue
 */
export interface Venue {
    /**
     * 
     * @type {Location}
     * @memberof Venue
     */
    'location': Location;
    /**
     * Name of the venue
     * @type {string}
     * @memberof Venue
     */
    'title': string;
    /**
     * Address of the venue
     * @type {string}
     * @memberof Venue
     */
    'address': string;
    /**
     * *Optional*. Foursquare identifier of the venue
     * @type {string}
     * @memberof Venue
     */
    'foursquare_id'?: string;
    /**
     * *Optional*. Foursquare type of the venue. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)
     * @type {string}
     * @memberof Venue
     */
    'foursquare_type'?: string;
    /**
     * *Optional*. Google Places identifier of the venue
     * @type {string}
     * @memberof Venue
     */
    'google_place_id'?: string;
    /**
     * *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
     * @type {string}
     * @memberof Venue
     */
    'google_place_type'?: string;
}
/**
 * 
 * @export
 * @interface VerifyChatPostRequest
 */
export interface VerifyChatPostRequest {
    /**
     * 
     * @type {SendMessagePostRequestChatId}
     * @memberof VerifyChatPostRequest
     */
    'chat_id': SendMessagePostRequestChatId;
    /**
     * Custom description for the verification; 0-70 characters. Must be empty if the organization isn\'t allowed to provide a custom verification description.
     * @type {string}
     * @memberof VerifyChatPostRequest
     */
    'custom_description'?: string;
}
/**
 * 
 * @export
 * @interface VerifyUserPostRequest
 */
export interface VerifyUserPostRequest {
    /**
     * Unique identifier of the target user
     * @type {number}
     * @memberof VerifyUserPostRequest
     */
    'user_id': number;
    /**
     * Custom description for the verification; 0-70 characters. Must be empty if the organization isn\'t allowed to provide a custom verification description.
     * @type {string}
     * @memberof VerifyUserPostRequest
     */
    'custom_description'?: string;
}
/**
 * This object represents a video file.
 * @export
 * @interface Video
 */
export interface Video {
    /**
     * Identifier for this file, which can be used to download or reuse the file
     * @type {string}
     * @memberof Video
     */
    'file_id': string;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
     * @type {string}
     * @memberof Video
     */
    'file_unique_id': string;
    /**
     * Video width as defined by the sender
     * @type {number}
     * @memberof Video
     */
    'width': number;
    /**
     * Video height as defined by the sender
     * @type {number}
     * @memberof Video
     */
    'height': number;
    /**
     * Duration of the video in seconds as defined by the sender
     * @type {number}
     * @memberof Video
     */
    'duration': number;
    /**
     * 
     * @type {PhotoSize}
     * @memberof Video
     */
    'thumbnail'?: PhotoSize;
    /**
     * *Optional*. Available sizes of the cover of the video in the message
     * @type {Array<PhotoSize>}
     * @memberof Video
     */
    'cover'?: Array<PhotoSize>;
    /**
     * *Optional*. Timestamp in seconds from which the video will play in the message
     * @type {number}
     * @memberof Video
     */
    'start_timestamp'?: number;
    /**
     * *Optional*. Original filename as defined by the sender
     * @type {string}
     * @memberof Video
     */
    'file_name'?: string;
    /**
     * *Optional*. MIME type of the file as defined by the sender
     * @type {string}
     * @memberof Video
     */
    'mime_type'?: string;
    /**
     * *Optional*. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
     * @type {number}
     * @memberof Video
     */
    'file_size'?: number;
}
/**
 * This object represents a service message about a video chat ended in the chat.
 * @export
 * @interface VideoChatEnded
 */
export interface VideoChatEnded {
    /**
     * Video chat duration in seconds
     * @type {number}
     * @memberof VideoChatEnded
     */
    'duration': number;
}
/**
 * This object represents a service message about new members invited to a video chat.
 * @export
 * @interface VideoChatParticipantsInvited
 */
export interface VideoChatParticipantsInvited {
    /**
     * New members that were invited to the video chat
     * @type {Array<User>}
     * @memberof VideoChatParticipantsInvited
     */
    'users': Array<User>;
}
/**
 * This object represents a service message about a video chat scheduled in the chat.
 * @export
 * @interface VideoChatScheduled
 */
export interface VideoChatScheduled {
    /**
     * Point in time (Unix timestamp) when the video chat is supposed to be started by a chat administrator
     * @type {number}
     * @memberof VideoChatScheduled
     */
    'start_date': number;
}
/**
 * This object represents a [video message](https://telegram.org/blog/video-messages-and-telescope) (available in Telegram apps as of [v.4.0](https://telegram.org/blog/video-messages-and-telescope)).
 * @export
 * @interface VideoNote
 */
export interface VideoNote {
    /**
     * Identifier for this file, which can be used to download or reuse the file
     * @type {string}
     * @memberof VideoNote
     */
    'file_id': string;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
     * @type {string}
     * @memberof VideoNote
     */
    'file_unique_id': string;
    /**
     * Video width and height (diameter of the video message) as defined by the sender
     * @type {number}
     * @memberof VideoNote
     */
    'length': number;
    /**
     * Duration of the video in seconds as defined by the sender
     * @type {number}
     * @memberof VideoNote
     */
    'duration': number;
    /**
     * 
     * @type {PhotoSize}
     * @memberof VideoNote
     */
    'thumbnail'?: PhotoSize;
    /**
     * *Optional*. File size in bytes
     * @type {number}
     * @memberof VideoNote
     */
    'file_size'?: number;
}
/**
 * This object represents a voice note.
 * @export
 * @interface Voice
 */
export interface Voice {
    /**
     * Identifier for this file, which can be used to download or reuse the file
     * @type {string}
     * @memberof Voice
     */
    'file_id': string;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
     * @type {string}
     * @memberof Voice
     */
    'file_unique_id': string;
    /**
     * Duration of the audio in seconds as defined by the sender
     * @type {number}
     * @memberof Voice
     */
    'duration': number;
    /**
     * *Optional*. MIME type of the file as defined by the sender
     * @type {string}
     * @memberof Voice
     */
    'mime_type'?: string;
    /**
     * *Optional*. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
     * @type {number}
     * @memberof Voice
     */
    'file_size'?: number;
}
/**
 * Describes data sent from a [Web App](https://core.telegram.org/bots/webapps) to the bot.
 * @export
 * @interface WebAppData
 */
export interface WebAppData {
    /**
     * The data. Be aware that a bad client can send arbitrary data in this field.
     * @type {string}
     * @memberof WebAppData
     */
    'data': string;
    /**
     * Text of the *web\\_app* keyboard button from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field.
     * @type {string}
     * @memberof WebAppData
     */
    'button_text': string;
}
/**
 * Describes a [Web App](https://core.telegram.org/bots/webapps).
 * @export
 * @interface WebAppInfo
 */
export interface WebAppInfo {
    /**
     * An HTTPS URL of a Web App to be opened with additional data as specified in [Initializing Web Apps](https://core.telegram.org/bots/webapps#initializing-mini-apps)
     * @type {string}
     * @memberof WebAppInfo
     */
    'url': string;
}
/**
 * Describes the current status of a webhook.
 * @export
 * @interface WebhookInfo
 */
export interface WebhookInfo {
    /**
     * Webhook URL, may be empty if webhook is not set up
     * @type {string}
     * @memberof WebhookInfo
     */
    'url': string;
    /**
     * *True*, if a custom certificate was provided for webhook certificate checks
     * @type {boolean}
     * @memberof WebhookInfo
     */
    'has_custom_certificate': boolean;
    /**
     * Number of updates awaiting delivery
     * @type {number}
     * @memberof WebhookInfo
     */
    'pending_update_count': number;
    /**
     * *Optional*. Currently used webhook IP address
     * @type {string}
     * @memberof WebhookInfo
     */
    'ip_address'?: string;
    /**
     * *Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook
     * @type {number}
     * @memberof WebhookInfo
     */
    'last_error_date'?: number;
    /**
     * *Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
     * @type {string}
     * @memberof WebhookInfo
     */
    'last_error_message'?: string;
    /**
     * *Optional*. Unix time of the most recent error that happened when trying to synchronize available updates with Telegram datacenters
     * @type {number}
     * @memberof WebhookInfo
     */
    'last_synchronization_error_date'?: number;
    /**
     * *Optional*. The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
     * @type {number}
     * @memberof WebhookInfo
     */
    'max_connections'?: number;
    /**
     * *Optional*. A list of update types the bot is subscribed to. Defaults to all update types except *chat\\_member*
     * @type {Array<string>}
     * @memberof WebhookInfo
     */
    'allowed_updates'?: Array<string>;
}
/**
 * This object represents a service message about a user allowing a bot to write messages after adding it to the attachment menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method [requestWriteAccess](https://core.telegram.org/bots/webapps#initializing-mini-apps).
 * @export
 * @interface WriteAccessAllowed
 */
export interface WriteAccessAllowed {
    /**
     * *Optional*. True, if the access was granted after the user accepted an explicit request from a Web App sent by the method [requestWriteAccess](https://core.telegram.org/bots/webapps#initializing-mini-apps)
     * @type {boolean}
     * @memberof WriteAccessAllowed
     */
    'from_request'?: boolean;
    /**
     * *Optional*. Name of the Web App, if the access was granted when the Web App was launched from a link
     * @type {string}
     * @memberof WriteAccessAllowed
     */
    'web_app_name'?: string;
    /**
     * *Optional*. True, if the access was granted when the bot was added to the attachment or side menu
     * @type {boolean}
     * @memberof WriteAccessAllowed
     */
    'from_attachment_menu'?: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers. Returns *True* on success.
         * @param {number} userId User identifier of sticker set owner
         * @param {string} name Sticker set name
         * @param {InputSticker} sticker 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStickerToSetPost: async (userId: number, name: string, sticker: InputSticker, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addStickerToSetPost', 'userId', userId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('addStickerToSetPost', 'name', name)
            // verify required parameter 'sticker' is not null or undefined
            assertParamExists('addStickerToSetPost', 'sticker', sticker)
            const localVarPath = `/addStickerToSet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (sticker !== undefined) { 
                localVarFormParams.append('sticker', new Blob([JSON.stringify(sticker)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send answers to callback queries sent from [inline keyboards](https://core.telegram.org/bots/features#inline-keyboards). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.  Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@BotFather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
         * @param {string} callbackQueryId Unique identifier for the query to be answered
         * @param {string} [text] Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
         * @param {boolean} [showAlert] If *True*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
         * @param {string} [url] URL that will be opened by the user\\\&#39;s client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@BotFather](https://t.me/botfather), specify the URL that opens your game - note that this will only work if the query comes from a [*callback\\\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.    Otherwise, you may use links like &#x60;t.me/your_bot?start&#x3D;XXXX&#x60; that open your bot with a parameter.
         * @param {number} [cacheTime] The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerCallbackQueryPost: async (callbackQueryId: string, text?: string, showAlert?: boolean, url?: string, cacheTime?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callbackQueryId' is not null or undefined
            assertParamExists('answerCallbackQueryPost', 'callbackQueryId', callbackQueryId)
            const localVarPath = `/answerCallbackQuery`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (callbackQueryId !== undefined) { 
                localVarFormParams.append('callback_query_id', callbackQueryId as any);
            }
    
            if (text !== undefined) { 
                localVarFormParams.append('text', text as any);
            }
    
            if (showAlert !== undefined) { 
                localVarFormParams.append('show_alert', String(showAlert) as any);
            }
    
            if (url !== undefined) { 
                localVarFormParams.append('url', url as any);
            }
    
            if (cacheTime !== undefined) { 
                localVarFormParams.append('cache_time', cacheTime as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send answers to an inline query. On success, *True* is returned.   No more than **50** results per query are allowed.
         * @param {string} inlineQueryId Unique identifier for the answered query
         * @param {Array<InlineQueryResult>} results A JSON-serialized array of results for the inline query
         * @param {number} [cacheTime] The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
         * @param {boolean} [isPersonal] Pass *True* if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query.
         * @param {string} [nextOffset] Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don\\\&#39;t support pagination. Offset length can\\\&#39;t exceed 64 bytes.
         * @param {InlineQueryResultsButton} [button] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerInlineQueryPost: async (inlineQueryId: string, results: Array<InlineQueryResult>, cacheTime?: number, isPersonal?: boolean, nextOffset?: string, button?: InlineQueryResultsButton, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineQueryId' is not null or undefined
            assertParamExists('answerInlineQueryPost', 'inlineQueryId', inlineQueryId)
            // verify required parameter 'results' is not null or undefined
            assertParamExists('answerInlineQueryPost', 'results', results)
            const localVarPath = `/answerInlineQuery`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (inlineQueryId !== undefined) { 
                localVarFormParams.append('inline_query_id', inlineQueryId as any);
            }
                if (results) {
                localVarFormParams.append('results', results.join(COLLECTION_FORMATS.csv));
            }

    
            if (cacheTime !== undefined) { 
                localVarFormParams.append('cache_time', cacheTime as any);
            }
    
            if (isPersonal !== undefined) { 
                localVarFormParams.append('is_personal', String(isPersonal) as any);
            }
    
            if (nextOffset !== undefined) { 
                localVarFormParams.append('next_offset', nextOffset as any);
            }
    
            if (button !== undefined) { 
                localVarFormParams.append('button', new Blob([JSON.stringify(button)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\\_checkout\\_query*. Use this method to respond to such pre-checkout queries. On success, *True* is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
         * @param {string} preCheckoutQueryId Unique identifier for the query to be answered
         * @param {boolean} ok Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
         * @param {string} [errorMessage] Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \\\&quot;Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\\\&quot;). Telegram will display this message to the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerPreCheckoutQueryPost: async (preCheckoutQueryId: string, ok: boolean, errorMessage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'preCheckoutQueryId' is not null or undefined
            assertParamExists('answerPreCheckoutQueryPost', 'preCheckoutQueryId', preCheckoutQueryId)
            // verify required parameter 'ok' is not null or undefined
            assertParamExists('answerPreCheckoutQueryPost', 'ok', ok)
            const localVarPath = `/answerPreCheckoutQuery`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (preCheckoutQueryId !== undefined) { 
                localVarFormParams.append('pre_checkout_query_id', preCheckoutQueryId as any);
            }
    
            if (ok !== undefined) { 
                localVarFormParams.append('ok', String(ok) as any);
            }
    
            if (errorMessage !== undefined) { 
                localVarFormParams.append('error_message', errorMessage as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * If you sent an invoice requesting a shipping address and the parameter *is\\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\\_query* field to the bot. Use this method to reply to shipping queries. On success, *True* is returned.
         * @param {string} shippingQueryId Unique identifier for the query to be answered
         * @param {boolean} ok Pass *True* if delivery to the specified address is possible and *False* if there are any problems (for example, if delivery to the specified address is not possible)
         * @param {Array<ShippingOption>} [shippingOptions] Required if *ok* is *True*. A JSON-serialized array of available shipping options.
         * @param {string} [errorMessage] Required if *ok* is *False*. Error message in human readable form that explains why it is impossible to complete the order (e.g. “Sorry, delivery to your desired address is unavailable”). Telegram will display this message to the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerShippingQueryPost: async (shippingQueryId: string, ok: boolean, shippingOptions?: Array<ShippingOption>, errorMessage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingQueryId' is not null or undefined
            assertParamExists('answerShippingQueryPost', 'shippingQueryId', shippingQueryId)
            // verify required parameter 'ok' is not null or undefined
            assertParamExists('answerShippingQueryPost', 'ok', ok)
            const localVarPath = `/answerShippingQuery`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (shippingQueryId !== undefined) { 
                localVarFormParams.append('shipping_query_id', shippingQueryId as any);
            }
    
            if (ok !== undefined) { 
                localVarFormParams.append('ok', String(ok) as any);
            }
                if (shippingOptions) {
                localVarFormParams.append('shipping_options', shippingOptions.join(COLLECTION_FORMATS.csv));
            }

    
            if (errorMessage !== undefined) { 
                localVarFormParams.append('error_message', errorMessage as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to set the result of an interaction with a [Web App](https://core.telegram.org/bots/webapps) and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a [SentWebAppMessage](https://core.telegram.org/bots/api/#sentwebappmessage) object is returned.
         * @param {string} webAppQueryId Unique identifier for the query to be answered
         * @param {InlineQueryResult} result 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerWebAppQueryPost: async (webAppQueryId: string, result: InlineQueryResult, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webAppQueryId' is not null or undefined
            assertParamExists('answerWebAppQueryPost', 'webAppQueryId', webAppQueryId)
            // verify required parameter 'result' is not null or undefined
            assertParamExists('answerWebAppQueryPost', 'result', result)
            const localVarPath = `/answerWebAppQuery`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (webAppQueryId !== undefined) { 
                localVarFormParams.append('web_app_query_id', webAppQueryId as any);
            }
    
            if (result !== undefined) { 
                localVarFormParams.append('result', new Blob([JSON.stringify(result)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the *can\\_invite\\_users* administrator right. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveChatJoinRequestPost: async (chatId: SendMessagePostRequestChatId, userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('approveChatJoinRequestPost', 'chatId', chatId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('approveChatJoinRequestPost', 'userId', userId)
            const localVarPath = `/approveChatJoinRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {BanChatMemberPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {number} [untilDate] Date when the user will be unbanned; Unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only.
         * @param {boolean} [revokeMessages] Pass *True* to delete all messages from the chat for the user that is being removed. If *False*, the user will be able to see messages in the group that were sent before the user was removed. Always *True* for supergroups and channels.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banChatMemberPost: async (chatId: BanChatMemberPostRequestChatId, userId: number, untilDate?: number, revokeMessages?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('banChatMemberPost', 'chatId', chatId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('banChatMemberPost', 'userId', userId)
            const localVarPath = `/banChatMember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (untilDate !== undefined) { 
                localVarFormParams.append('until_date', untilDate as any);
            }
    
            if (revokeMessages !== undefined) { 
                localVarFormParams.append('revoke_messages', String(revokeMessages) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to ban a channel chat in a supergroup or a channel. Until the chat is [unbanned](https://core.telegram.org/bots/api/#unbanchatsenderchat), the owner of the banned chat won\'t be able to send messages on behalf of **any of their channels**. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} senderChatId Unique identifier of the target sender chat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banChatSenderChatPost: async (chatId: SendMessagePostRequestChatId, senderChatId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('banChatSenderChatPost', 'chatId', chatId)
            // verify required parameter 'senderChatId' is not null or undefined
            assertParamExists('banChatSenderChatPost', 'senderChatId', senderChatId)
            const localVarPath = `/banChatSenderChat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (senderChatId !== undefined) { 
                localVarFormParams.append('sender_chat_id', senderChatId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights, unless it is the creator of the topic. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeForumTopicPost: async (chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('closeForumTopicPost', 'chatId', chatId)
            // verify required parameter 'messageThreadId' is not null or undefined
            assertParamExists('closeForumTopicPost', 'messageThreadId', messageThreadId)
            const localVarPath = `/closeForumTopic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to close an open \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeGeneralForumTopicPost: async (chatId: RestrictChatMemberPostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('closeGeneralForumTopicPost', 'chatId', chatId)
            const localVarPath = `/closeGeneralForumTopic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn\'t launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closePost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/close`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Converts a given regular gift to Telegram Stars. Requires the *can\\_convert\\_gifts\\_to\\_stars* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} ownedGiftId Unique identifier of the regular gift that should be converted to Telegram Stars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertGiftToStarsPost: async (businessConnectionId: string, ownedGiftId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('convertGiftToStarsPost', 'businessConnectionId', businessConnectionId)
            // verify required parameter 'ownedGiftId' is not null or undefined
            assertParamExists('convertGiftToStarsPost', 'ownedGiftId', ownedGiftId)
            const localVarPath = `/convertGiftToStars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (ownedGiftId !== undefined) { 
                localVarFormParams.append('owned_gift_id', ownedGiftId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to copy messages of any kind. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can\'t be copied. A quiz [poll](https://core.telegram.org/bots/api/#poll) can be copied only if the value of the field *correct\\_option\\_id* is known to the bot. The method is analogous to the method [forwardMessage](https://core.telegram.org/bots/api/#forwardmessage), but the copied message doesn\'t have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {ForwardMessagePostRequestFromChatId} fromChatId 
         * @param {number} messageId Message identifier in the chat specified in *from\\\\_chat\\\\_id*
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [videoStartTimestamp] New start timestamp for the copied video in the message
         * @param {string} [caption] New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
         * @param {string} [parseMode] Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the new caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media. Ignored if a new caption isn\\\&#39;t specified.
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyMessagePost: async (chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagePostRequestFromChatId, messageId: number, messageThreadId?: number, videoStartTimestamp?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('copyMessagePost', 'chatId', chatId)
            // verify required parameter 'fromChatId' is not null or undefined
            assertParamExists('copyMessagePost', 'fromChatId', fromChatId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('copyMessagePost', 'messageId', messageId)
            const localVarPath = `/copyMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (fromChatId !== undefined) { 
                localVarFormParams.append('from_chat_id', new Blob([JSON.stringify(fromChatId)], { type: "application/json", }));
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
            if (videoStartTimestamp !== undefined) { 
                localVarFormParams.append('video_start_timestamp', videoStartTimestamp as any);
            }
    
            if (caption !== undefined) { 
                localVarFormParams.append('caption', caption as any);
            }
    
            if (parseMode !== undefined) { 
                localVarFormParams.append('parse_mode', parseMode as any);
            }
                if (captionEntities) {
                localVarFormParams.append('caption_entities', captionEntities.join(COLLECTION_FORMATS.csv));
            }

    
            if (showCaptionAboveMedia !== undefined) { 
                localVarFormParams.append('show_caption_above_media', String(showCaptionAboveMedia) as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to copy messages of any kind. If some of the specified messages can\'t be found or copied, they are skipped. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can\'t be copied. A quiz [poll](https://core.telegram.org/bots/api/#poll) can be copied only if the value of the field *correct\\_option\\_id* is known to the bot. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied messages don\'t have a link to the original message. Album grouping is kept for copied messages. On success, an array of [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent messages is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {ForwardMessagesPostRequestFromChatId} fromChatId 
         * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages in the chat *from\\\\_chat\\\\_id* to copy. The identifiers must be specified in a strictly increasing order.
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {boolean} [disableNotification] Sends the messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent messages from forwarding and saving
         * @param {boolean} [removeCaption] Pass *True* to copy the messages without their captions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyMessagesPost: async (chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagesPostRequestFromChatId, messageIds: Array<number>, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, removeCaption?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('copyMessagesPost', 'chatId', chatId)
            // verify required parameter 'fromChatId' is not null or undefined
            assertParamExists('copyMessagesPost', 'fromChatId', fromChatId)
            // verify required parameter 'messageIds' is not null or undefined
            assertParamExists('copyMessagesPost', 'messageIds', messageIds)
            const localVarPath = `/copyMessages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (fromChatId !== undefined) { 
                localVarFormParams.append('from_chat_id', new Blob([JSON.stringify(fromChatId)], { type: "application/json", }));
            }
                if (messageIds) {
                localVarFormParams.append('message_ids', messageIds.join(COLLECTION_FORMATS.csv));
            }

    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (removeCaption !== undefined) { 
                localVarFormParams.append('remove_caption', String(removeCaption) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api/#revokechatinvitelink). Returns the new invite link as [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [name] Invite link name; 0-32 characters
         * @param {number} [expireDate] Point in time (Unix timestamp) when the link will expire
         * @param {number} [memberLimit] The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
         * @param {boolean} [createsJoinRequest] *True*, if users joining the chat via the link need to be approved by chat administrators. If *True*, *member\\\\_limit* can\\\&#39;t be specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatInviteLinkPost: async (chatId: SendMessagePostRequestChatId, name?: string, expireDate?: number, memberLimit?: number, createsJoinRequest?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('createChatInviteLinkPost', 'chatId', chatId)
            const localVarPath = `/createChatInviteLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (expireDate !== undefined) { 
                localVarFormParams.append('expire_date', expireDate as any);
            }
    
            if (memberLimit !== undefined) { 
                localVarFormParams.append('member_limit', memberLimit as any);
            }
    
            if (createsJoinRequest !== undefined) { 
                localVarFormParams.append('creates_join_request', String(createsJoinRequest) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to create a [subscription invite link](https://telegram.org/blog/superchannels-star-reactions-subscriptions#star-subscriptions) for a channel chat. The bot must have the *can\\_invite\\_users* administrator rights. The link can be edited using the method [editChatSubscriptionInviteLink](https://core.telegram.org/bots/api/#editchatsubscriptioninvitelink) or revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api/#revokechatinvitelink). Returns the new invite link as a [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {CreateChatSubscriptionInviteLinkPostRequestChatId} chatId 
         * @param {number} subscriptionPeriod The number of seconds the subscription will be active for before the next payment. Currently, it must always be 2592000 (30 days).
         * @param {number} subscriptionPrice The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat; 1-10000
         * @param {string} [name] Invite link name; 0-32 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatSubscriptionInviteLinkPost: async (chatId: CreateChatSubscriptionInviteLinkPostRequestChatId, subscriptionPeriod: number, subscriptionPrice: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('createChatSubscriptionInviteLinkPost', 'chatId', chatId)
            // verify required parameter 'subscriptionPeriod' is not null or undefined
            assertParamExists('createChatSubscriptionInviteLinkPost', 'subscriptionPeriod', subscriptionPeriod)
            // verify required parameter 'subscriptionPrice' is not null or undefined
            assertParamExists('createChatSubscriptionInviteLinkPost', 'subscriptionPrice', subscriptionPrice)
            const localVarPath = `/createChatSubscriptionInviteLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (subscriptionPeriod !== undefined) { 
                localVarFormParams.append('subscription_period', subscriptionPeriod as any);
            }
    
            if (subscriptionPrice !== undefined) { 
                localVarFormParams.append('subscription_price', subscriptionPrice as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns information about the created topic as a [ForumTopic](https://core.telegram.org/bots/api/#forumtopic) object.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {string} name Topic name, 1-128 characters
         * @param {CreateForumTopicPostIconColorEnum} [iconColor] Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F)
         * @param {string} [iconCustomEmojiId] Unique identifier of the custom emoji shown as the topic icon. Use [getForumTopicIconStickers](https://core.telegram.org/bots/api/#getforumtopiciconstickers) to get all allowed custom emoji identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createForumTopicPost: async (chatId: RestrictChatMemberPostRequestChatId, name: string, iconColor?: CreateForumTopicPostIconColorEnum, iconCustomEmojiId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('createForumTopicPost', 'chatId', chatId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createForumTopicPost', 'name', name)
            const localVarPath = `/createForumTopic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (iconColor !== undefined) { 
                localVarFormParams.append('icon_color', iconColor as any);
            }
    
            if (iconCustomEmojiId !== undefined) { 
                localVarFormParams.append('icon_custom_emoji_id', iconCustomEmojiId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to create a link for an invoice. Returns the created invoice link as *String* on success.
         * @param {string} title Product name, 1-32 characters
         * @param {string} description Product description, 1-255 characters
         * @param {string} payload Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.
         * @param {string} currency Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies). Pass “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {Array<LabeledPrice>} prices Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the link will be created. For payments in [Telegram Stars](https://t.me/BotNews/90) only.
         * @param {string} [providerToken] Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an empty string for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {number} [subscriptionPeriod] The number of seconds the subscription will be active for before the next payment. The currency must be set to “XTR” (Telegram Stars) if the parameter is used. Currently, it must always be 2592000 (30 days) if specified. Any number of subscriptions can be active for a given bot at the same time, including multiple concurrent subscriptions from the same user. Subscription price must no exceed 10000 Telegram Stars.
         * @param {number} [maxTipAmount] The maximum accepted amount for tips in the *smallest units* of the currency (integer, **not** float/double). For example, for a maximum tip of &#x60;US$ 1.45&#x60; pass &#x60;max_tip_amount &#x3D; 145&#x60;. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {Array<number>} [suggestedTipAmounts] A JSON-serialized array of suggested amounts of tips in the *smallest units* of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed *max\\\\_tip\\\\_amount*.
         * @param {string} [providerData] JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
         * @param {string} [photoUrl] URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
         * @param {number} [photoSize] Photo size in bytes
         * @param {number} [photoWidth] Photo width
         * @param {number} [photoHeight] Photo height
         * @param {boolean} [needName] Pass *True* if you require the user\\\&#39;s full name to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needPhoneNumber] Pass *True* if you require the user\\\&#39;s phone number to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needEmail] Pass *True* if you require the user\\\&#39;s email address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needShippingAddress] Pass *True* if you require the user\\\&#39;s shipping address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [sendPhoneNumberToProvider] Pass *True* if the user\\\&#39;s phone number should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [sendEmailToProvider] Pass *True* if the user\\\&#39;s email address should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [isFlexible] Pass *True* if the final price depends on the shipping method. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvoiceLinkPost: async (title: string, description: string, payload: string, currency: string, prices: Array<LabeledPrice>, businessConnectionId?: string, providerToken?: string, subscriptionPeriod?: number, maxTipAmount?: number, suggestedTipAmounts?: Array<number>, providerData?: string, photoUrl?: string, photoSize?: number, photoWidth?: number, photoHeight?: number, needName?: boolean, needPhoneNumber?: boolean, needEmail?: boolean, needShippingAddress?: boolean, sendPhoneNumberToProvider?: boolean, sendEmailToProvider?: boolean, isFlexible?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('createInvoiceLinkPost', 'title', title)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('createInvoiceLinkPost', 'description', description)
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('createInvoiceLinkPost', 'payload', payload)
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('createInvoiceLinkPost', 'currency', currency)
            // verify required parameter 'prices' is not null or undefined
            assertParamExists('createInvoiceLinkPost', 'prices', prices)
            const localVarPath = `/createInvoiceLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (payload !== undefined) { 
                localVarFormParams.append('payload', payload as any);
            }
    
            if (providerToken !== undefined) { 
                localVarFormParams.append('provider_token', providerToken as any);
            }
    
            if (currency !== undefined) { 
                localVarFormParams.append('currency', currency as any);
            }
                if (prices) {
                localVarFormParams.append('prices', prices.join(COLLECTION_FORMATS.csv));
            }

    
            if (subscriptionPeriod !== undefined) { 
                localVarFormParams.append('subscription_period', subscriptionPeriod as any);
            }
    
            if (maxTipAmount !== undefined) { 
                localVarFormParams.append('max_tip_amount', maxTipAmount as any);
            }
                if (suggestedTipAmounts) {
                localVarFormParams.append('suggested_tip_amounts', suggestedTipAmounts.join(COLLECTION_FORMATS.csv));
            }

    
            if (providerData !== undefined) { 
                localVarFormParams.append('provider_data', providerData as any);
            }
    
            if (photoUrl !== undefined) { 
                localVarFormParams.append('photo_url', photoUrl as any);
            }
    
            if (photoSize !== undefined) { 
                localVarFormParams.append('photo_size', photoSize as any);
            }
    
            if (photoWidth !== undefined) { 
                localVarFormParams.append('photo_width', photoWidth as any);
            }
    
            if (photoHeight !== undefined) { 
                localVarFormParams.append('photo_height', photoHeight as any);
            }
    
            if (needName !== undefined) { 
                localVarFormParams.append('need_name', String(needName) as any);
            }
    
            if (needPhoneNumber !== undefined) { 
                localVarFormParams.append('need_phone_number', String(needPhoneNumber) as any);
            }
    
            if (needEmail !== undefined) { 
                localVarFormParams.append('need_email', String(needEmail) as any);
            }
    
            if (needShippingAddress !== undefined) { 
                localVarFormParams.append('need_shipping_address', String(needShippingAddress) as any);
            }
    
            if (sendPhoneNumberToProvider !== undefined) { 
                localVarFormParams.append('send_phone_number_to_provider', String(sendPhoneNumberToProvider) as any);
            }
    
            if (sendEmailToProvider !== undefined) { 
                localVarFormParams.append('send_email_to_provider', String(sendEmailToProvider) as any);
            }
    
            if (isFlexible !== undefined) { 
                localVarFormParams.append('is_flexible', String(isFlexible) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns *True* on success.
         * @param {number} userId User identifier of created sticker set owner
         * @param {string} name Short name of sticker set, to be used in &#x60;t.me/addstickers/&#x60; URLs (e.g., *animals*). Can contain only English letters, digits and underscores. Must begin with a letter, can\\\&#39;t contain consecutive underscores and must end in &#x60;\\\&quot;_by_&lt;bot_username&gt;\\\&quot;&#x60;. &#x60;&lt;bot_username&gt;&#x60; is case insensitive. 1-64 characters.
         * @param {string} title Sticker set title, 1-64 characters
         * @param {Array<InputSticker>} stickers A JSON-serialized list of 1-50 initial stickers to be added to the sticker set
         * @param {CreateNewStickerSetPostStickerTypeEnum} [stickerType] Type of stickers in the set, pass “regular”, “mask”, or “custom\\\\_emoji”. By default, a regular sticker set is created.
         * @param {boolean} [needsRepainting] Pass *True* if stickers in the sticker set must be repainted to the color of text when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context; for custom emoji sticker sets only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewStickerSetPost: async (userId: number, name: string, title: string, stickers: Array<InputSticker>, stickerType?: CreateNewStickerSetPostStickerTypeEnum, needsRepainting?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createNewStickerSetPost', 'userId', userId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createNewStickerSetPost', 'name', name)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('createNewStickerSetPost', 'title', title)
            // verify required parameter 'stickers' is not null or undefined
            assertParamExists('createNewStickerSetPost', 'stickers', stickers)
            const localVarPath = `/createNewStickerSet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
                if (stickers) {
                localVarFormParams.append('stickers', stickers.join(COLLECTION_FORMATS.csv));
            }

    
            if (stickerType !== undefined) { 
                localVarFormParams.append('sticker_type', stickerType as any);
            }
    
            if (needsRepainting !== undefined) { 
                localVarFormParams.append('needs_repainting', String(needsRepainting) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the *can\\_invite\\_users* administrator right. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineChatJoinRequestPost: async (chatId: SendMessagePostRequestChatId, userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('declineChatJoinRequestPost', 'chatId', chatId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('declineChatJoinRequestPost', 'userId', userId)
            const localVarPath = `/declineChatJoinRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete messages on behalf of a business account. Requires the *can\\_delete\\_sent\\_messages* business bot right to delete messages sent by the bot itself, or the *can\\_delete\\_all\\_messages* business bot right to delete any message. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection on behalf of which to delete the messages
         * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages to delete. All messages must be from the same chat. See [deleteMessage](https://core.telegram.org/bots/api/#deletemessage) for limitations on which messages can be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessMessagesPost: async (businessConnectionId: string, messageIds: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('deleteBusinessMessagesPost', 'businessConnectionId', businessConnectionId)
            // verify required parameter 'messageIds' is not null or undefined
            assertParamExists('deleteBusinessMessagesPost', 'messageIds', messageIds)
            const localVarPath = `/deleteBusinessMessages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
                if (messageIds) {
                localVarFormParams.append('message_ids', messageIds.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete a chat photo. Photos can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatPhotoPost: async (chatId: SendMessagePostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('deleteChatPhotoPost', 'chatId', chatId)
            const localVarPath = `/deleteChatPhoto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatStickerSetPost: async (chatId: RestrictChatMemberPostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('deleteChatStickerSetPost', 'chatId', chatId)
            const localVarPath = `/deleteChatStickerSet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_delete\\_messages* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteForumTopicPost: async (chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('deleteForumTopicPost', 'chatId', chatId)
            // verify required parameter 'messageThreadId' is not null or undefined
            assertParamExists('deleteForumTopicPost', 'messageThreadId', messageThreadId)
            const localVarPath = `/deleteForumTopic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete a message, including service messages, with the following limitations:   \\- A message can only be deleted if it was sent less than 48 hours ago.   \\- Service messages about a supergroup, channel, or forum topic creation can\'t be deleted.   \\- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.   \\- Bots can delete outgoing messages in private chats, groups, and supergroups.   \\- Bots can delete incoming messages in private chats.   \\- Bots granted *can\\_post\\_messages* permissions can delete outgoing messages in channels.   \\- If the bot is an administrator of a group, it can delete any message there.   \\- If the bot has *can\\_delete\\_messages* permission in a supergroup or a channel, it can delete any message there.   Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} messageId Identifier of the message to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessagePost: async (chatId: SendMessagePostRequestChatId, messageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('deleteMessagePost', 'chatId', chatId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('deleteMessagePost', 'messageId', messageId)
            const localVarPath = `/deleteMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete multiple messages simultaneously. If some of the specified messages can\'t be found, they are skipped. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages to delete. See [deleteMessage](https://core.telegram.org/bots/api/#deletemessage) for limitations on which messages can be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessagesPost: async (chatId: SendMessagePostRequestChatId, messageIds: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('deleteMessagesPost', 'chatId', chatId)
            // verify required parameter 'messageIds' is not null or undefined
            assertParamExists('deleteMessagesPost', 'messageIds', messageIds)
            const localVarPath = `/deleteMessages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
                if (messageIds) {
                localVarFormParams.append('message_ids', messageIds.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the list of the bot\'s commands for the given scope and user language. After deletion, [higher level commands](https://core.telegram.org/bots/api/#determining-list-of-commands) will be shown to affected users. Returns *True* on success.
         * @param {BotCommandScope} [scope] 
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyCommandsPost: async (scope?: BotCommandScope, languageCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deleteMyCommands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (scope !== undefined) { 
                localVarFormParams.append('scope', new Blob([JSON.stringify(scope)], { type: "application/json", }));
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('language_code', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStickerFromSetPost: async (sticker: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sticker' is not null or undefined
            assertParamExists('deleteStickerFromSetPost', 'sticker', sticker)
            const localVarPath = `/deleteStickerFromSet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (sticker !== undefined) { 
                localVarFormParams.append('sticker', sticker as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete a sticker set that was created by the bot. Returns *True* on success.
         * @param {string} name Sticker set name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStickerSetPost: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteStickerSetPost', 'name', name)
            const localVarPath = `/deleteStickerSet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a story previously posted by the bot on behalf of a managed business account. Requires the *can\\_manage\\_stories* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {number} storyId Unique identifier of the story to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoryPost: async (businessConnectionId: string, storyId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('deleteStoryPost', 'businessConnectionId', businessConnectionId)
            // verify required parameter 'storyId' is not null or undefined
            assertParamExists('deleteStoryPost', 'storyId', storyId)
            const localVarPath = `/deleteStory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (storyId !== undefined) { 
                localVarFormParams.append('story_id', storyId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
         * @param {boolean} [dropPendingUpdates] Pass *True* to drop all pending updates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookPost: async (dropPendingUpdates?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deleteWebhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (dropPendingUpdates !== undefined) { 
                localVarFormParams.append('drop_pending_updates', String(dropPendingUpdates) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} inviteLink The invite link to edit
         * @param {string} [name] Invite link name; 0-32 characters
         * @param {number} [expireDate] Point in time (Unix timestamp) when the link will expire
         * @param {number} [memberLimit] The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
         * @param {boolean} [createsJoinRequest] *True*, if users joining the chat via the link need to be approved by chat administrators. If *True*, *member\\\\_limit* can\\\&#39;t be specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editChatInviteLinkPost: async (chatId: SendMessagePostRequestChatId, inviteLink: string, name?: string, expireDate?: number, memberLimit?: number, createsJoinRequest?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('editChatInviteLinkPost', 'chatId', chatId)
            // verify required parameter 'inviteLink' is not null or undefined
            assertParamExists('editChatInviteLinkPost', 'inviteLink', inviteLink)
            const localVarPath = `/editChatInviteLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (inviteLink !== undefined) { 
                localVarFormParams.append('invite_link', inviteLink as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (expireDate !== undefined) { 
                localVarFormParams.append('expire_date', expireDate as any);
            }
    
            if (memberLimit !== undefined) { 
                localVarFormParams.append('member_limit', memberLimit as any);
            }
    
            if (createsJoinRequest !== undefined) { 
                localVarFormParams.append('creates_join_request', String(createsJoinRequest) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to edit a subscription invite link created by the bot. The bot must have the *can\\_invite\\_users* administrator rights. Returns the edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} inviteLink The invite link to edit
         * @param {string} [name] Invite link name; 0-32 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editChatSubscriptionInviteLinkPost: async (chatId: SendMessagePostRequestChatId, inviteLink: string, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('editChatSubscriptionInviteLinkPost', 'chatId', chatId)
            // verify required parameter 'inviteLink' is not null or undefined
            assertParamExists('editChatSubscriptionInviteLinkPost', 'inviteLink', inviteLink)
            const localVarPath = `/editChatSubscriptionInviteLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (inviteLink !== undefined) { 
                localVarFormParams.append('invite_link', inviteLink as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights, unless it is the creator of the topic. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {string} [name] New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept
         * @param {string} [iconCustomEmojiId] New unique identifier of the custom emoji shown as the topic icon. Use [getForumTopicIconStickers](https://core.telegram.org/bots/api/#getforumtopiciconstickers) to get all allowed custom emoji identifiers. Pass an empty string to remove the icon. If not specified, the current icon will be kept
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editForumTopicPost: async (chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, name?: string, iconCustomEmojiId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('editForumTopicPost', 'chatId', chatId)
            // verify required parameter 'messageThreadId' is not null or undefined
            assertParamExists('editForumTopicPost', 'messageThreadId', messageThreadId)
            const localVarPath = `/editForumTopic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (iconCustomEmojiId !== undefined) { 
                localVarFormParams.append('icon_custom_emoji_id', iconCustomEmojiId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to edit the name of the \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {string} name New topic name, 1-128 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editGeneralForumTopicPost: async (chatId: RestrictChatMemberPostRequestChatId, name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('editGeneralForumTopicPost', 'chatId', chatId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('editGeneralForumTopicPost', 'name', name)
            const localVarPath = `/editGeneralForumTopic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {string} [caption] New caption of the message, 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media. Supported only for animation, photo and video messages.
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageCaptionPost: async (businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, replyMarkup?: InlineKeyboardMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/editMessageCaption`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
            if (inlineMessageId !== undefined) { 
                localVarFormParams.append('inline_message_id', inlineMessageId as any);
            }
    
            if (caption !== undefined) { 
                localVarFormParams.append('caption', caption as any);
            }
    
            if (parseMode !== undefined) { 
                localVarFormParams.append('parse_mode', parseMode as any);
            }
                if (captionEntities) {
                localVarFormParams.append('caption_entities', captionEntities.join(COLLECTION_FORMATS.csv));
            }

    
            if (showCaptionAboveMedia !== undefined) { 
                localVarFormParams.append('show_caption_above_media', String(showCaptionAboveMedia) as any);
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to edit live location messages. A location can be edited until its *live\\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
         * @param {number} latitude Latitude of new location
         * @param {number} longitude Longitude of new location
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {number} [livePeriod] New period in seconds during which the location can be updated, starting from the message send date. If 0x7FFFFFFF is specified, then the location can be updated forever. Otherwise, the new value must not exceed the current *live\\\\_period* by more than a day, and the live location expiration date must remain within the next 90 days. If not specified, then *live\\\\_period* remains unchanged
         * @param {number} [horizontalAccuracy] The radius of uncertainty for the location, measured in meters; 0-1500
         * @param {number} [heading] Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
         * @param {number} [proximityAlertRadius] The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageLiveLocationPost: async (latitude: number, longitude: number, businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, livePeriod?: number, horizontalAccuracy?: number, heading?: number, proximityAlertRadius?: number, replyMarkup?: InlineKeyboardMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('editMessageLiveLocationPost', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('editMessageLiveLocationPost', 'longitude', longitude)
            const localVarPath = `/editMessageLiveLocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
            if (inlineMessageId !== undefined) { 
                localVarFormParams.append('inline_message_id', inlineMessageId as any);
            }
    
            if (latitude !== undefined) { 
                localVarFormParams.append('latitude', latitude as any);
            }
    
            if (longitude !== undefined) { 
                localVarFormParams.append('longitude', longitude as any);
            }
    
            if (livePeriod !== undefined) { 
                localVarFormParams.append('live_period', livePeriod as any);
            }
    
            if (horizontalAccuracy !== undefined) { 
                localVarFormParams.append('horizontal_accuracy', horizontalAccuracy as any);
            }
    
            if (heading !== undefined) { 
                localVarFormParams.append('heading', heading as any);
            }
    
            if (proximityAlertRadius !== undefined) { 
                localVarFormParams.append('proximity_alert_radius', proximityAlertRadius as any);
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to edit animation, audio, document, photo, or video messages, or to add media to text messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can\'t be uploaded; use a previously uploaded file via its file\\_id or specify a URL. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
         * @param {InputMedia} media 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageMediaPost: async (media: InputMedia, businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, replyMarkup?: InlineKeyboardMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'media' is not null or undefined
            assertParamExists('editMessageMediaPost', 'media', media)
            const localVarPath = `/editMessageMedia`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
            if (inlineMessageId !== undefined) { 
                localVarFormParams.append('inline_message_id', inlineMessageId as any);
            }
    
            if (media !== undefined) { 
                localVarFormParams.append('media', new Blob([JSON.stringify(media)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageReplyMarkupPost: async (businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, replyMarkup?: InlineKeyboardMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/editMessageReplyMarkup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
            if (inlineMessageId !== undefined) { 
                localVarFormParams.append('inline_message_id', inlineMessageId as any);
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
         * @param {string} text New text of the message, 1-4096 characters after entities parsing
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {string} [parseMode] Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [entities] A JSON-serialized list of special entities that appear in message text, which can be specified instead of *parse\\\\_mode*
         * @param {LinkPreviewOptions} [linkPreviewOptions] 
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageTextPost: async (text: string, businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, parseMode?: string, entities?: Array<MessageEntity>, linkPreviewOptions?: LinkPreviewOptions, replyMarkup?: InlineKeyboardMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            assertParamExists('editMessageTextPost', 'text', text)
            const localVarPath = `/editMessageText`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
            if (inlineMessageId !== undefined) { 
                localVarFormParams.append('inline_message_id', inlineMessageId as any);
            }
    
            if (text !== undefined) { 
                localVarFormParams.append('text', text as any);
            }
    
            if (parseMode !== undefined) { 
                localVarFormParams.append('parse_mode', parseMode as any);
            }
                if (entities) {
                localVarFormParams.append('entities', entities.join(COLLECTION_FORMATS.csv));
            }

    
            if (linkPreviewOptions !== undefined) { 
                localVarFormParams.append('link_preview_options', new Blob([JSON.stringify(linkPreviewOptions)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits a story previously posted by the bot on behalf of a managed business account. Requires the *can\\_manage\\_stories* business bot right. Returns [Story](https://core.telegram.org/bots/api/#story) on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {number} storyId Unique identifier of the story to edit
         * @param {InputStoryContent} content 
         * @param {string} [caption] Caption of the story, 0-2048 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the story caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {Array<StoryArea>} [areas] A JSON-serialized list of clickable areas to be shown on the story
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoryPost: async (businessConnectionId: string, storyId: number, content: InputStoryContent, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, areas?: Array<StoryArea>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('editStoryPost', 'businessConnectionId', businessConnectionId)
            // verify required parameter 'storyId' is not null or undefined
            assertParamExists('editStoryPost', 'storyId', storyId)
            // verify required parameter 'content' is not null or undefined
            assertParamExists('editStoryPost', 'content', content)
            const localVarPath = `/editStory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (storyId !== undefined) { 
                localVarFormParams.append('story_id', storyId as any);
            }
    
            if (content !== undefined) { 
                localVarFormParams.append('content', new Blob([JSON.stringify(content)], { type: "application/json", }));
            }
    
            if (caption !== undefined) { 
                localVarFormParams.append('caption', caption as any);
            }
    
            if (parseMode !== undefined) { 
                localVarFormParams.append('parse_mode', parseMode as any);
            }
                if (captionEntities) {
                localVarFormParams.append('caption_entities', captionEntities.join(COLLECTION_FORMATS.csv));
            }

                if (areas) {
                localVarFormParams.append('areas', areas.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows the bot to cancel or re-enable extension of a subscription paid in Telegram Stars. Returns *True* on success.
         * @param {number} userId Identifier of the user whose subscription will be edited
         * @param {string} telegramPaymentChargeId Telegram payment identifier for the subscription
         * @param {boolean} isCanceled Pass *True* to cancel extension of the user subscription; the subscription must be active up to the end of the current subscription period. Pass *False* to allow the user to re-enable a subscription that was previously canceled by the bot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserStarSubscriptionPost: async (userId: number, telegramPaymentChargeId: string, isCanceled: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('editUserStarSubscriptionPost', 'userId', userId)
            // verify required parameter 'telegramPaymentChargeId' is not null or undefined
            assertParamExists('editUserStarSubscriptionPost', 'telegramPaymentChargeId', telegramPaymentChargeId)
            // verify required parameter 'isCanceled' is not null or undefined
            assertParamExists('editUserStarSubscriptionPost', 'isCanceled', isCanceled)
            const localVarPath = `/editUserStarSubscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (telegramPaymentChargeId !== undefined) { 
                localVarFormParams.append('telegram_payment_charge_id', telegramPaymentChargeId as any);
            }
    
            if (isCanceled !== undefined) { 
                localVarFormParams.append('is_canceled', String(isCanceled) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as *String* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportChatInviteLinkPost: async (chatId: SendMessagePostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('exportChatInviteLinkPost', 'chatId', chatId)
            const localVarPath = `/exportChatInviteLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to forward messages of any kind. Service messages and messages with protected content can\'t be forwarded. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {ForwardMessagePostRequestFromChatId} fromChatId 
         * @param {number} messageId Message identifier in the chat specified in *from\\\\_chat\\\\_id*
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [videoStartTimestamp] New start timestamp for the forwarded video in the message
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the forwarded message from forwarding and saving
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forwardMessagePost: async (chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagePostRequestFromChatId, messageId: number, messageThreadId?: number, videoStartTimestamp?: number, disableNotification?: boolean, protectContent?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('forwardMessagePost', 'chatId', chatId)
            // verify required parameter 'fromChatId' is not null or undefined
            assertParamExists('forwardMessagePost', 'fromChatId', fromChatId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('forwardMessagePost', 'messageId', messageId)
            const localVarPath = `/forwardMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (fromChatId !== undefined) { 
                localVarFormParams.append('from_chat_id', new Blob([JSON.stringify(fromChatId)], { type: "application/json", }));
            }
    
            if (videoStartTimestamp !== undefined) { 
                localVarFormParams.append('video_start_timestamp', videoStartTimestamp as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to forward multiple messages of any kind. If some of the specified messages can\'t be found or forwarded, they are skipped. Service messages and messages with protected content can\'t be forwarded. Album grouping is kept for forwarded messages. On success, an array of [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent messages is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {ForwardMessagesPostRequestFromChatId} fromChatId 
         * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages in the chat *from\\\\_chat\\\\_id* to forward. The identifiers must be specified in a strictly increasing order.
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {boolean} [disableNotification] Sends the messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the forwarded messages from forwarding and saving
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forwardMessagesPost: async (chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagesPostRequestFromChatId, messageIds: Array<number>, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('forwardMessagesPost', 'chatId', chatId)
            // verify required parameter 'fromChatId' is not null or undefined
            assertParamExists('forwardMessagesPost', 'fromChatId', fromChatId)
            // verify required parameter 'messageIds' is not null or undefined
            assertParamExists('forwardMessagesPost', 'messageIds', messageIds)
            const localVarPath = `/forwardMessages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (fromChatId !== undefined) { 
                localVarFormParams.append('from_chat_id', new Blob([JSON.stringify(fromChatId)], { type: "application/json", }));
            }
                if (messageIds) {
                localVarFormParams.append('message_ids', messageIds.join(COLLECTION_FORMATS.csv));
            }

    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of gifts that can be sent by the bot to users and channel chats. Requires no parameters. Returns a [Gifts](https://core.telegram.org/bots/api/#gifts) object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableGiftsPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getAvailableGifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the gifts received and owned by a managed business account. Requires the *can\\_view\\_gifts\\_and\\_stars* business bot right. Returns [OwnedGifts](https://core.telegram.org/bots/api/#ownedgifts) on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {boolean} [excludeUnsaved] Pass True to exclude gifts that aren\\\&#39;t saved to the account\\\&#39;s profile page
         * @param {boolean} [excludeSaved] Pass True to exclude gifts that are saved to the account\\\&#39;s profile page
         * @param {boolean} [excludeUnlimited] Pass True to exclude gifts that can be purchased an unlimited number of times
         * @param {boolean} [excludeLimited] Pass True to exclude gifts that can be purchased a limited number of times
         * @param {boolean} [excludeUnique] Pass True to exclude unique gifts
         * @param {boolean} [sortByPrice] Pass True to sort results by gift price instead of send date. Sorting is applied before pagination.
         * @param {string} [offset] Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
         * @param {number} [limit] The maximum number of gifts to be returned; 1-100. Defaults to 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessAccountGiftsPost: async (businessConnectionId: string, excludeUnsaved?: boolean, excludeSaved?: boolean, excludeUnlimited?: boolean, excludeLimited?: boolean, excludeUnique?: boolean, sortByPrice?: boolean, offset?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('getBusinessAccountGiftsPost', 'businessConnectionId', businessConnectionId)
            const localVarPath = `/getBusinessAccountGifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (excludeUnsaved !== undefined) { 
                localVarFormParams.append('exclude_unsaved', String(excludeUnsaved) as any);
            }
    
            if (excludeSaved !== undefined) { 
                localVarFormParams.append('exclude_saved', String(excludeSaved) as any);
            }
    
            if (excludeUnlimited !== undefined) { 
                localVarFormParams.append('exclude_unlimited', String(excludeUnlimited) as any);
            }
    
            if (excludeLimited !== undefined) { 
                localVarFormParams.append('exclude_limited', String(excludeLimited) as any);
            }
    
            if (excludeUnique !== undefined) { 
                localVarFormParams.append('exclude_unique', String(excludeUnique) as any);
            }
    
            if (sortByPrice !== undefined) { 
                localVarFormParams.append('sort_by_price', String(sortByPrice) as any);
            }
    
            if (offset !== undefined) { 
                localVarFormParams.append('offset', offset as any);
            }
    
            if (limit !== undefined) { 
                localVarFormParams.append('limit', limit as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the amount of Telegram Stars owned by a managed business account. Requires the *can\\_view\\_gifts\\_and\\_stars* business bot right. Returns [StarAmount](https://core.telegram.org/bots/api/#staramount) on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessAccountStarBalancePost: async (businessConnectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('getBusinessAccountStarBalancePost', 'businessConnectionId', businessConnectionId)
            const localVarPath = `/getBusinessAccountStarBalance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get information about the connection of the bot with a business account. Returns a [BusinessConnection](https://core.telegram.org/bots/api/#businessconnection) object on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessConnectionPost: async (businessConnectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('getBusinessConnectionPost', 'businessConnectionId', businessConnectionId)
            const localVarPath = `/getBusinessConnection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get a list of administrators in a chat, which aren\'t bots. Returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatAdministratorsPost: async (chatId: LeaveChatPostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('getChatAdministratorsPost', 'chatId', chatId)
            const localVarPath = `/getChatAdministrators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get the number of members in a chat. Returns *Int* on success.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatMemberCountPost: async (chatId: LeaveChatPostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('getChatMemberCountPost', 'chatId', chatId)
            const localVarPath = `/getChatMemberCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatMemberPost: async (chatId: LeaveChatPostRequestChatId, userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('getChatMemberPost', 'chatId', chatId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getChatMemberPost', 'userId', userId)
            const localVarPath = `/getChatMember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get the current value of the bot\'s menu button in a private chat, or the default menu button. Returns [MenuButton](https://core.telegram.org/bots/api/#menubutton) on success.
         * @param {number} [chatId] Unique identifier for the target private chat. If not specified, default bot\\\&#39;s menu button will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatMenuButtonPost: async (chatId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getChatMenuButton`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', chatId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get up-to-date information about the chat. Returns a [ChatFullInfo](https://core.telegram.org/bots/api/#chatfullinfo) object on success.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatPost: async (chatId: LeaveChatPostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('getChatPost', 'chatId', chatId)
            const localVarPath = `/getChat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of [Sticker](https://core.telegram.org/bots/api/#sticker) objects.
         * @param {Array<string>} customEmojiIds A JSON-serialized list of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomEmojiStickersPost: async (customEmojiIds: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customEmojiIds' is not null or undefined
            assertParamExists('getCustomEmojiStickersPost', 'customEmojiIds', customEmojiIds)
            const localVarPath = `/getCustomEmojiStickers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (customEmojiIds) {
                localVarFormParams.append('custom_emoji_ids', customEmojiIds.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
         * @param {string} fileId File identifier to get information about
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilePost: async (fileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getFilePost', 'fileId', fileId)
            const localVarPath = `/getFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (fileId !== undefined) { 
                localVarFormParams.append('file_id', fileId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of [Sticker](https://core.telegram.org/bots/api/#sticker) objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForumTopicIconStickersPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getForumTopicIconStickers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.  This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and their neighbors are not among them. Please note that this behavior is subject to change.
         * @param {number} userId Target user id
         * @param {number} [chatId] Required if *inline\\\\_message\\\\_id* is not specified. Unique identifier for the target chat
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the sent message
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameHighScoresPost: async (userId: number, chatId?: number, messageId?: number, inlineMessageId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getGameHighScoresPost', 'userId', userId)
            const localVarPath = `/getGameHighScores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', chatId as any);
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
            if (inlineMessageId !== undefined) { 
                localVarFormParams.append('inline_message_id', inlineMessageId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A simple method for testing your bot\'s authentication token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMePost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getMe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get the current list of the bot\'s commands for the given scope and user language. Returns an Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) objects. If commands aren\'t set, an empty list is returned.
         * @param {BotCommandScope} [scope] 
         * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyCommandsPost: async (scope?: BotCommandScope, languageCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getMyCommands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (scope !== undefined) { 
                localVarFormParams.append('scope', new Blob([JSON.stringify(scope)], { type: "application/json", }));
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('language_code', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get the current default administrator rights of the bot. Returns [ChatAdministratorRights](https://core.telegram.org/bots/api/#chatadministratorrights) on success.
         * @param {boolean} [forChannels] Pass *True* to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDefaultAdministratorRightsPost: async (forChannels?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getMyDefaultAdministratorRights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (forChannels !== undefined) { 
                localVarFormParams.append('for_channels', String(forChannels) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get the current bot description for the given user language. Returns [BotDescription](https://core.telegram.org/bots/api/#botdescription) on success.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDescriptionPost: async (languageCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getMyDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (languageCode !== undefined) { 
                localVarFormParams.append('language_code', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get the current bot name for the given user language. Returns [BotName](https://core.telegram.org/bots/api/#botname) on success.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyNamePost: async (languageCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getMyName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (languageCode !== undefined) { 
                localVarFormParams.append('language_code', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get the current bot short description for the given user language. Returns [BotShortDescription](https://core.telegram.org/bots/api/#botshortdescription) on success.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShortDescriptionPost: async (languageCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getMyShortDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (languageCode !== undefined) { 
                localVarFormParams.append('language_code', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the bot\'s Telegram Star transactions in chronological order. On success, returns a [StarTransactions](https://core.telegram.org/bots/api/#startransactions) object.
         * @param {number} [offset] Number of transactions to skip in the response
         * @param {number} [limit] The maximum number of transactions to be retrieved. Values between 1-100 are accepted. Defaults to 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStarTransactionsPost: async (offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getStarTransactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (offset !== undefined) { 
                localVarFormParams.append('offset', offset as any);
            }
    
            if (limit !== undefined) { 
                localVarFormParams.append('limit', limit as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
         * @param {string} name Name of the sticker set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStickerSetPost: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getStickerSetPost', 'name', name)
            const localVarPath = `/getStickerSet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). Returns an Array of [Update](https://core.telegram.org/bots/api/#update) objects.
         * @param {number} [offset] Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\\\\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will be forgotten.
         * @param {number} [limit] Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
         * @param {number} [timeout] Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
         * @param {Array<string>} [allowedUpdates] A JSON-serialized list of the update types you want your bot to receive. For example, specify &#x60;[\\\&quot;message\\\&quot;, \\\&quot;edited_channel_post\\\&quot;, \\\&quot;callback_query\\\&quot;]&#x60; to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all update types except *chat\\\\_member*, *message\\\\_reaction*, and *message\\\\_reaction\\\\_count* (default). If not specified, the previous setting will be used.    Please note that this parameter doesn\\\&#39;t affect updates created before the call to getUpdates, so unwanted updates may be received for a short period of time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpdatesPost: async (offset?: number, limit?: number, timeout?: number, allowedUpdates?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getUpdates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (offset !== undefined) { 
                localVarFormParams.append('offset', offset as any);
            }
    
            if (limit !== undefined) { 
                localVarFormParams.append('limit', limit as any);
            }
    
            if (timeout !== undefined) { 
                localVarFormParams.append('timeout', timeout as any);
            }
                if (allowedUpdates) {
                localVarFormParams.append('allowed_updates', allowedUpdates.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat. Returns a [UserChatBoosts](https://core.telegram.org/bots/api/#userchatboosts) object.
         * @param {GetUserChatBoostsPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserChatBoostsPost: async (chatId: GetUserChatBoostsPostRequestChatId, userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('getUserChatBoostsPost', 'chatId', chatId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserChatBoostsPost', 'userId', userId)
            const localVarPath = `/getUserChatBoosts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
         * @param {number} userId Unique identifier of the target user
         * @param {number} [offset] Sequential number of the first photo to be returned. By default, all photos are returned.
         * @param {number} [limit] Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfilePhotosPost: async (userId: number, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserProfilePhotosPost', 'userId', userId)
            const localVarPath = `/getUserProfilePhotos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (offset !== undefined) { 
                localVarFormParams.append('offset', offset as any);
            }
    
            if (limit !== undefined) { 
                localVarFormParams.append('limit', limit as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookInfoPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getWebhookInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gifts a Telegram Premium subscription to the given user. Returns *True* on success.
         * @param {number} userId Unique identifier of the target user who will receive a Telegram Premium subscription
         * @param {GiftPremiumSubscriptionPostMonthCountEnum} monthCount Number of months the Telegram Premium subscription will be active for the user; must be one of 3, 6, or 12
         * @param {number} starCount Number of Telegram Stars to pay for the Telegram Premium subscription; must be 1000 for 3 months, 1500 for 6 months, and 2500 for 12 months
         * @param {string} [text] Text that will be shown along with the service message about the subscription; 0-128 characters
         * @param {string} [textParseMode] Mode for parsing entities in the text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
         * @param {Array<MessageEntity>} [textEntities] A JSON-serialized list of special entities that appear in the gift text. It can be specified instead of *text\\\\_parse\\\\_mode*. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftPremiumSubscriptionPost: async (userId: number, monthCount: GiftPremiumSubscriptionPostMonthCountEnum, starCount: number, text?: string, textParseMode?: string, textEntities?: Array<MessageEntity>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('giftPremiumSubscriptionPost', 'userId', userId)
            // verify required parameter 'monthCount' is not null or undefined
            assertParamExists('giftPremiumSubscriptionPost', 'monthCount', monthCount)
            // verify required parameter 'starCount' is not null or undefined
            assertParamExists('giftPremiumSubscriptionPost', 'starCount', starCount)
            const localVarPath = `/giftPremiumSubscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (monthCount !== undefined) { 
                localVarFormParams.append('month_count', monthCount as any);
            }
    
            if (starCount !== undefined) { 
                localVarFormParams.append('star_count', starCount as any);
            }
    
            if (text !== undefined) { 
                localVarFormParams.append('text', text as any);
            }
    
            if (textParseMode !== undefined) { 
                localVarFormParams.append('text_parse_mode', textParseMode as any);
            }
                if (textEntities) {
                localVarFormParams.append('text_entities', textEntities.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to hide the \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. The topic will be automatically closed if it was open. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hideGeneralForumTopicPost: async (chatId: RestrictChatMemberPostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('hideGeneralForumTopicPost', 'chatId', chatId)
            const localVarPath = `/hideGeneralForumTopic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveChatPost: async (chatId: LeaveChatPostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('leaveChatPost', 'chatId', chatId)
            const localVarPath = `/leaveChat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logOutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logOut`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the \'can\\_pin\\_messages\' administrator right in a supergroup or \'can\\_edit\\_messages\' administrator right in a channel. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} messageId Identifier of a message to pin
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be pinned
         * @param {boolean} [disableNotification] Pass *True* if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinChatMessagePost: async (chatId: SendMessagePostRequestChatId, messageId: number, businessConnectionId?: string, disableNotification?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('pinChatMessagePost', 'chatId', chatId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('pinChatMessagePost', 'messageId', messageId)
            const localVarPath = `/pinChatMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Posts a story on behalf of a managed business account. Requires the *can\\_manage\\_stories* business bot right. Returns [Story](https://core.telegram.org/bots/api/#story) on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {InputStoryContent} content 
         * @param {PostStoryPostActivePeriodEnum} activePeriod Period after which the story is moved to the archive, in seconds; must be one of &#x60;6 * 3600&#x60;, &#x60;12 * 3600&#x60;, &#x60;86400&#x60;, or &#x60;2 * 86400&#x60;
         * @param {string} [caption] Caption of the story, 0-2048 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the story caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {Array<StoryArea>} [areas] A JSON-serialized list of clickable areas to be shown on the story
         * @param {boolean} [postToChatPage] Pass *True* to keep the story accessible after it expires
         * @param {boolean} [protectContent] Pass *True* if the content of the story must be protected from forwarding and screenshotting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStoryPost: async (businessConnectionId: string, content: InputStoryContent, activePeriod: PostStoryPostActivePeriodEnum, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, areas?: Array<StoryArea>, postToChatPage?: boolean, protectContent?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('postStoryPost', 'businessConnectionId', businessConnectionId)
            // verify required parameter 'content' is not null or undefined
            assertParamExists('postStoryPost', 'content', content)
            // verify required parameter 'activePeriod' is not null or undefined
            assertParamExists('postStoryPost', 'activePeriod', activePeriod)
            const localVarPath = `/postStory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (content !== undefined) { 
                localVarFormParams.append('content', new Blob([JSON.stringify(content)], { type: "application/json", }));
            }
    
            if (activePeriod !== undefined) { 
                localVarFormParams.append('active_period', activePeriod as any);
            }
    
            if (caption !== undefined) { 
                localVarFormParams.append('caption', caption as any);
            }
    
            if (parseMode !== undefined) { 
                localVarFormParams.append('parse_mode', parseMode as any);
            }
                if (captionEntities) {
                localVarFormParams.append('caption_entities', captionEntities.join(COLLECTION_FORMATS.csv));
            }

                if (areas) {
                localVarFormParams.append('areas', areas.join(COLLECTION_FORMATS.csv));
            }

    
            if (postToChatPage !== undefined) { 
                localVarFormParams.append('post_to_chat_page', String(postToChatPage) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {boolean} [isAnonymous] Pass *True* if the administrator\\\&#39;s presence in the chat is hidden
         * @param {boolean} [canManageChat] Pass *True* if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.
         * @param {boolean} [canDeleteMessages] Pass *True* if the administrator can delete messages of other users
         * @param {boolean} [canManageVideoChats] Pass *True* if the administrator can manage video chats
         * @param {boolean} [canRestrictMembers] Pass *True* if the administrator can restrict, ban or unban chat members, or access supergroup statistics
         * @param {boolean} [canPromoteMembers] Pass *True* if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by him)
         * @param {boolean} [canChangeInfo] Pass *True* if the administrator can change chat title, photo and other settings
         * @param {boolean} [canInviteUsers] Pass *True* if the administrator can invite new users to the chat
         * @param {boolean} [canPostStories] Pass *True* if the administrator can post stories to the chat
         * @param {boolean} [canEditStories] Pass *True* if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat\\\&#39;s story archive
         * @param {boolean} [canDeleteStories] Pass *True* if the administrator can delete stories posted by other users
         * @param {boolean} [canPostMessages] Pass *True* if the administrator can post messages in the channel, or access channel statistics; for channels only
         * @param {boolean} [canEditMessages] Pass *True* if the administrator can edit messages of other users and can pin messages; for channels only
         * @param {boolean} [canPinMessages] Pass *True* if the administrator can pin messages; for supergroups only
         * @param {boolean} [canManageTopics] Pass *True* if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteChatMemberPost: async (chatId: SendMessagePostRequestChatId, userId: number, isAnonymous?: boolean, canManageChat?: boolean, canDeleteMessages?: boolean, canManageVideoChats?: boolean, canRestrictMembers?: boolean, canPromoteMembers?: boolean, canChangeInfo?: boolean, canInviteUsers?: boolean, canPostStories?: boolean, canEditStories?: boolean, canDeleteStories?: boolean, canPostMessages?: boolean, canEditMessages?: boolean, canPinMessages?: boolean, canManageTopics?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('promoteChatMemberPost', 'chatId', chatId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('promoteChatMemberPost', 'userId', userId)
            const localVarPath = `/promoteChatMember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (isAnonymous !== undefined) { 
                localVarFormParams.append('is_anonymous', String(isAnonymous) as any);
            }
    
            if (canManageChat !== undefined) { 
                localVarFormParams.append('can_manage_chat', String(canManageChat) as any);
            }
    
            if (canDeleteMessages !== undefined) { 
                localVarFormParams.append('can_delete_messages', String(canDeleteMessages) as any);
            }
    
            if (canManageVideoChats !== undefined) { 
                localVarFormParams.append('can_manage_video_chats', String(canManageVideoChats) as any);
            }
    
            if (canRestrictMembers !== undefined) { 
                localVarFormParams.append('can_restrict_members', String(canRestrictMembers) as any);
            }
    
            if (canPromoteMembers !== undefined) { 
                localVarFormParams.append('can_promote_members', String(canPromoteMembers) as any);
            }
    
            if (canChangeInfo !== undefined) { 
                localVarFormParams.append('can_change_info', String(canChangeInfo) as any);
            }
    
            if (canInviteUsers !== undefined) { 
                localVarFormParams.append('can_invite_users', String(canInviteUsers) as any);
            }
    
            if (canPostStories !== undefined) { 
                localVarFormParams.append('can_post_stories', String(canPostStories) as any);
            }
    
            if (canEditStories !== undefined) { 
                localVarFormParams.append('can_edit_stories', String(canEditStories) as any);
            }
    
            if (canDeleteStories !== undefined) { 
                localVarFormParams.append('can_delete_stories', String(canDeleteStories) as any);
            }
    
            if (canPostMessages !== undefined) { 
                localVarFormParams.append('can_post_messages', String(canPostMessages) as any);
            }
    
            if (canEditMessages !== undefined) { 
                localVarFormParams.append('can_edit_messages', String(canEditMessages) as any);
            }
    
            if (canPinMessages !== undefined) { 
                localVarFormParams.append('can_pin_messages', String(canPinMessages) as any);
            }
    
            if (canManageTopics !== undefined) { 
                localVarFormParams.append('can_manage_topics', String(canManageTopics) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks incoming message as read on behalf of a business account. Requires the *can\\_read\\_messages* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection on behalf of which to read the message
         * @param {number} chatId Unique identifier of the chat in which the message was received. The chat must have been active in the last 24 hours.
         * @param {number} messageId Unique identifier of the message to mark as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readBusinessMessagePost: async (businessConnectionId: string, chatId: number, messageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('readBusinessMessagePost', 'businessConnectionId', businessConnectionId)
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('readBusinessMessagePost', 'chatId', chatId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('readBusinessMessagePost', 'messageId', messageId)
            const localVarPath = `/readBusinessMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', chatId as any);
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refunds a successful payment in [Telegram Stars](https://t.me/BotNews/90). Returns *True* on success.
         * @param {number} userId Identifier of the user whose payment will be refunded
         * @param {string} telegramPaymentChargeId Telegram payment identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundStarPaymentPost: async (userId: number, telegramPaymentChargeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('refundStarPaymentPost', 'userId', userId)
            // verify required parameter 'telegramPaymentChargeId' is not null or undefined
            assertParamExists('refundStarPaymentPost', 'telegramPaymentChargeId', telegramPaymentChargeId)
            const localVarPath = `/refundStarPayment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (telegramPaymentChargeId !== undefined) { 
                localVarFormParams.append('telegram_payment_charge_id', telegramPaymentChargeId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the current profile photo of a managed business account. Requires the *can\\_edit\\_profile\\_photo* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {boolean} [isPublic] Pass True to remove the public photo, which is visible even if the main photo is hidden by the business account\\\&#39;s privacy settings. After the main photo is removed, the previous profile photo (if present) becomes the main photo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBusinessAccountProfilePhotoPost: async (businessConnectionId: string, isPublic?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('removeBusinessAccountProfilePhotoPost', 'businessConnectionId', businessConnectionId)
            const localVarPath = `/removeBusinessAccountProfilePhoto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (isPublic !== undefined) { 
                localVarFormParams.append('is_public', String(isPublic) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes verification from a chat that is currently verified [on behalf of the organization](https://telegram.org/verify#third-party-verification) represented by the bot. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeChatVerificationPost: async (chatId: SendMessagePostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('removeChatVerificationPost', 'chatId', chatId)
            const localVarPath = `/removeChatVerification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes verification from a user who is currently verified [on behalf of the organization](https://telegram.org/verify#third-party-verification) represented by the bot. Returns *True* on success.
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserVerificationPost: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeUserVerificationPost', 'userId', userId)
            const localVarPath = `/removeUserVerification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights, unless it is the creator of the topic. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reopenForumTopicPost: async (chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('reopenForumTopicPost', 'chatId', chatId)
            // verify required parameter 'messageThreadId' is not null or undefined
            assertParamExists('reopenForumTopicPost', 'messageThreadId', messageThreadId)
            const localVarPath = `/reopenForumTopic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to reopen a closed \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. The topic will be automatically unhidden if it was hidden. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reopenGeneralForumTopicPost: async (chatId: RestrictChatMemberPostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('reopenGeneralForumTopicPost', 'chatId', chatId)
            const localVarPath = `/reopenGeneralForumTopic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling [deleteStickerFromSet](https://core.telegram.org/bots/api/#deletestickerfromset), then [addStickerToSet](https://core.telegram.org/bots/api/#addstickertoset), then [setStickerPositionInSet](https://core.telegram.org/bots/api/#setstickerpositioninset). Returns *True* on success.
         * @param {number} userId User identifier of the sticker set owner
         * @param {string} name Sticker set name
         * @param {string} oldSticker File identifier of the replaced sticker
         * @param {InputSticker} sticker 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceStickerInSetPost: async (userId: number, name: string, oldSticker: string, sticker: InputSticker, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('replaceStickerInSetPost', 'userId', userId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('replaceStickerInSetPost', 'name', name)
            // verify required parameter 'oldSticker' is not null or undefined
            assertParamExists('replaceStickerInSetPost', 'oldSticker', oldSticker)
            // verify required parameter 'sticker' is not null or undefined
            assertParamExists('replaceStickerInSetPost', 'sticker', sticker)
            const localVarPath = `/replaceStickerInSet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (oldSticker !== undefined) { 
                localVarFormParams.append('old_sticker', oldSticker as any);
            }
    
            if (sticker !== undefined) { 
                localVarFormParams.append('sticker', new Blob([JSON.stringify(sticker)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {ChatPermissions} permissions 
         * @param {boolean} [useIndependentChatPermissions] Pass *True* if chat permissions are set independently. Otherwise, the *can\\\\_send\\\\_other\\\\_messages* and *can\\\\_add\\\\_web\\\\_page\\\\_previews* permissions will imply the *can\\\\_send\\\\_messages*, *can\\\\_send\\\\_audios*, *can\\\\_send\\\\_documents*, *can\\\\_send\\\\_photos*, *can\\\\_send\\\\_videos*, *can\\\\_send\\\\_video\\\\_notes*, and *can\\\\_send\\\\_voice\\\\_notes* permissions; the *can\\\\_send\\\\_polls* permission will imply the *can\\\\_send\\\\_messages* permission.
         * @param {number} [untilDate] Date when restrictions will be lifted for the user; Unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restrictChatMemberPost: async (chatId: RestrictChatMemberPostRequestChatId, userId: number, permissions: ChatPermissions, useIndependentChatPermissions?: boolean, untilDate?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('restrictChatMemberPost', 'chatId', chatId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('restrictChatMemberPost', 'userId', userId)
            // verify required parameter 'permissions' is not null or undefined
            assertParamExists('restrictChatMemberPost', 'permissions', permissions)
            const localVarPath = `/restrictChatMember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (permissions !== undefined) { 
                localVarFormParams.append('permissions', new Blob([JSON.stringify(permissions)], { type: "application/json", }));
            }
    
            if (useIndependentChatPermissions !== undefined) { 
                localVarFormParams.append('use_independent_chat_permissions', String(useIndependentChatPermissions) as any);
            }
    
            if (untilDate !== undefined) { 
                localVarFormParams.append('until_date', untilDate as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {RevokeChatInviteLinkPostRequestChatId} chatId 
         * @param {string} inviteLink The invite link to revoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeChatInviteLinkPost: async (chatId: RevokeChatInviteLinkPostRequestChatId, inviteLink: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('revokeChatInviteLinkPost', 'chatId', chatId)
            // verify required parameter 'inviteLink' is not null or undefined
            assertParamExists('revokeChatInviteLinkPost', 'inviteLink', inviteLink)
            const localVarPath = `/revokeChatInviteLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (inviteLink !== undefined) { 
                localVarFormParams.append('invite_link', inviteLink as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stores a message that can be sent by a user of a Mini App. Returns a [PreparedInlineMessage](https://core.telegram.org/bots/api/#preparedinlinemessage) object.
         * @param {number} userId Unique identifier of the target user that can use the prepared message
         * @param {InlineQueryResult} result 
         * @param {boolean} [allowUserChats] Pass *True* if the message can be sent to private chats with users
         * @param {boolean} [allowBotChats] Pass *True* if the message can be sent to private chats with bots
         * @param {boolean} [allowGroupChats] Pass *True* if the message can be sent to group and supergroup chats
         * @param {boolean} [allowChannelChats] Pass *True* if the message can be sent to channel chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savePreparedInlineMessagePost: async (userId: number, result: InlineQueryResult, allowUserChats?: boolean, allowBotChats?: boolean, allowGroupChats?: boolean, allowChannelChats?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('savePreparedInlineMessagePost', 'userId', userId)
            // verify required parameter 'result' is not null or undefined
            assertParamExists('savePreparedInlineMessagePost', 'result', result)
            const localVarPath = `/savePreparedInlineMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (result !== undefined) { 
                localVarFormParams.append('result', new Blob([JSON.stringify(result)], { type: "application/json", }));
            }
    
            if (allowUserChats !== undefined) { 
                localVarFormParams.append('allow_user_chats', String(allowUserChats) as any);
            }
    
            if (allowBotChats !== undefined) { 
                localVarFormParams.append('allow_bot_chats', String(allowBotChats) as any);
            }
    
            if (allowGroupChats !== undefined) { 
                localVarFormParams.append('allow_group_chats', String(allowGroupChats) as any);
            }
    
            if (allowChannelChats !== undefined) { 
                localVarFormParams.append('allow_channel_chats', String(allowChannelChats) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendAnimationPostRequestAnimation} animation 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [duration] Duration of sent animation in seconds
         * @param {number} [width] Animation width
         * @param {number} [height] Animation height
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {string} [caption] Animation caption (may also be used when resending animation by *file\\\\_id*), 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
         * @param {boolean} [hasSpoiler] Pass *True* if the animation needs to be covered with a spoiler animation
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAnimationPost: async (chatId: SendMessagePostRequestChatId, animation: SendAnimationPostRequestAnimation, businessConnectionId?: string, messageThreadId?: number, duration?: number, width?: number, height?: number, thumbnail?: SendAudioPostRequestThumbnail, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, hasSpoiler?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendAnimationPost', 'chatId', chatId)
            // verify required parameter 'animation' is not null or undefined
            assertParamExists('sendAnimationPost', 'animation', animation)
            const localVarPath = `/sendAnimation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (animation !== undefined) { 
                localVarFormParams.append('animation', new Blob([JSON.stringify(animation)], { type: "application/json", }));
            }
    
            if (duration !== undefined) { 
                localVarFormParams.append('duration', duration as any);
            }
    
            if (width !== undefined) { 
                localVarFormParams.append('width', width as any);
            }
    
            if (height !== undefined) { 
                localVarFormParams.append('height', height as any);
            }
    
            if (thumbnail !== undefined) { 
                localVarFormParams.append('thumbnail', new Blob([JSON.stringify(thumbnail)], { type: "application/json", }));
            }
    
            if (caption !== undefined) { 
                localVarFormParams.append('caption', caption as any);
            }
    
            if (parseMode !== undefined) { 
                localVarFormParams.append('parse_mode', parseMode as any);
            }
                if (captionEntities) {
                localVarFormParams.append('caption_entities', captionEntities.join(COLLECTION_FORMATS.csv));
            }

    
            if (showCaptionAboveMedia !== undefined) { 
                localVarFormParams.append('show_caption_above_media', String(showCaptionAboveMedia) as any);
            }
    
            if (hasSpoiler !== undefined) { 
                localVarFormParams.append('has_spoiler', String(hasSpoiler) as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.  For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendAudioPostRequestAudio} audio 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [caption] Audio caption, 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {number} [duration] Duration of the audio in seconds
         * @param {string} [performer] Performer
         * @param {string} [title] Track name
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAudioPost: async (chatId: SendMessagePostRequestChatId, audio: SendAudioPostRequestAudio, businessConnectionId?: string, messageThreadId?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, duration?: number, performer?: string, title?: string, thumbnail?: SendAudioPostRequestThumbnail, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendAudioPost', 'chatId', chatId)
            // verify required parameter 'audio' is not null or undefined
            assertParamExists('sendAudioPost', 'audio', audio)
            const localVarPath = `/sendAudio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (audio !== undefined) { 
                localVarFormParams.append('audio', new Blob([JSON.stringify(audio)], { type: "application/json", }));
            }
    
            if (caption !== undefined) { 
                localVarFormParams.append('caption', caption as any);
            }
    
            if (parseMode !== undefined) { 
                localVarFormParams.append('parse_mode', parseMode as any);
            }
                if (captionEntities) {
                localVarFormParams.append('caption_entities', captionEntities.join(COLLECTION_FORMATS.csv));
            }

    
            if (duration !== undefined) { 
                localVarFormParams.append('duration', duration as any);
            }
    
            if (performer !== undefined) { 
                localVarFormParams.append('performer', performer as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (thumbnail !== undefined) { 
                localVarFormParams.append('thumbnail', new Blob([JSON.stringify(thumbnail)], { type: "application/json", }));
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method when you need to tell the user that something is happening on the bot\'s side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.  Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\\_photo*. The user will see a “sending photo” status for the bot.  We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendChatActionPostActionEnum} action Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\\\\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\\\\_video* or *upload\\\\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\\\\_voice* or *upload\\\\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\\\\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *choose\\\\_sticker* for [stickers](https://core.telegram.org/bots/api/#sendsticker), *find\\\\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\\\\_video\\\\_note* or *upload\\\\_video\\\\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the action will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread; for supergroups only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendChatActionPost: async (chatId: SendMessagePostRequestChatId, action: SendChatActionPostActionEnum, businessConnectionId?: string, messageThreadId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendChatActionPost', 'chatId', chatId)
            // verify required parameter 'action' is not null or undefined
            assertParamExists('sendChatActionPost', 'action', action)
            const localVarPath = `/sendChatAction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (action !== undefined) { 
                localVarFormParams.append('action', action as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} phoneNumber Contact\\\&#39;s phone number
         * @param {string} firstName Contact\\\&#39;s first name
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [lastName] Contact\\\&#39;s last name
         * @param {string} [vcard] Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendContactPost: async (chatId: SendMessagePostRequestChatId, phoneNumber: string, firstName: string, businessConnectionId?: string, messageThreadId?: number, lastName?: string, vcard?: string, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendContactPost', 'chatId', chatId)
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('sendContactPost', 'phoneNumber', phoneNumber)
            // verify required parameter 'firstName' is not null or undefined
            assertParamExists('sendContactPost', 'firstName', firstName)
            const localVarPath = `/sendContact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (phoneNumber !== undefined) { 
                localVarFormParams.append('phone_number', phoneNumber as any);
            }
    
            if (firstName !== undefined) { 
                localVarFormParams.append('first_name', firstName as any);
            }
    
            if (lastName !== undefined) { 
                localVarFormParams.append('last_name', lastName as any);
            }
    
            if (vcard !== undefined) { 
                localVarFormParams.append('vcard', vcard as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {SendDicePostEmojiEnum} [emoji] Emoji on which the dice throw animation is based. Currently, must be one of “🎲”, “🎯”, “🏀”, “⚽”, “🎳”, or “🎰”. Dice can have values 1-6 for “🎲”, “🎯” and “🎳”, values 1-5 for “🏀” and “⚽”, and values 1-64 for “🎰”. Defaults to “🎲”
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDicePost: async (chatId: SendMessagePostRequestChatId, businessConnectionId?: string, messageThreadId?: number, emoji?: SendDicePostEmojiEnum, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendDicePost', 'chatId', chatId)
            const localVarPath = `/sendDice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (emoji !== undefined) { 
                localVarFormParams.append('emoji', emoji as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendDocumentPostRequestDocument} document 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {string} [caption] Document caption (may also be used when resending documents by *file\\\\_id*), 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [disableContentTypeDetection] Disables automatic server-side content type detection for files uploaded using multipart/form-data
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDocumentPost: async (chatId: SendMessagePostRequestChatId, document: SendDocumentPostRequestDocument, businessConnectionId?: string, messageThreadId?: number, thumbnail?: SendAudioPostRequestThumbnail, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, disableContentTypeDetection?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendDocumentPost', 'chatId', chatId)
            // verify required parameter 'document' is not null or undefined
            assertParamExists('sendDocumentPost', 'document', document)
            const localVarPath = `/sendDocument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (document !== undefined) { 
                localVarFormParams.append('document', new Blob([JSON.stringify(document)], { type: "application/json", }));
            }
    
            if (thumbnail !== undefined) { 
                localVarFormParams.append('thumbnail', new Blob([JSON.stringify(thumbnail)], { type: "application/json", }));
            }
    
            if (caption !== undefined) { 
                localVarFormParams.append('caption', caption as any);
            }
    
            if (parseMode !== undefined) { 
                localVarFormParams.append('parse_mode', parseMode as any);
            }
                if (captionEntities) {
                localVarFormParams.append('caption_entities', captionEntities.join(COLLECTION_FORMATS.csv));
            }

    
            if (disableContentTypeDetection !== undefined) { 
                localVarFormParams.append('disable_content_type_detection', String(disableContentTypeDetection) as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {number} chatId Unique identifier for the target chat
         * @param {string} gameShortName Short name of the game, serves as the unique identifier for the game. Set up your games via [@BotFather](https://t.me/botfather).
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendGamePost: async (chatId: number, gameShortName: string, businessConnectionId?: string, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: InlineKeyboardMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendGamePost', 'chatId', chatId)
            // verify required parameter 'gameShortName' is not null or undefined
            assertParamExists('sendGamePost', 'gameShortName', gameShortName)
            const localVarPath = `/sendGame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', chatId as any);
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (gameShortName !== undefined) { 
                localVarFormParams.append('game_short_name', gameShortName as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a gift to the given user or channel chat. The gift can\'t be converted to Telegram Stars by the receiver. Returns *True* on success.
         * @param {string} giftId Identifier of the gift
         * @param {number} [userId] Required if *chat\\\\_id* is not specified. Unique identifier of the target user who will receive the gift.
         * @param {SendGiftPostRequestChatId} [chatId] 
         * @param {boolean} [payForUpgrade] Pass *True* to pay for the gift upgrade from the bot\\\&#39;s balance, thereby making the upgrade free for the receiver
         * @param {string} [text] Text that will be shown along with the gift; 0-128 characters
         * @param {string} [textParseMode] Mode for parsing entities in the text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
         * @param {Array<MessageEntity>} [textEntities] A JSON-serialized list of special entities that appear in the gift text. It can be specified instead of *text\\\\_parse\\\\_mode*. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendGiftPost: async (giftId: string, userId?: number, chatId?: SendGiftPostRequestChatId, payForUpgrade?: boolean, text?: string, textParseMode?: string, textEntities?: Array<MessageEntity>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'giftId' is not null or undefined
            assertParamExists('sendGiftPost', 'giftId', giftId)
            const localVarPath = `/sendGift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (giftId !== undefined) { 
                localVarFormParams.append('gift_id', giftId as any);
            }
    
            if (payForUpgrade !== undefined) { 
                localVarFormParams.append('pay_for_upgrade', String(payForUpgrade) as any);
            }
    
            if (text !== undefined) { 
                localVarFormParams.append('text', text as any);
            }
    
            if (textParseMode !== undefined) { 
                localVarFormParams.append('text_parse_mode', textParseMode as any);
            }
                if (textEntities) {
                localVarFormParams.append('text_entities', textEntities.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} title Product name, 1-32 characters
         * @param {string} description Product description, 1-255 characters
         * @param {string} payload Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.
         * @param {string} currency Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies). Pass “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {Array<LabeledPrice>} prices Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [providerToken] Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an empty string for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {number} [maxTipAmount] The maximum accepted amount for tips in the *smallest units* of the currency (integer, **not** float/double). For example, for a maximum tip of &#x60;US$ 1.45&#x60; pass &#x60;max_tip_amount &#x3D; 145&#x60;. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {Array<number>} [suggestedTipAmounts] A JSON-serialized array of suggested amounts of tips in the *smallest units* of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed *max\\\\_tip\\\\_amount*.
         * @param {string} [startParameter] Unique deep-linking parameter. If left empty, **forwarded copies** of the sent message will have a *Pay* button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a *URL* button with a deep link to the bot (instead of a *Pay* button), with the value used as the start parameter
         * @param {string} [providerData] JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
         * @param {string} [photoUrl] URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
         * @param {number} [photoSize] Photo size in bytes
         * @param {number} [photoWidth] Photo width
         * @param {number} [photoHeight] Photo height
         * @param {boolean} [needName] Pass *True* if you require the user\\\&#39;s full name to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needPhoneNumber] Pass *True* if you require the user\\\&#39;s phone number to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needEmail] Pass *True* if you require the user\\\&#39;s email address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needShippingAddress] Pass *True* if you require the user\\\&#39;s shipping address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [sendPhoneNumberToProvider] Pass *True* if the user\\\&#39;s phone number should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [sendEmailToProvider] Pass *True* if the user\\\&#39;s email address should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [isFlexible] Pass *True* if the final price depends on the shipping method. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendInvoicePost: async (chatId: SendMessagePostRequestChatId, title: string, description: string, payload: string, currency: string, prices: Array<LabeledPrice>, messageThreadId?: number, providerToken?: string, maxTipAmount?: number, suggestedTipAmounts?: Array<number>, startParameter?: string, providerData?: string, photoUrl?: string, photoSize?: number, photoWidth?: number, photoHeight?: number, needName?: boolean, needPhoneNumber?: boolean, needEmail?: boolean, needShippingAddress?: boolean, sendPhoneNumberToProvider?: boolean, sendEmailToProvider?: boolean, isFlexible?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: InlineKeyboardMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendInvoicePost', 'chatId', chatId)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('sendInvoicePost', 'title', title)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('sendInvoicePost', 'description', description)
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('sendInvoicePost', 'payload', payload)
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('sendInvoicePost', 'currency', currency)
            // verify required parameter 'prices' is not null or undefined
            assertParamExists('sendInvoicePost', 'prices', prices)
            const localVarPath = `/sendInvoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (payload !== undefined) { 
                localVarFormParams.append('payload', payload as any);
            }
    
            if (providerToken !== undefined) { 
                localVarFormParams.append('provider_token', providerToken as any);
            }
    
            if (currency !== undefined) { 
                localVarFormParams.append('currency', currency as any);
            }
                if (prices) {
                localVarFormParams.append('prices', prices.join(COLLECTION_FORMATS.csv));
            }

    
            if (maxTipAmount !== undefined) { 
                localVarFormParams.append('max_tip_amount', maxTipAmount as any);
            }
                if (suggestedTipAmounts) {
                localVarFormParams.append('suggested_tip_amounts', suggestedTipAmounts.join(COLLECTION_FORMATS.csv));
            }

    
            if (startParameter !== undefined) { 
                localVarFormParams.append('start_parameter', startParameter as any);
            }
    
            if (providerData !== undefined) { 
                localVarFormParams.append('provider_data', providerData as any);
            }
    
            if (photoUrl !== undefined) { 
                localVarFormParams.append('photo_url', photoUrl as any);
            }
    
            if (photoSize !== undefined) { 
                localVarFormParams.append('photo_size', photoSize as any);
            }
    
            if (photoWidth !== undefined) { 
                localVarFormParams.append('photo_width', photoWidth as any);
            }
    
            if (photoHeight !== undefined) { 
                localVarFormParams.append('photo_height', photoHeight as any);
            }
    
            if (needName !== undefined) { 
                localVarFormParams.append('need_name', String(needName) as any);
            }
    
            if (needPhoneNumber !== undefined) { 
                localVarFormParams.append('need_phone_number', String(needPhoneNumber) as any);
            }
    
            if (needEmail !== undefined) { 
                localVarFormParams.append('need_email', String(needEmail) as any);
            }
    
            if (needShippingAddress !== undefined) { 
                localVarFormParams.append('need_shipping_address', String(needShippingAddress) as any);
            }
    
            if (sendPhoneNumberToProvider !== undefined) { 
                localVarFormParams.append('send_phone_number_to_provider', String(sendPhoneNumberToProvider) as any);
            }
    
            if (sendEmailToProvider !== undefined) { 
                localVarFormParams.append('send_email_to_provider', String(sendEmailToProvider) as any);
            }
    
            if (isFlexible !== undefined) { 
                localVarFormParams.append('is_flexible', String(isFlexible) as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} latitude Latitude of the location
         * @param {number} longitude Longitude of the location
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [horizontalAccuracy] The radius of uncertainty for the location, measured in meters; 0-1500
         * @param {number} [livePeriod] Period in seconds during which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.
         * @param {number} [heading] For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
         * @param {number} [proximityAlertRadius] For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendLocationPost: async (chatId: SendMessagePostRequestChatId, latitude: number, longitude: number, businessConnectionId?: string, messageThreadId?: number, horizontalAccuracy?: number, livePeriod?: number, heading?: number, proximityAlertRadius?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendLocationPost', 'chatId', chatId)
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('sendLocationPost', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('sendLocationPost', 'longitude', longitude)
            const localVarPath = `/sendLocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (latitude !== undefined) { 
                localVarFormParams.append('latitude', latitude as any);
            }
    
            if (longitude !== undefined) { 
                localVarFormParams.append('longitude', longitude as any);
            }
    
            if (horizontalAccuracy !== undefined) { 
                localVarFormParams.append('horizontal_accuracy', horizontalAccuracy as any);
            }
    
            if (livePeriod !== undefined) { 
                localVarFormParams.append('live_period', livePeriod as any);
            }
    
            if (heading !== undefined) { 
                localVarFormParams.append('heading', heading as any);
            }
    
            if (proximityAlertRadius !== undefined) { 
                localVarFormParams.append('proximity_alert_radius', proximityAlertRadius as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {Array<SendMediaGroupPostRequestMediaInner>} media A JSON-serialized array describing messages to be sent, must include 2-10 items
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {boolean} [disableNotification] Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent messages from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMediaGroupPost: async (chatId: SendMessagePostRequestChatId, media: Array<SendMediaGroupPostRequestMediaInner>, businessConnectionId?: string, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendMediaGroupPost', 'chatId', chatId)
            // verify required parameter 'media' is not null or undefined
            assertParamExists('sendMediaGroupPost', 'media', media)
            const localVarPath = `/sendMediaGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
                if (media) {
                localVarFormParams.append('media', media.join(COLLECTION_FORMATS.csv));
            }

    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} text Text of the message to be sent, 1-4096 characters after entities parsing
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [parseMode] Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [entities] A JSON-serialized list of special entities that appear in message text, which can be specified instead of *parse\\\\_mode*
         * @param {LinkPreviewOptions} [linkPreviewOptions] 
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessagePost: async (chatId: SendMessagePostRequestChatId, text: string, businessConnectionId?: string, messageThreadId?: number, parseMode?: string, entities?: Array<MessageEntity>, linkPreviewOptions?: LinkPreviewOptions, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendMessagePost', 'chatId', chatId)
            // verify required parameter 'text' is not null or undefined
            assertParamExists('sendMessagePost', 'text', text)
            const localVarPath = `/sendMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (text !== undefined) { 
                localVarFormParams.append('text', text as any);
            }
    
            if (parseMode !== undefined) { 
                localVarFormParams.append('parse_mode', parseMode as any);
            }
                if (entities) {
                localVarFormParams.append('entities', entities.join(COLLECTION_FORMATS.csv));
            }

    
            if (linkPreviewOptions !== undefined) { 
                localVarFormParams.append('link_preview_options', new Blob([JSON.stringify(linkPreviewOptions)], { type: "application/json", }));
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send paid media. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendPaidMediaPostRequestChatId} chatId 
         * @param {number} starCount The number of Telegram Stars that must be paid to buy access to the media; 1-10000
         * @param {Array<InputPaidMedia>} media A JSON-serialized array describing the media to be sent; up to 10 items
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {string} [payload] Bot-defined paid media payload, 0-128 bytes. This will not be displayed to the user, use it for your internal processes.
         * @param {string} [caption] Media caption, 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the media caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPaidMediaPost: async (chatId: SendPaidMediaPostRequestChatId, starCount: number, media: Array<InputPaidMedia>, businessConnectionId?: string, payload?: string, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendPaidMediaPost', 'chatId', chatId)
            // verify required parameter 'starCount' is not null or undefined
            assertParamExists('sendPaidMediaPost', 'starCount', starCount)
            // verify required parameter 'media' is not null or undefined
            assertParamExists('sendPaidMediaPost', 'media', media)
            const localVarPath = `/sendPaidMedia`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (starCount !== undefined) { 
                localVarFormParams.append('star_count', starCount as any);
            }
                if (media) {
                localVarFormParams.append('media', media.join(COLLECTION_FORMATS.csv));
            }

    
            if (payload !== undefined) { 
                localVarFormParams.append('payload', payload as any);
            }
    
            if (caption !== undefined) { 
                localVarFormParams.append('caption', caption as any);
            }
    
            if (parseMode !== undefined) { 
                localVarFormParams.append('parse_mode', parseMode as any);
            }
                if (captionEntities) {
                localVarFormParams.append('caption_entities', captionEntities.join(COLLECTION_FORMATS.csv));
            }

    
            if (showCaptionAboveMedia !== undefined) { 
                localVarFormParams.append('show_caption_above_media', String(showCaptionAboveMedia) as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendPhotoPostRequestPhoto} photo 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [caption] Photo caption (may also be used when resending photos by *file\\\\_id*), 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
         * @param {boolean} [hasSpoiler] Pass *True* if the photo needs to be covered with a spoiler animation
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPhotoPost: async (chatId: SendMessagePostRequestChatId, photo: SendPhotoPostRequestPhoto, businessConnectionId?: string, messageThreadId?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, hasSpoiler?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendPhotoPost', 'chatId', chatId)
            // verify required parameter 'photo' is not null or undefined
            assertParamExists('sendPhotoPost', 'photo', photo)
            const localVarPath = `/sendPhoto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (photo !== undefined) { 
                localVarFormParams.append('photo', new Blob([JSON.stringify(photo)], { type: "application/json", }));
            }
    
            if (caption !== undefined) { 
                localVarFormParams.append('caption', caption as any);
            }
    
            if (parseMode !== undefined) { 
                localVarFormParams.append('parse_mode', parseMode as any);
            }
                if (captionEntities) {
                localVarFormParams.append('caption_entities', captionEntities.join(COLLECTION_FORMATS.csv));
            }

    
            if (showCaptionAboveMedia !== undefined) { 
                localVarFormParams.append('show_caption_above_media', String(showCaptionAboveMedia) as any);
            }
    
            if (hasSpoiler !== undefined) { 
                localVarFormParams.append('has_spoiler', String(hasSpoiler) as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} question Poll question, 1-300 characters
         * @param {Array<InputPollOption>} _options A JSON-serialized list of 2-10 answer options
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [questionParseMode] Mode for parsing entities in the question. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Currently, only custom emoji entities are allowed
         * @param {Array<MessageEntity>} [questionEntities] A JSON-serialized list of special entities that appear in the poll question. It can be specified instead of *question\\\\_parse\\\\_mode*
         * @param {boolean} [isAnonymous] *True*, if the poll needs to be anonymous, defaults to *True*
         * @param {SendPollPostTypeEnum} [type] Poll type, “quiz” or “regular”, defaults to “regular”
         * @param {boolean} [allowsMultipleAnswers] *True*, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
         * @param {number} [correctOptionId] 0-based identifier of the correct answer option, required for polls in quiz mode
         * @param {string} [explanation] Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
         * @param {string} [explanationParseMode] Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [explanationEntities] A JSON-serialized list of special entities that appear in the poll explanation. It can be specified instead of *explanation\\\\_parse\\\\_mode*
         * @param {number} [openPeriod] Amount of time in seconds the poll will be active after creation, 5-600. Can\\\&#39;t be used together with *close\\\\_date*.
         * @param {number} [closeDate] Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can\\\&#39;t be used together with *open\\\\_period*.
         * @param {boolean} [isClosed] Pass *True* if the poll needs to be immediately closed. This can be useful for poll preview.
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPollPost: async (chatId: SendMessagePostRequestChatId, question: string, _options: Array<InputPollOption>, businessConnectionId?: string, messageThreadId?: number, questionParseMode?: string, questionEntities?: Array<MessageEntity>, isAnonymous?: boolean, type?: SendPollPostTypeEnum, allowsMultipleAnswers?: boolean, correctOptionId?: number, explanation?: string, explanationParseMode?: string, explanationEntities?: Array<MessageEntity>, openPeriod?: number, closeDate?: number, isClosed?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendPollPost', 'chatId', chatId)
            // verify required parameter 'question' is not null or undefined
            assertParamExists('sendPollPost', 'question', question)
            // verify required parameter '_options' is not null or undefined
            assertParamExists('sendPollPost', '_options', _options)
            const localVarPath = `/sendPoll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (question !== undefined) { 
                localVarFormParams.append('question', question as any);
            }
    
            if (questionParseMode !== undefined) { 
                localVarFormParams.append('question_parse_mode', questionParseMode as any);
            }
                if (questionEntities) {
                localVarFormParams.append('question_entities', questionEntities.join(COLLECTION_FORMATS.csv));
            }

                if (_options) {
                localVarFormParams.append('options', _options.join(COLLECTION_FORMATS.csv));
            }

    
            if (isAnonymous !== undefined) { 
                localVarFormParams.append('is_anonymous', String(isAnonymous) as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
    
            if (allowsMultipleAnswers !== undefined) { 
                localVarFormParams.append('allows_multiple_answers', String(allowsMultipleAnswers) as any);
            }
    
            if (correctOptionId !== undefined) { 
                localVarFormParams.append('correct_option_id', correctOptionId as any);
            }
    
            if (explanation !== undefined) { 
                localVarFormParams.append('explanation', explanation as any);
            }
    
            if (explanationParseMode !== undefined) { 
                localVarFormParams.append('explanation_parse_mode', explanationParseMode as any);
            }
                if (explanationEntities) {
                localVarFormParams.append('explanation_entities', explanationEntities.join(COLLECTION_FORMATS.csv));
            }

    
            if (openPeriod !== undefined) { 
                localVarFormParams.append('open_period', openPeriod as any);
            }
    
            if (closeDate !== undefined) { 
                localVarFormParams.append('close_date', closeDate as any);
            }
    
            if (isClosed !== undefined) { 
                localVarFormParams.append('is_closed', String(isClosed) as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS, or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendStickerPostRequestSticker} sticker 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [emoji] Emoji associated with the sticker; only for just uploaded stickers
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendStickerPost: async (chatId: SendMessagePostRequestChatId, sticker: SendStickerPostRequestSticker, businessConnectionId?: string, messageThreadId?: number, emoji?: string, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendStickerPost', 'chatId', chatId)
            // verify required parameter 'sticker' is not null or undefined
            assertParamExists('sendStickerPost', 'sticker', sticker)
            const localVarPath = `/sendSticker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (sticker !== undefined) { 
                localVarFormParams.append('sticker', new Blob([JSON.stringify(sticker)], { type: "application/json", }));
            }
    
            if (emoji !== undefined) { 
                localVarFormParams.append('emoji', emoji as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} latitude Latitude of the venue
         * @param {number} longitude Longitude of the venue
         * @param {string} title Name of the venue
         * @param {string} address Address of the venue
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [foursquareId] Foursquare identifier of the venue
         * @param {string} [foursquareType] Foursquare type of the venue, if known. (For example, “arts\\\\_entertainment/default”, “arts\\\\_entertainment/aquarium” or “food/icecream”.)
         * @param {string} [googlePlaceId] Google Places identifier of the venue
         * @param {string} [googlePlaceType] Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVenuePost: async (chatId: SendMessagePostRequestChatId, latitude: number, longitude: number, title: string, address: string, businessConnectionId?: string, messageThreadId?: number, foursquareId?: string, foursquareType?: string, googlePlaceId?: string, googlePlaceType?: string, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendVenuePost', 'chatId', chatId)
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('sendVenuePost', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('sendVenuePost', 'longitude', longitude)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('sendVenuePost', 'title', title)
            // verify required parameter 'address' is not null or undefined
            assertParamExists('sendVenuePost', 'address', address)
            const localVarPath = `/sendVenue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (latitude !== undefined) { 
                localVarFormParams.append('latitude', latitude as any);
            }
    
            if (longitude !== undefined) { 
                localVarFormParams.append('longitude', longitude as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (address !== undefined) { 
                localVarFormParams.append('address', address as any);
            }
    
            if (foursquareId !== undefined) { 
                localVarFormParams.append('foursquare_id', foursquareId as any);
            }
    
            if (foursquareType !== undefined) { 
                localVarFormParams.append('foursquare_type', foursquareType as any);
            }
    
            if (googlePlaceId !== undefined) { 
                localVarFormParams.append('google_place_id', googlePlaceId as any);
            }
    
            if (googlePlaceType !== undefined) { 
                localVarFormParams.append('google_place_type', googlePlaceType as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendVideoNotePostRequestVideoNote} videoNote 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [duration] Duration of sent video in seconds
         * @param {number} [length] Video width and height, i.e. diameter of the video message
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVideoNotePost: async (chatId: SendMessagePostRequestChatId, videoNote: SendVideoNotePostRequestVideoNote, businessConnectionId?: string, messageThreadId?: number, duration?: number, length?: number, thumbnail?: SendAudioPostRequestThumbnail, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendVideoNotePost', 'chatId', chatId)
            // verify required parameter 'videoNote' is not null or undefined
            assertParamExists('sendVideoNotePost', 'videoNote', videoNote)
            const localVarPath = `/sendVideoNote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (videoNote !== undefined) { 
                localVarFormParams.append('video_note', new Blob([JSON.stringify(videoNote)], { type: "application/json", }));
            }
    
            if (duration !== undefined) { 
                localVarFormParams.append('duration', duration as any);
            }
    
            if (length !== undefined) { 
                localVarFormParams.append('length', length as any);
            }
    
            if (thumbnail !== undefined) { 
                localVarFormParams.append('thumbnail', new Blob([JSON.stringify(thumbnail)], { type: "application/json", }));
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendVideoPostRequestVideo} video 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [duration] Duration of sent video in seconds
         * @param {number} [width] Video width
         * @param {number} [height] Video height
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {SendVideoPostRequestCover} [cover] 
         * @param {number} [startTimestamp] Start timestamp for the video in the message
         * @param {string} [caption] Video caption (may also be used when resending videos by *file\\\\_id*), 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
         * @param {boolean} [hasSpoiler] Pass *True* if the video needs to be covered with a spoiler animation
         * @param {boolean} [supportsStreaming] Pass *True* if the uploaded video is suitable for streaming
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVideoPost: async (chatId: SendMessagePostRequestChatId, video: SendVideoPostRequestVideo, businessConnectionId?: string, messageThreadId?: number, duration?: number, width?: number, height?: number, thumbnail?: SendAudioPostRequestThumbnail, cover?: SendVideoPostRequestCover, startTimestamp?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, hasSpoiler?: boolean, supportsStreaming?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendVideoPost', 'chatId', chatId)
            // verify required parameter 'video' is not null or undefined
            assertParamExists('sendVideoPost', 'video', video)
            const localVarPath = `/sendVideo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (video !== undefined) { 
                localVarFormParams.append('video', new Blob([JSON.stringify(video)], { type: "application/json", }));
            }
    
            if (duration !== undefined) { 
                localVarFormParams.append('duration', duration as any);
            }
    
            if (width !== undefined) { 
                localVarFormParams.append('width', width as any);
            }
    
            if (height !== undefined) { 
                localVarFormParams.append('height', height as any);
            }
    
            if (thumbnail !== undefined) { 
                localVarFormParams.append('thumbnail', new Blob([JSON.stringify(thumbnail)], { type: "application/json", }));
            }
    
            if (cover !== undefined) { 
                localVarFormParams.append('cover', new Blob([JSON.stringify(cover)], { type: "application/json", }));
            }
    
            if (startTimestamp !== undefined) { 
                localVarFormParams.append('start_timestamp', startTimestamp as any);
            }
    
            if (caption !== undefined) { 
                localVarFormParams.append('caption', caption as any);
            }
    
            if (parseMode !== undefined) { 
                localVarFormParams.append('parse_mode', parseMode as any);
            }
                if (captionEntities) {
                localVarFormParams.append('caption_entities', captionEntities.join(COLLECTION_FORMATS.csv));
            }

    
            if (showCaptionAboveMedia !== undefined) { 
                localVarFormParams.append('show_caption_above_media', String(showCaptionAboveMedia) as any);
            }
    
            if (hasSpoiler !== undefined) { 
                localVarFormParams.append('has_spoiler', String(hasSpoiler) as any);
            }
    
            if (supportsStreaming !== undefined) { 
                localVarFormParams.append('supports_streaming', String(supportsStreaming) as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS, or in .MP3 format, or in .M4A format (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendVoicePostRequestVoice} voice 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [caption] Voice message caption, 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {number} [duration] Duration of the voice message in seconds
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVoicePost: async (chatId: SendMessagePostRequestChatId, voice: SendVoicePostRequestVoice, businessConnectionId?: string, messageThreadId?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, duration?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('sendVoicePost', 'chatId', chatId)
            // verify required parameter 'voice' is not null or undefined
            assertParamExists('sendVoicePost', 'voice', voice)
            const localVarPath = `/sendVoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
            if (voice !== undefined) { 
                localVarFormParams.append('voice', new Blob([JSON.stringify(voice)], { type: "application/json", }));
            }
    
            if (caption !== undefined) { 
                localVarFormParams.append('caption', caption as any);
            }
    
            if (parseMode !== undefined) { 
                localVarFormParams.append('parse_mode', parseMode as any);
            }
                if (captionEntities) {
                localVarFormParams.append('caption_entities', captionEntities.join(COLLECTION_FORMATS.csv));
            }

    
            if (duration !== undefined) { 
                localVarFormParams.append('duration', duration as any);
            }
    
            if (disableNotification !== undefined) { 
                localVarFormParams.append('disable_notification', String(disableNotification) as any);
            }
    
            if (protectContent !== undefined) { 
                localVarFormParams.append('protect_content', String(protectContent) as any);
            }
    
            if (allowPaidBroadcast !== undefined) { 
                localVarFormParams.append('allow_paid_broadcast', String(allowPaidBroadcast) as any);
            }
    
            if (messageEffectId !== undefined) { 
                localVarFormParams.append('message_effect_id', messageEffectId as any);
            }
    
            if (replyParameters !== undefined) { 
                localVarFormParams.append('reply_parameters', new Blob([JSON.stringify(replyParameters)], { type: "application/json", }));
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes the bio of a managed business account. Requires the *can\\_change\\_bio* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} [bio] The new value of the bio for the business account; 0-140 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBusinessAccountBioPost: async (businessConnectionId: string, bio?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('setBusinessAccountBioPost', 'businessConnectionId', businessConnectionId)
            const localVarPath = `/setBusinessAccountBio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (bio !== undefined) { 
                localVarFormParams.append('bio', bio as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes the privacy settings pertaining to incoming gifts in a managed business account. Requires the *can\\_change\\_gift\\_settings* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {boolean} showGiftButton Pass True, if a button for sending a gift to the user or by the business account must always be shown in the input field
         * @param {AcceptedGiftTypes} acceptedGiftTypes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBusinessAccountGiftSettingsPost: async (businessConnectionId: string, showGiftButton: boolean, acceptedGiftTypes: AcceptedGiftTypes, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('setBusinessAccountGiftSettingsPost', 'businessConnectionId', businessConnectionId)
            // verify required parameter 'showGiftButton' is not null or undefined
            assertParamExists('setBusinessAccountGiftSettingsPost', 'showGiftButton', showGiftButton)
            // verify required parameter 'acceptedGiftTypes' is not null or undefined
            assertParamExists('setBusinessAccountGiftSettingsPost', 'acceptedGiftTypes', acceptedGiftTypes)
            const localVarPath = `/setBusinessAccountGiftSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (showGiftButton !== undefined) { 
                localVarFormParams.append('show_gift_button', String(showGiftButton) as any);
            }
    
            if (acceptedGiftTypes !== undefined) { 
                localVarFormParams.append('accepted_gift_types', new Blob([JSON.stringify(acceptedGiftTypes)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes the first and last name of a managed business account. Requires the *can\\_change\\_name* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} firstName The new value of the first name for the business account; 1-64 characters
         * @param {string} [lastName] The new value of the last name for the business account; 0-64 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBusinessAccountNamePost: async (businessConnectionId: string, firstName: string, lastName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('setBusinessAccountNamePost', 'businessConnectionId', businessConnectionId)
            // verify required parameter 'firstName' is not null or undefined
            assertParamExists('setBusinessAccountNamePost', 'firstName', firstName)
            const localVarPath = `/setBusinessAccountName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (firstName !== undefined) { 
                localVarFormParams.append('first_name', firstName as any);
            }
    
            if (lastName !== undefined) { 
                localVarFormParams.append('last_name', lastName as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes the profile photo of a managed business account. Requires the *can\\_edit\\_profile\\_photo* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {InputProfilePhoto} photo 
         * @param {boolean} [isPublic] Pass True to set the public photo, which will be visible even if the main photo is hidden by the business account\\\&#39;s privacy settings. An account can have only one public photo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBusinessAccountProfilePhotoPost: async (businessConnectionId: string, photo: InputProfilePhoto, isPublic?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('setBusinessAccountProfilePhotoPost', 'businessConnectionId', businessConnectionId)
            // verify required parameter 'photo' is not null or undefined
            assertParamExists('setBusinessAccountProfilePhotoPost', 'photo', photo)
            const localVarPath = `/setBusinessAccountProfilePhoto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (photo !== undefined) { 
                localVarFormParams.append('photo', new Blob([JSON.stringify(photo)], { type: "application/json", }));
            }
    
            if (isPublic !== undefined) { 
                localVarFormParams.append('is_public', String(isPublic) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes the username of a managed business account. Requires the *can\\_change\\_username* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} [username] The new value of the username for the business account; 0-32 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBusinessAccountUsernamePost: async (businessConnectionId: string, username?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('setBusinessAccountUsernamePost', 'businessConnectionId', businessConnectionId)
            const localVarPath = `/setBusinessAccountUsername`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {string} customTitle New custom title for the administrator; 0-16 characters, emoji are not allowed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatAdministratorCustomTitlePost: async (chatId: RestrictChatMemberPostRequestChatId, userId: number, customTitle: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('setChatAdministratorCustomTitlePost', 'chatId', chatId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setChatAdministratorCustomTitlePost', 'userId', userId)
            // verify required parameter 'customTitle' is not null or undefined
            assertParamExists('setChatAdministratorCustomTitlePost', 'customTitle', customTitle)
            const localVarPath = `/setChatAdministratorCustomTitle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (customTitle !== undefined) { 
                localVarFormParams.append('custom_title', customTitle as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [description] New chat description, 0-255 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatDescriptionPost: async (chatId: SendMessagePostRequestChatId, description?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('setChatDescriptionPost', 'chatId', chatId)
            const localVarPath = `/setChatDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to change the bot\'s menu button in a private chat, or the default menu button. Returns *True* on success.
         * @param {number} [chatId] Unique identifier for the target private chat. If not specified, default bot\\\&#39;s menu button will be changed
         * @param {MenuButton} [menuButton] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatMenuButtonPost: async (chatId?: number, menuButton?: MenuButton, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/setChatMenuButton`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', chatId as any);
            }
    
            if (menuButton !== undefined) { 
                localVarFormParams.append('menu_button', new Blob([JSON.stringify(menuButton)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\\_restrict\\_members* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {ChatPermissions} permissions 
         * @param {boolean} [useIndependentChatPermissions] Pass *True* if chat permissions are set independently. Otherwise, the *can\\\\_send\\\\_other\\\\_messages* and *can\\\\_add\\\\_web\\\\_page\\\\_previews* permissions will imply the *can\\\\_send\\\\_messages*, *can\\\\_send\\\\_audios*, *can\\\\_send\\\\_documents*, *can\\\\_send\\\\_photos*, *can\\\\_send\\\\_videos*, *can\\\\_send\\\\_video\\\\_notes*, and *can\\\\_send\\\\_voice\\\\_notes* permissions; the *can\\\\_send\\\\_polls* permission will imply the *can\\\\_send\\\\_messages* permission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatPermissionsPost: async (chatId: RestrictChatMemberPostRequestChatId, permissions: ChatPermissions, useIndependentChatPermissions?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('setChatPermissionsPost', 'chatId', chatId)
            // verify required parameter 'permissions' is not null or undefined
            assertParamExists('setChatPermissionsPost', 'permissions', permissions)
            const localVarPath = `/setChatPermissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (permissions !== undefined) { 
                localVarFormParams.append('permissions', new Blob([JSON.stringify(permissions)], { type: "application/json", }));
            }
    
            if (useIndependentChatPermissions !== undefined) { 
                localVarFormParams.append('use_independent_chat_permissions', String(useIndependentChatPermissions) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to set a new profile photo for the chat. Photos can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {any} photo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatPhotoPost: async (chatId: SendMessagePostRequestChatId, photo: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('setChatPhotoPost', 'chatId', chatId)
            // verify required parameter 'photo' is not null or undefined
            assertParamExists('setChatPhotoPost', 'photo', photo)
            const localVarPath = `/setChatPhoto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (photo !== undefined) { 
                localVarFormParams.append('photo', new Blob([JSON.stringify(photo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {string} stickerSetName Name of the sticker set to be set as the group sticker set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatStickerSetPost: async (chatId: RestrictChatMemberPostRequestChatId, stickerSetName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('setChatStickerSetPost', 'chatId', chatId)
            // verify required parameter 'stickerSetName' is not null or undefined
            assertParamExists('setChatStickerSetPost', 'stickerSetName', stickerSetName)
            const localVarPath = `/setChatStickerSet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (stickerSetName !== undefined) { 
                localVarFormParams.append('sticker_set_name', stickerSetName as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to change the title of a chat. Titles can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} title New chat title, 1-128 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatTitlePost: async (chatId: SendMessagePostRequestChatId, title: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('setChatTitlePost', 'chatId', chatId)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('setChatTitlePost', 'title', title)
            const localVarPath = `/setChatTitle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to set the thumbnail of a custom emoji sticker set. Returns *True* on success.
         * @param {string} name Sticker set name
         * @param {string} [customEmojiId] Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the thumbnail and use the first sticker as the thumbnail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCustomEmojiStickerSetThumbnailPost: async (name: string, customEmojiId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('setCustomEmojiStickerSetThumbnailPost', 'name', name)
            const localVarPath = `/setCustomEmojiStickerSetThumbnail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (customEmojiId !== undefined) { 
                localVarFormParams.append('custom_emoji_id', customEmojiId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Returns an error, if the new score is not greater than the user\'s current score in the chat and *force* is *False*.
         * @param {number} userId User identifier
         * @param {number} score New score, must be non-negative
         * @param {boolean} [force] Pass *True* if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
         * @param {boolean} [disableEditMessage] Pass *True* if the game message should not be automatically edited to include the current scoreboard
         * @param {number} [chatId] Required if *inline\\\\_message\\\\_id* is not specified. Unique identifier for the target chat
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the sent message
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGameScorePost: async (userId: number, score: number, force?: boolean, disableEditMessage?: boolean, chatId?: number, messageId?: number, inlineMessageId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setGameScorePost', 'userId', userId)
            // verify required parameter 'score' is not null or undefined
            assertParamExists('setGameScorePost', 'score', score)
            const localVarPath = `/setGameScore`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (score !== undefined) { 
                localVarFormParams.append('score', score as any);
            }
    
            if (force !== undefined) { 
                localVarFormParams.append('force', String(force) as any);
            }
    
            if (disableEditMessage !== undefined) { 
                localVarFormParams.append('disable_edit_message', String(disableEditMessage) as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', chatId as any);
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
            if (inlineMessageId !== undefined) { 
                localVarFormParams.append('inline_message_id', inlineMessageId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to change the chosen reactions on a message. Service messages of some types can\'t be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. Bots can\'t use paid reactions. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} messageId Identifier of the target message. If the message belongs to a media group, the reaction is set to the first non-deleted message in the group instead.
         * @param {Array<ReactionType>} [reaction] A JSON-serialized list of reaction types to set on the message. Currently, as non-premium users, bots can set up to one reaction per message. A custom emoji reaction can be used if it is either already present on the message or explicitly allowed by chat administrators. Paid reactions can\\\&#39;t be used by bots.
         * @param {boolean} [isBig] Pass *True* to set the reaction with a big animation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMessageReactionPost: async (chatId: SendMessagePostRequestChatId, messageId: number, reaction?: Array<ReactionType>, isBig?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('setMessageReactionPost', 'chatId', chatId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('setMessageReactionPost', 'messageId', messageId)
            const localVarPath = `/setMessageReaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
                if (reaction) {
                localVarFormParams.append('reaction', reaction.join(COLLECTION_FORMATS.csv));
            }

    
            if (isBig !== undefined) { 
                localVarFormParams.append('is_big', String(isBig) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to change the list of the bot\'s commands. See [this manual](https://core.telegram.org/bots/features#commands) for more details about bot commands. Returns *True* on success.
         * @param {Array<BotCommand>} commands A JSON-serialized list of bot commands to be set as the list of the bot\\\&#39;s commands. At most 100 commands can be specified.
         * @param {BotCommandScope} [scope] 
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMyCommandsPost: async (commands: Array<BotCommand>, scope?: BotCommandScope, languageCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commands' is not null or undefined
            assertParamExists('setMyCommandsPost', 'commands', commands)
            const localVarPath = `/setMyCommands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (commands) {
                localVarFormParams.append('commands', commands.join(COLLECTION_FORMATS.csv));
            }

    
            if (scope !== undefined) { 
                localVarFormParams.append('scope', new Blob([JSON.stringify(scope)], { type: "application/json", }));
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('language_code', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to change the default administrator rights requested by the bot when it\'s added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns *True* on success.
         * @param {ChatAdministratorRights} [rights] 
         * @param {boolean} [forChannels] Pass *True* to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMyDefaultAdministratorRightsPost: async (rights?: ChatAdministratorRights, forChannels?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/setMyDefaultAdministratorRights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (rights !== undefined) { 
                localVarFormParams.append('rights', new Blob([JSON.stringify(rights)], { type: "application/json", }));
            }
    
            if (forChannels !== undefined) { 
                localVarFormParams.append('for_channels', String(forChannels) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to change the bot\'s description, which is shown in the chat with the bot if the chat is empty. Returns *True* on success.
         * @param {string} [description] New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for whose language there is no dedicated description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMyDescriptionPost: async (description?: string, languageCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/setMyDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('language_code', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to change the bot\'s name. Returns *True* on success.
         * @param {string} [name] New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language there is no dedicated name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMyNamePost: async (name?: string, languageCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/setMyName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('language_code', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to change the bot\'s short description, which is shown on the bot\'s profile page and is sent together with the link when users share the bot. Returns *True* on success.
         * @param {string} [shortDescription] New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMyShortDescriptionPost: async (shortDescription?: string, languageCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/setMyShortDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (shortDescription !== undefined) { 
                localVarFormParams.append('short_description', shortDescription as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('language_code', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.  Use this if the data submitted by the user doesn\'t satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
         * @param {number} userId User identifier
         * @param {Array<PassportElementError>} errors A JSON-serialized array describing the errors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPassportDataErrorsPost: async (userId: number, errors: Array<PassportElementError>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setPassportDataErrorsPost', 'userId', userId)
            // verify required parameter 'errors' is not null or undefined
            assertParamExists('setPassportDataErrorsPost', 'errors', errors)
            const localVarPath = `/setPassportDataErrors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
                if (errors) {
                localVarFormParams.append('errors', errors.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {Array<string>} emojiList A JSON-serialized list of 1-20 emoji associated with the sticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStickerEmojiListPost: async (sticker: string, emojiList: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sticker' is not null or undefined
            assertParamExists('setStickerEmojiListPost', 'sticker', sticker)
            // verify required parameter 'emojiList' is not null or undefined
            assertParamExists('setStickerEmojiListPost', 'emojiList', emojiList)
            const localVarPath = `/setStickerEmojiList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (sticker !== undefined) { 
                localVarFormParams.append('sticker', sticker as any);
            }
                if (emojiList) {
                localVarFormParams.append('emoji_list', emojiList.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {Array<string>} [keywords] A JSON-serialized list of 0-20 search keywords for the sticker with total length of up to 64 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStickerKeywordsPost: async (sticker: string, keywords?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sticker' is not null or undefined
            assertParamExists('setStickerKeywordsPost', 'sticker', sticker)
            const localVarPath = `/setStickerKeywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (sticker !== undefined) { 
                localVarFormParams.append('sticker', sticker as any);
            }
                if (keywords) {
                localVarFormParams.append('keywords', keywords.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to change the [mask position](https://core.telegram.org/bots/api/#maskposition) of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {MaskPosition} [maskPosition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStickerMaskPositionPost: async (sticker: string, maskPosition?: MaskPosition, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sticker' is not null or undefined
            assertParamExists('setStickerMaskPositionPost', 'sticker', sticker)
            const localVarPath = `/setStickerMaskPosition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (sticker !== undefined) { 
                localVarFormParams.append('sticker', sticker as any);
            }
    
            if (maskPosition !== undefined) { 
                localVarFormParams.append('mask_position', new Blob([JSON.stringify(maskPosition)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {number} position New sticker position in the set, zero-based
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStickerPositionInSetPost: async (sticker: string, position: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sticker' is not null or undefined
            assertParamExists('setStickerPositionInSetPost', 'sticker', sticker)
            // verify required parameter 'position' is not null or undefined
            assertParamExists('setStickerPositionInSetPost', 'position', position)
            const localVarPath = `/setStickerPositionInSet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (sticker !== undefined) { 
                localVarFormParams.append('sticker', sticker as any);
            }
    
            if (position !== undefined) { 
                localVarFormParams.append('position', position as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns *True* on success.
         * @param {string} name Sticker set name
         * @param {number} userId User identifier of the sticker set owner
         * @param {SetStickerSetThumbnailPostFormatEnum} format Format of the thumbnail, must be one of “static” for a **.WEBP** or **.PNG** image, “animated” for a **.TGS** animation, or “video” for a **.WEBM** video
         * @param {SetStickerSetThumbnailPostRequestThumbnail} [thumbnail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStickerSetThumbnailPost: async (name: string, userId: number, format: SetStickerSetThumbnailPostFormatEnum, thumbnail?: SetStickerSetThumbnailPostRequestThumbnail, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('setStickerSetThumbnailPost', 'name', name)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setStickerSetThumbnailPost', 'userId', userId)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('setStickerSetThumbnailPost', 'format', format)
            const localVarPath = `/setStickerSetThumbnail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (thumbnail !== undefined) { 
                localVarFormParams.append('thumbnail', new Blob([JSON.stringify(thumbnail)], { type: "application/json", }));
            }
    
            if (format !== undefined) { 
                localVarFormParams.append('format', format as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to set the title of a created sticker set. Returns *True* on success.
         * @param {string} name Sticker set name
         * @param {string} title Sticker set title, 1-64 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStickerSetTitlePost: async (name: string, title: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('setStickerSetTitlePost', 'name', name)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('setStickerSetTitlePost', 'title', title)
            const localVarPath = `/setStickerSetTitle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes the emoji status for a given user that previously allowed the bot to manage their emoji status via the Mini App method [requestEmojiStatusAccess](https://core.telegram.org/bots/webapps#initializing-mini-apps). Returns *True* on success.
         * @param {number} userId Unique identifier of the target user
         * @param {string} [emojiStatusCustomEmojiId] Custom emoji identifier of the emoji status to set. Pass an empty string to remove the status.
         * @param {number} [emojiStatusExpirationDate] Expiration date of the emoji status, if any
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserEmojiStatusPost: async (userId: number, emojiStatusCustomEmojiId?: string, emojiStatusExpirationDate?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setUserEmojiStatusPost', 'userId', userId)
            const localVarPath = `/setUserEmojiStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (emojiStatusCustomEmojiId !== undefined) { 
                localVarFormParams.append('emoji_status_custom_emoji_id', emojiStatusCustomEmojiId as any);
            }
    
            if (emojiStatusExpirationDate !== undefined) { 
                localVarFormParams.append('emoji_status_expiration_date', emojiStatusExpirationDate as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request (a request with response [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) different from `2XY`), we will repeat the request and give up after a reasonable amount of attempts. Returns *True* on success.  If you\'d like to make sure that the webhook was set by you, you can specify secret data in the parameter *secret\\_token*. If specified, the request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the secret token as content.
         * @param {string} url HTTPS URL to send updates to. Use an empty string to remove webhook integration
         * @param {any} [certificate] 
         * @param {string} [ipAddress] The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS
         * @param {number} [maxConnections] The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on your bot\\\&#39;s server, and higher values to increase your bot\\\&#39;s throughput.
         * @param {Array<string>} [allowedUpdates] A JSON-serialized list of the update types you want your bot to receive. For example, specify &#x60;[\\\&quot;message\\\&quot;, \\\&quot;edited_channel_post\\\&quot;, \\\&quot;callback_query\\\&quot;]&#x60; to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all update types except *chat\\\\_member*, *message\\\\_reaction*, and *message\\\\_reaction\\\\_count* (default). If not specified, the previous setting will be used.   Please note that this parameter doesn\\\&#39;t affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.
         * @param {boolean} [dropPendingUpdates] Pass *True* to drop all pending updates
         * @param {string} [secretToken] A secret token to be sent in a header “X-Telegram-Bot-Api-Secret-Token” in every webhook request, 1-256 characters. Only characters &#x60;A-Z&#x60;, &#x60;a-z&#x60;, &#x60;0-9&#x60;, &#x60;_&#x60; and &#x60;-&#x60; are allowed. The header is useful to ensure that the request comes from a webhook set by you.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWebhookPost: async (url: string, certificate?: any, ipAddress?: string, maxConnections?: number, allowedUpdates?: Array<string>, dropPendingUpdates?: boolean, secretToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('setWebhookPost', 'url', url)
            const localVarPath = `/setWebhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (url !== undefined) { 
                localVarFormParams.append('url', url as any);
            }
    
            if (certificate !== undefined) { 
                localVarFormParams.append('certificate', new Blob([JSON.stringify(certificate)], { type: "application/json", }));
            }
    
            if (ipAddress !== undefined) { 
                localVarFormParams.append('ip_address', ipAddress as any);
            }
    
            if (maxConnections !== undefined) { 
                localVarFormParams.append('max_connections', maxConnections as any);
            }
                if (allowedUpdates) {
                localVarFormParams.append('allowed_updates', allowedUpdates.join(COLLECTION_FORMATS.csv));
            }

    
            if (dropPendingUpdates !== undefined) { 
                localVarFormParams.append('drop_pending_updates', String(dropPendingUpdates) as any);
            }
    
            if (secretToken !== undefined) { 
                localVarFormParams.append('secret_token', secretToken as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to stop updating a live location message before *live\\_period* expires. On success, if the message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message with live location to stop
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopMessageLiveLocationPost: async (businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, replyMarkup?: InlineKeyboardMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stopMessageLiveLocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
            if (inlineMessageId !== undefined) { 
                localVarFormParams.append('inline_message_id', inlineMessageId as any);
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} messageId Identifier of the original message with the poll
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopPollPost: async (chatId: SendMessagePostRequestChatId, messageId: number, businessConnectionId?: string, replyMarkup?: InlineKeyboardMarkup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('stopPollPost', 'chatId', chatId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('stopPollPost', 'messageId', messageId)
            const localVarPath = `/stopPoll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
            if (replyMarkup !== undefined) { 
                localVarFormParams.append('reply_markup', new Blob([JSON.stringify(replyMarkup)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfers Telegram Stars from the business account balance to the bot\'s balance. Requires the *can\\_transfer\\_stars* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {number} starCount Number of Telegram Stars to transfer; 1-10000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBusinessAccountStarsPost: async (businessConnectionId: string, starCount: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('transferBusinessAccountStarsPost', 'businessConnectionId', businessConnectionId)
            // verify required parameter 'starCount' is not null or undefined
            assertParamExists('transferBusinessAccountStarsPost', 'starCount', starCount)
            const localVarPath = `/transferBusinessAccountStars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (starCount !== undefined) { 
                localVarFormParams.append('star_count', starCount as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfers an owned unique gift to another user. Requires the *can\\_transfer\\_and\\_upgrade\\_gifts* business bot right. Requires *can\\_transfer\\_stars* business bot right if the transfer is paid. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} ownedGiftId Unique identifier of the regular gift that should be transferred
         * @param {number} newOwnerChatId Unique identifier of the chat which will own the gift. The chat must be active in the last 24 hours.
         * @param {number} [starCount] The amount of Telegram Stars that will be paid for the transfer from the business account balance. If positive, then the *can\\\\_transfer\\\\_stars* business bot right is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferGiftPost: async (businessConnectionId: string, ownedGiftId: string, newOwnerChatId: number, starCount?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('transferGiftPost', 'businessConnectionId', businessConnectionId)
            // verify required parameter 'ownedGiftId' is not null or undefined
            assertParamExists('transferGiftPost', 'ownedGiftId', ownedGiftId)
            // verify required parameter 'newOwnerChatId' is not null or undefined
            assertParamExists('transferGiftPost', 'newOwnerChatId', newOwnerChatId)
            const localVarPath = `/transferGift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (ownedGiftId !== undefined) { 
                localVarFormParams.append('owned_gift_id', ownedGiftId as any);
            }
    
            if (newOwnerChatId !== undefined) { 
                localVarFormParams.append('new_owner_chat_id', newOwnerChatId as any);
            }
    
            if (starCount !== undefined) { 
                localVarFormParams.append('star_count', starCount as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to unban a previously banned user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don\'t want this, use the parameter *only\\_if\\_banned*. Returns *True* on success.
         * @param {BanChatMemberPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {boolean} [onlyIfBanned] Do nothing if the user is not banned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbanChatMemberPost: async (chatId: BanChatMemberPostRequestChatId, userId: number, onlyIfBanned?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('unbanChatMemberPost', 'chatId', chatId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('unbanChatMemberPost', 'userId', userId)
            const localVarPath = `/unbanChatMember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (onlyIfBanned !== undefined) { 
                localVarFormParams.append('only_if_banned', String(onlyIfBanned) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} senderChatId Unique identifier of the target sender chat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbanChatSenderChatPost: async (chatId: SendMessagePostRequestChatId, senderChatId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('unbanChatSenderChatPost', 'chatId', chatId)
            // verify required parameter 'senderChatId' is not null or undefined
            assertParamExists('unbanChatSenderChatPost', 'senderChatId', senderChatId)
            const localVarPath = `/unbanChatSenderChat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (senderChatId !== undefined) { 
                localVarFormParams.append('sender_chat_id', senderChatId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to unhide the \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unhideGeneralForumTopicPost: async (chatId: RestrictChatMemberPostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('unhideGeneralForumTopicPost', 'chatId', chatId)
            const localVarPath = `/unhideGeneralForumTopic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the \'can\\_pin\\_messages\' administrator right in a supergroup or \'can\\_edit\\_messages\' administrator right in a channel. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpinAllChatMessagesPost: async (chatId: SendMessagePostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('unpinAllChatMessagesPost', 'chatId', chatId)
            const localVarPath = `/unpinAllChatMessages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the *can\\_pin\\_messages* administrator right in the supergroup. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpinAllForumTopicMessagesPost: async (chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('unpinAllForumTopicMessagesPost', 'chatId', chatId)
            // verify required parameter 'messageThreadId' is not null or undefined
            assertParamExists('unpinAllForumTopicMessagesPost', 'messageThreadId', messageThreadId)
            const localVarPath = `/unpinAllForumTopicMessages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageThreadId !== undefined) { 
                localVarFormParams.append('message_thread_id', messageThreadId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the *can\\_pin\\_messages* administrator right in the supergroup. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpinAllGeneralForumTopicMessagesPost: async (chatId: RestrictChatMemberPostRequestChatId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('unpinAllGeneralForumTopicMessagesPost', 'chatId', chatId)
            const localVarPath = `/unpinAllGeneralForumTopicMessages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the \'can\\_pin\\_messages\' administrator right in a supergroup or \'can\\_edit\\_messages\' administrator right in a channel. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be unpinned
         * @param {number} [messageId] Identifier of the message to unpin. Required if *business\\\\_connection\\\\_id* is specified. If not specified, the most recent pinned message (by sending date) will be unpinned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpinChatMessagePost: async (chatId: SendMessagePostRequestChatId, businessConnectionId?: string, messageId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('unpinChatMessagePost', 'chatId', chatId)
            const localVarPath = `/unpinChatMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (messageId !== undefined) { 
                localVarFormParams.append('message_id', messageId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upgrades a given regular gift to a unique gift. Requires the *can\\_transfer\\_and\\_upgrade\\_gifts* business bot right. Additionally requires the *can\\_transfer\\_stars* business bot right if the upgrade is paid. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} ownedGiftId Unique identifier of the regular gift that should be upgraded to a unique one
         * @param {boolean} [keepOriginalDetails] Pass True to keep the original gift text, sender and receiver in the upgraded gift
         * @param {number} [starCount] The amount of Telegram Stars that will be paid for the upgrade from the business account balance. If &#x60;gift.prepaid_upgrade_star_count &gt; 0&#x60;, then pass 0, otherwise, the *can\\\\_transfer\\\\_stars* business bot right is required and &#x60;gift.upgrade_star_count&#x60; must be passed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradeGiftPost: async (businessConnectionId: string, ownedGiftId: string, keepOriginalDetails?: boolean, starCount?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessConnectionId' is not null or undefined
            assertParamExists('upgradeGiftPost', 'businessConnectionId', businessConnectionId)
            // verify required parameter 'ownedGiftId' is not null or undefined
            assertParamExists('upgradeGiftPost', 'ownedGiftId', ownedGiftId)
            const localVarPath = `/upgradeGift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (businessConnectionId !== undefined) { 
                localVarFormParams.append('business_connection_id', businessConnectionId as any);
            }
    
            if (ownedGiftId !== undefined) { 
                localVarFormParams.append('owned_gift_id', ownedGiftId as any);
            }
    
            if (keepOriginalDetails !== undefined) { 
                localVarFormParams.append('keep_original_details', String(keepOriginalDetails) as any);
            }
    
            if (starCount !== undefined) { 
                localVarFormParams.append('star_count', starCount as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to upload a file with a sticker for later use in the [createNewStickerSet](https://core.telegram.org/bots/api/#createnewstickerset), [addStickerToSet](https://core.telegram.org/bots/api/#addstickertoset), or [replaceStickerInSet](https://core.telegram.org/bots/api/#replacestickerinset) methods (the file can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
         * @param {number} userId User identifier of sticker file owner
         * @param {any} sticker 
         * @param {UploadStickerFilePostStickerFormatEnum} stickerFormat Format of the sticker, must be one of “static”, “animated”, “video”
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadStickerFilePost: async (userId: number, sticker: any, stickerFormat: UploadStickerFilePostStickerFormatEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('uploadStickerFilePost', 'userId', userId)
            // verify required parameter 'sticker' is not null or undefined
            assertParamExists('uploadStickerFilePost', 'sticker', sticker)
            // verify required parameter 'stickerFormat' is not null or undefined
            assertParamExists('uploadStickerFilePost', 'stickerFormat', stickerFormat)
            const localVarPath = `/uploadStickerFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (sticker !== undefined) { 
                localVarFormParams.append('sticker', new Blob([JSON.stringify(sticker)], { type: "application/json", }));
            }
    
            if (stickerFormat !== undefined) { 
                localVarFormParams.append('sticker_format', stickerFormat as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies a chat [on behalf of the organization](https://telegram.org/verify#third-party-verification) which is represented by the bot. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [customDescription] Custom description for the verification; 0-70 characters. Must be empty if the organization isn\\\&#39;t allowed to provide a custom verification description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyChatPost: async (chatId: SendMessagePostRequestChatId, customDescription?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('verifyChatPost', 'chatId', chatId)
            const localVarPath = `/verifyChat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (chatId !== undefined) { 
                localVarFormParams.append('chat_id', new Blob([JSON.stringify(chatId)], { type: "application/json", }));
            }
    
            if (customDescription !== undefined) { 
                localVarFormParams.append('custom_description', customDescription as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies a user [on behalf of the organization](https://telegram.org/verify#third-party-verification) which is represented by the bot. Returns *True* on success.
         * @param {number} userId Unique identifier of the target user
         * @param {string} [customDescription] Custom description for the verification; 0-70 characters. Must be empty if the organization isn\\\&#39;t allowed to provide a custom verification description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserPost: async (userId: number, customDescription?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('verifyUserPost', 'userId', userId)
            const localVarPath = `/verifyUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userId !== undefined) { 
                localVarFormParams.append('user_id', userId as any);
            }
    
            if (customDescription !== undefined) { 
                localVarFormParams.append('custom_description', customDescription as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers. Returns *True* on success.
         * @param {number} userId User identifier of sticker set owner
         * @param {string} name Sticker set name
         * @param {InputSticker} sticker 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addStickerToSetPost(userId: number, name: string, sticker: InputSticker, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addStickerToSetPost(userId, name, sticker, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addStickerToSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send answers to callback queries sent from [inline keyboards](https://core.telegram.org/bots/features#inline-keyboards). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.  Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@BotFather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
         * @param {string} callbackQueryId Unique identifier for the query to be answered
         * @param {string} [text] Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
         * @param {boolean} [showAlert] If *True*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
         * @param {string} [url] URL that will be opened by the user\\\&#39;s client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@BotFather](https://t.me/botfather), specify the URL that opens your game - note that this will only work if the query comes from a [*callback\\\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.    Otherwise, you may use links like &#x60;t.me/your_bot?start&#x3D;XXXX&#x60; that open your bot with a parameter.
         * @param {number} [cacheTime] The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async answerCallbackQueryPost(callbackQueryId: string, text?: string, showAlert?: boolean, url?: string, cacheTime?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.answerCallbackQueryPost(callbackQueryId, text, showAlert, url, cacheTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.answerCallbackQueryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send answers to an inline query. On success, *True* is returned.   No more than **50** results per query are allowed.
         * @param {string} inlineQueryId Unique identifier for the answered query
         * @param {Array<InlineQueryResult>} results A JSON-serialized array of results for the inline query
         * @param {number} [cacheTime] The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
         * @param {boolean} [isPersonal] Pass *True* if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query.
         * @param {string} [nextOffset] Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don\\\&#39;t support pagination. Offset length can\\\&#39;t exceed 64 bytes.
         * @param {InlineQueryResultsButton} [button] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async answerInlineQueryPost(inlineQueryId: string, results: Array<InlineQueryResult>, cacheTime?: number, isPersonal?: boolean, nextOffset?: string, button?: InlineQueryResultsButton, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.answerInlineQueryPost(inlineQueryId, results, cacheTime, isPersonal, nextOffset, button, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.answerInlineQueryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\\_checkout\\_query*. Use this method to respond to such pre-checkout queries. On success, *True* is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
         * @param {string} preCheckoutQueryId Unique identifier for the query to be answered
         * @param {boolean} ok Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
         * @param {string} [errorMessage] Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \\\&quot;Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\\\&quot;). Telegram will display this message to the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async answerPreCheckoutQueryPost(preCheckoutQueryId: string, ok: boolean, errorMessage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.answerPreCheckoutQueryPost(preCheckoutQueryId, ok, errorMessage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.answerPreCheckoutQueryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * If you sent an invoice requesting a shipping address and the parameter *is\\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\\_query* field to the bot. Use this method to reply to shipping queries. On success, *True* is returned.
         * @param {string} shippingQueryId Unique identifier for the query to be answered
         * @param {boolean} ok Pass *True* if delivery to the specified address is possible and *False* if there are any problems (for example, if delivery to the specified address is not possible)
         * @param {Array<ShippingOption>} [shippingOptions] Required if *ok* is *True*. A JSON-serialized array of available shipping options.
         * @param {string} [errorMessage] Required if *ok* is *False*. Error message in human readable form that explains why it is impossible to complete the order (e.g. “Sorry, delivery to your desired address is unavailable”). Telegram will display this message to the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async answerShippingQueryPost(shippingQueryId: string, ok: boolean, shippingOptions?: Array<ShippingOption>, errorMessage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.answerShippingQueryPost(shippingQueryId, ok, shippingOptions, errorMessage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.answerShippingQueryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to set the result of an interaction with a [Web App](https://core.telegram.org/bots/webapps) and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a [SentWebAppMessage](https://core.telegram.org/bots/api/#sentwebappmessage) object is returned.
         * @param {string} webAppQueryId Unique identifier for the query to be answered
         * @param {InlineQueryResult} result 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async answerWebAppQueryPost(webAppQueryId: string, result: InlineQueryResult, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerWebAppQueryPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.answerWebAppQueryPost(webAppQueryId, result, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.answerWebAppQueryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the *can\\_invite\\_users* administrator right. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveChatJoinRequestPost(chatId: SendMessagePostRequestChatId, userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveChatJoinRequestPost(chatId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.approveChatJoinRequestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {BanChatMemberPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {number} [untilDate] Date when the user will be unbanned; Unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only.
         * @param {boolean} [revokeMessages] Pass *True* to delete all messages from the chat for the user that is being removed. If *False*, the user will be able to see messages in the group that were sent before the user was removed. Always *True* for supergroups and channels.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async banChatMemberPost(chatId: BanChatMemberPostRequestChatId, userId: number, untilDate?: number, revokeMessages?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.banChatMemberPost(chatId, userId, untilDate, revokeMessages, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.banChatMemberPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to ban a channel chat in a supergroup or a channel. Until the chat is [unbanned](https://core.telegram.org/bots/api/#unbanchatsenderchat), the owner of the banned chat won\'t be able to send messages on behalf of **any of their channels**. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} senderChatId Unique identifier of the target sender chat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async banChatSenderChatPost(chatId: SendMessagePostRequestChatId, senderChatId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.banChatSenderChatPost(chatId, senderChatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.banChatSenderChatPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights, unless it is the creator of the topic. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async closeForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.closeForumTopicPost(chatId, messageThreadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.closeForumTopicPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to close an open \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async closeGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.closeGeneralForumTopicPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.closeGeneralForumTopicPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn\'t launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async closePost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.closePost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.closePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Converts a given regular gift to Telegram Stars. Requires the *can\\_convert\\_gifts\\_to\\_stars* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} ownedGiftId Unique identifier of the regular gift that should be converted to Telegram Stars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertGiftToStarsPost(businessConnectionId: string, ownedGiftId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertGiftToStarsPost(businessConnectionId, ownedGiftId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.convertGiftToStarsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to copy messages of any kind. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can\'t be copied. A quiz [poll](https://core.telegram.org/bots/api/#poll) can be copied only if the value of the field *correct\\_option\\_id* is known to the bot. The method is analogous to the method [forwardMessage](https://core.telegram.org/bots/api/#forwardmessage), but the copied message doesn\'t have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {ForwardMessagePostRequestFromChatId} fromChatId 
         * @param {number} messageId Message identifier in the chat specified in *from\\\\_chat\\\\_id*
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [videoStartTimestamp] New start timestamp for the copied video in the message
         * @param {string} [caption] New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
         * @param {string} [parseMode] Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the new caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media. Ignored if a new caption isn\\\&#39;t specified.
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async copyMessagePost(chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagePostRequestFromChatId, messageId: number, messageThreadId?: number, videoStartTimestamp?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CopyMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.copyMessagePost(chatId, fromChatId, messageId, messageThreadId, videoStartTimestamp, caption, parseMode, captionEntities, showCaptionAboveMedia, disableNotification, protectContent, allowPaidBroadcast, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.copyMessagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to copy messages of any kind. If some of the specified messages can\'t be found or copied, they are skipped. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can\'t be copied. A quiz [poll](https://core.telegram.org/bots/api/#poll) can be copied only if the value of the field *correct\\_option\\_id* is known to the bot. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied messages don\'t have a link to the original message. Album grouping is kept for copied messages. On success, an array of [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent messages is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {ForwardMessagesPostRequestFromChatId} fromChatId 
         * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages in the chat *from\\\\_chat\\\\_id* to copy. The identifiers must be specified in a strictly increasing order.
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {boolean} [disableNotification] Sends the messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent messages from forwarding and saving
         * @param {boolean} [removeCaption] Pass *True* to copy the messages without their captions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async copyMessagesPost(chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagesPostRequestFromChatId, messageIds: Array<number>, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, removeCaption?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForwardMessagesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.copyMessagesPost(chatId, fromChatId, messageIds, messageThreadId, disableNotification, protectContent, removeCaption, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.copyMessagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api/#revokechatinvitelink). Returns the new invite link as [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [name] Invite link name; 0-32 characters
         * @param {number} [expireDate] Point in time (Unix timestamp) when the link will expire
         * @param {number} [memberLimit] The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
         * @param {boolean} [createsJoinRequest] *True*, if users joining the chat via the link need to be approved by chat administrators. If *True*, *member\\\\_limit* can\\\&#39;t be specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChatInviteLinkPost(chatId: SendMessagePostRequestChatId, name?: string, expireDate?: number, memberLimit?: number, createsJoinRequest?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateChatInviteLinkPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChatInviteLinkPost(chatId, name, expireDate, memberLimit, createsJoinRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createChatInviteLinkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to create a [subscription invite link](https://telegram.org/blog/superchannels-star-reactions-subscriptions#star-subscriptions) for a channel chat. The bot must have the *can\\_invite\\_users* administrator rights. The link can be edited using the method [editChatSubscriptionInviteLink](https://core.telegram.org/bots/api/#editchatsubscriptioninvitelink) or revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api/#revokechatinvitelink). Returns the new invite link as a [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {CreateChatSubscriptionInviteLinkPostRequestChatId} chatId 
         * @param {number} subscriptionPeriod The number of seconds the subscription will be active for before the next payment. Currently, it must always be 2592000 (30 days).
         * @param {number} subscriptionPrice The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat; 1-10000
         * @param {string} [name] Invite link name; 0-32 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChatSubscriptionInviteLinkPost(chatId: CreateChatSubscriptionInviteLinkPostRequestChatId, subscriptionPeriod: number, subscriptionPrice: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateChatInviteLinkPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChatSubscriptionInviteLinkPost(chatId, subscriptionPeriod, subscriptionPrice, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createChatSubscriptionInviteLinkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns information about the created topic as a [ForumTopic](https://core.telegram.org/bots/api/#forumtopic) object.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {string} name Topic name, 1-128 characters
         * @param {CreateForumTopicPostIconColorEnum} [iconColor] Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F)
         * @param {string} [iconCustomEmojiId] Unique identifier of the custom emoji shown as the topic icon. Use [getForumTopicIconStickers](https://core.telegram.org/bots/api/#getforumtopiciconstickers) to get all allowed custom emoji identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, name: string, iconColor?: CreateForumTopicPostIconColorEnum, iconCustomEmojiId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateForumTopicPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createForumTopicPost(chatId, name, iconColor, iconCustomEmojiId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createForumTopicPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to create a link for an invoice. Returns the created invoice link as *String* on success.
         * @param {string} title Product name, 1-32 characters
         * @param {string} description Product description, 1-255 characters
         * @param {string} payload Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.
         * @param {string} currency Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies). Pass “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {Array<LabeledPrice>} prices Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the link will be created. For payments in [Telegram Stars](https://t.me/BotNews/90) only.
         * @param {string} [providerToken] Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an empty string for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {number} [subscriptionPeriod] The number of seconds the subscription will be active for before the next payment. The currency must be set to “XTR” (Telegram Stars) if the parameter is used. Currently, it must always be 2592000 (30 days) if specified. Any number of subscriptions can be active for a given bot at the same time, including multiple concurrent subscriptions from the same user. Subscription price must no exceed 10000 Telegram Stars.
         * @param {number} [maxTipAmount] The maximum accepted amount for tips in the *smallest units* of the currency (integer, **not** float/double). For example, for a maximum tip of &#x60;US$ 1.45&#x60; pass &#x60;max_tip_amount &#x3D; 145&#x60;. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {Array<number>} [suggestedTipAmounts] A JSON-serialized array of suggested amounts of tips in the *smallest units* of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed *max\\\\_tip\\\\_amount*.
         * @param {string} [providerData] JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
         * @param {string} [photoUrl] URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
         * @param {number} [photoSize] Photo size in bytes
         * @param {number} [photoWidth] Photo width
         * @param {number} [photoHeight] Photo height
         * @param {boolean} [needName] Pass *True* if you require the user\\\&#39;s full name to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needPhoneNumber] Pass *True* if you require the user\\\&#39;s phone number to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needEmail] Pass *True* if you require the user\\\&#39;s email address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needShippingAddress] Pass *True* if you require the user\\\&#39;s shipping address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [sendPhoneNumberToProvider] Pass *True* if the user\\\&#39;s phone number should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [sendEmailToProvider] Pass *True* if the user\\\&#39;s email address should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [isFlexible] Pass *True* if the final price depends on the shipping method. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInvoiceLinkPost(title: string, description: string, payload: string, currency: string, prices: Array<LabeledPrice>, businessConnectionId?: string, providerToken?: string, subscriptionPeriod?: number, maxTipAmount?: number, suggestedTipAmounts?: Array<number>, providerData?: string, photoUrl?: string, photoSize?: number, photoWidth?: number, photoHeight?: number, needName?: boolean, needPhoneNumber?: boolean, needEmail?: boolean, needShippingAddress?: boolean, sendPhoneNumberToProvider?: boolean, sendEmailToProvider?: boolean, isFlexible?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportChatInviteLinkPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInvoiceLinkPost(title, description, payload, currency, prices, businessConnectionId, providerToken, subscriptionPeriod, maxTipAmount, suggestedTipAmounts, providerData, photoUrl, photoSize, photoWidth, photoHeight, needName, needPhoneNumber, needEmail, needShippingAddress, sendPhoneNumberToProvider, sendEmailToProvider, isFlexible, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createInvoiceLinkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns *True* on success.
         * @param {number} userId User identifier of created sticker set owner
         * @param {string} name Short name of sticker set, to be used in &#x60;t.me/addstickers/&#x60; URLs (e.g., *animals*). Can contain only English letters, digits and underscores. Must begin with a letter, can\\\&#39;t contain consecutive underscores and must end in &#x60;\\\&quot;_by_&lt;bot_username&gt;\\\&quot;&#x60;. &#x60;&lt;bot_username&gt;&#x60; is case insensitive. 1-64 characters.
         * @param {string} title Sticker set title, 1-64 characters
         * @param {Array<InputSticker>} stickers A JSON-serialized list of 1-50 initial stickers to be added to the sticker set
         * @param {CreateNewStickerSetPostStickerTypeEnum} [stickerType] Type of stickers in the set, pass “regular”, “mask”, or “custom\\\\_emoji”. By default, a regular sticker set is created.
         * @param {boolean} [needsRepainting] Pass *True* if stickers in the sticker set must be repainted to the color of text when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context; for custom emoji sticker sets only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewStickerSetPost(userId: number, name: string, title: string, stickers: Array<InputSticker>, stickerType?: CreateNewStickerSetPostStickerTypeEnum, needsRepainting?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewStickerSetPost(userId, name, title, stickers, stickerType, needsRepainting, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createNewStickerSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the *can\\_invite\\_users* administrator right. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async declineChatJoinRequestPost(chatId: SendMessagePostRequestChatId, userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.declineChatJoinRequestPost(chatId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.declineChatJoinRequestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete messages on behalf of a business account. Requires the *can\\_delete\\_sent\\_messages* business bot right to delete messages sent by the bot itself, or the *can\\_delete\\_all\\_messages* business bot right to delete any message. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection on behalf of which to delete the messages
         * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages to delete. All messages must be from the same chat. See [deleteMessage](https://core.telegram.org/bots/api/#deletemessage) for limitations on which messages can be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusinessMessagesPost(businessConnectionId: string, messageIds: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusinessMessagesPost(businessConnectionId, messageIds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteBusinessMessagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to delete a chat photo. Photos can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChatPhotoPost(chatId: SendMessagePostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChatPhotoPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteChatPhotoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChatStickerSetPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChatStickerSetPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteChatStickerSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_delete\\_messages* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteForumTopicPost(chatId, messageThreadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteForumTopicPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to delete a message, including service messages, with the following limitations:   \\- A message can only be deleted if it was sent less than 48 hours ago.   \\- Service messages about a supergroup, channel, or forum topic creation can\'t be deleted.   \\- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.   \\- Bots can delete outgoing messages in private chats, groups, and supergroups.   \\- Bots can delete incoming messages in private chats.   \\- Bots granted *can\\_post\\_messages* permissions can delete outgoing messages in channels.   \\- If the bot is an administrator of a group, it can delete any message there.   \\- If the bot has *can\\_delete\\_messages* permission in a supergroup or a channel, it can delete any message there.   Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} messageId Identifier of the message to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMessagePost(chatId: SendMessagePostRequestChatId, messageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessagePost(chatId, messageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteMessagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to delete multiple messages simultaneously. If some of the specified messages can\'t be found, they are skipped. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages to delete. See [deleteMessage](https://core.telegram.org/bots/api/#deletemessage) for limitations on which messages can be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMessagesPost(chatId: SendMessagePostRequestChatId, messageIds: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessagesPost(chatId, messageIds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteMessagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to delete the list of the bot\'s commands for the given scope and user language. After deletion, [higher level commands](https://core.telegram.org/bots/api/#determining-list-of-commands) will be shown to affected users. Returns *True* on success.
         * @param {BotCommandScope} [scope] 
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMyCommandsPost(scope?: BotCommandScope, languageCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMyCommandsPost(scope, languageCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteMyCommandsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStickerFromSetPost(sticker: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStickerFromSetPost(sticker, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteStickerFromSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to delete a sticker set that was created by the bot. Returns *True* on success.
         * @param {string} name Sticker set name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStickerSetPost(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStickerSetPost(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteStickerSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a story previously posted by the bot on behalf of a managed business account. Requires the *can\\_manage\\_stories* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {number} storyId Unique identifier of the story to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStoryPost(businessConnectionId: string, storyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStoryPost(businessConnectionId, storyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteStoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
         * @param {boolean} [dropPendingUpdates] Pass *True* to drop all pending updates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWebhookPost(dropPendingUpdates?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhookPost(dropPendingUpdates, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteWebhookPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} inviteLink The invite link to edit
         * @param {string} [name] Invite link name; 0-32 characters
         * @param {number} [expireDate] Point in time (Unix timestamp) when the link will expire
         * @param {number} [memberLimit] The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
         * @param {boolean} [createsJoinRequest] *True*, if users joining the chat via the link need to be approved by chat administrators. If *True*, *member\\\\_limit* can\\\&#39;t be specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editChatInviteLinkPost(chatId: SendMessagePostRequestChatId, inviteLink: string, name?: string, expireDate?: number, memberLimit?: number, createsJoinRequest?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateChatInviteLinkPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editChatInviteLinkPost(chatId, inviteLink, name, expireDate, memberLimit, createsJoinRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editChatInviteLinkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to edit a subscription invite link created by the bot. The bot must have the *can\\_invite\\_users* administrator rights. Returns the edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} inviteLink The invite link to edit
         * @param {string} [name] Invite link name; 0-32 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editChatSubscriptionInviteLinkPost(chatId: SendMessagePostRequestChatId, inviteLink: string, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateChatInviteLinkPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editChatSubscriptionInviteLinkPost(chatId, inviteLink, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editChatSubscriptionInviteLinkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights, unless it is the creator of the topic. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {string} [name] New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept
         * @param {string} [iconCustomEmojiId] New unique identifier of the custom emoji shown as the topic icon. Use [getForumTopicIconStickers](https://core.telegram.org/bots/api/#getforumtopiciconstickers) to get all allowed custom emoji identifiers. Pass an empty string to remove the icon. If not specified, the current icon will be kept
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, name?: string, iconCustomEmojiId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editForumTopicPost(chatId, messageThreadId, name, iconCustomEmojiId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editForumTopicPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to edit the name of the \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {string} name New topic name, 1-128 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editGeneralForumTopicPost(chatId, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editGeneralForumTopicPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {string} [caption] New caption of the message, 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media. Supported only for animation, photo and video messages.
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editMessageCaptionPost(businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditMessageTextPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editMessageCaptionPost(businessConnectionId, chatId, messageId, inlineMessageId, caption, parseMode, captionEntities, showCaptionAboveMedia, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editMessageCaptionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to edit live location messages. A location can be edited until its *live\\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
         * @param {number} latitude Latitude of new location
         * @param {number} longitude Longitude of new location
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {number} [livePeriod] New period in seconds during which the location can be updated, starting from the message send date. If 0x7FFFFFFF is specified, then the location can be updated forever. Otherwise, the new value must not exceed the current *live\\\\_period* by more than a day, and the live location expiration date must remain within the next 90 days. If not specified, then *live\\\\_period* remains unchanged
         * @param {number} [horizontalAccuracy] The radius of uncertainty for the location, measured in meters; 0-1500
         * @param {number} [heading] Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
         * @param {number} [proximityAlertRadius] The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editMessageLiveLocationPost(latitude: number, longitude: number, businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, livePeriod?: number, horizontalAccuracy?: number, heading?: number, proximityAlertRadius?: number, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditMessageTextPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editMessageLiveLocationPost(latitude, longitude, businessConnectionId, chatId, messageId, inlineMessageId, livePeriod, horizontalAccuracy, heading, proximityAlertRadius, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editMessageLiveLocationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to edit animation, audio, document, photo, or video messages, or to add media to text messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can\'t be uploaded; use a previously uploaded file via its file\\_id or specify a URL. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
         * @param {InputMedia} media 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editMessageMediaPost(media: InputMedia, businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditMessageTextPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editMessageMediaPost(media, businessConnectionId, chatId, messageId, inlineMessageId, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editMessageMediaPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editMessageReplyMarkupPost(businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditMessageTextPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editMessageReplyMarkupPost(businessConnectionId, chatId, messageId, inlineMessageId, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editMessageReplyMarkupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
         * @param {string} text New text of the message, 1-4096 characters after entities parsing
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {string} [parseMode] Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [entities] A JSON-serialized list of special entities that appear in message text, which can be specified instead of *parse\\\\_mode*
         * @param {LinkPreviewOptions} [linkPreviewOptions] 
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editMessageTextPost(text: string, businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, parseMode?: string, entities?: Array<MessageEntity>, linkPreviewOptions?: LinkPreviewOptions, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditMessageTextPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editMessageTextPost(text, businessConnectionId, chatId, messageId, inlineMessageId, parseMode, entities, linkPreviewOptions, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editMessageTextPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edits a story previously posted by the bot on behalf of a managed business account. Requires the *can\\_manage\\_stories* business bot right. Returns [Story](https://core.telegram.org/bots/api/#story) on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {number} storyId Unique identifier of the story to edit
         * @param {InputStoryContent} content 
         * @param {string} [caption] Caption of the story, 0-2048 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the story caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {Array<StoryArea>} [areas] A JSON-serialized list of clickable areas to be shown on the story
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editStoryPost(businessConnectionId: string, storyId: number, content: InputStoryContent, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, areas?: Array<StoryArea>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostStoryPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editStoryPost(businessConnectionId, storyId, content, caption, parseMode, captionEntities, areas, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editStoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows the bot to cancel or re-enable extension of a subscription paid in Telegram Stars. Returns *True* on success.
         * @param {number} userId Identifier of the user whose subscription will be edited
         * @param {string} telegramPaymentChargeId Telegram payment identifier for the subscription
         * @param {boolean} isCanceled Pass *True* to cancel extension of the user subscription; the subscription must be active up to the end of the current subscription period. Pass *False* to allow the user to re-enable a subscription that was previously canceled by the bot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editUserStarSubscriptionPost(userId: number, telegramPaymentChargeId: string, isCanceled: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editUserStarSubscriptionPost(userId, telegramPaymentChargeId, isCanceled, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editUserStarSubscriptionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as *String* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportChatInviteLinkPost(chatId: SendMessagePostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportChatInviteLinkPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportChatInviteLinkPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.exportChatInviteLinkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to forward messages of any kind. Service messages and messages with protected content can\'t be forwarded. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {ForwardMessagePostRequestFromChatId} fromChatId 
         * @param {number} messageId Message identifier in the chat specified in *from\\\\_chat\\\\_id*
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [videoStartTimestamp] New start timestamp for the forwarded video in the message
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the forwarded message from forwarding and saving
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forwardMessagePost(chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagePostRequestFromChatId, messageId: number, messageThreadId?: number, videoStartTimestamp?: number, disableNotification?: boolean, protectContent?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forwardMessagePost(chatId, fromChatId, messageId, messageThreadId, videoStartTimestamp, disableNotification, protectContent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.forwardMessagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to forward multiple messages of any kind. If some of the specified messages can\'t be found or forwarded, they are skipped. Service messages and messages with protected content can\'t be forwarded. Album grouping is kept for forwarded messages. On success, an array of [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent messages is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {ForwardMessagesPostRequestFromChatId} fromChatId 
         * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages in the chat *from\\\\_chat\\\\_id* to forward. The identifiers must be specified in a strictly increasing order.
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {boolean} [disableNotification] Sends the messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the forwarded messages from forwarding and saving
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forwardMessagesPost(chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagesPostRequestFromChatId, messageIds: Array<number>, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForwardMessagesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forwardMessagesPost(chatId, fromChatId, messageIds, messageThreadId, disableNotification, protectContent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.forwardMessagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the list of gifts that can be sent by the bot to users and channel chats. Requires no parameters. Returns a [Gifts](https://core.telegram.org/bots/api/#gifts) object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableGiftsPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAvailableGiftsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableGiftsPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAvailableGiftsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the gifts received and owned by a managed business account. Requires the *can\\_view\\_gifts\\_and\\_stars* business bot right. Returns [OwnedGifts](https://core.telegram.org/bots/api/#ownedgifts) on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {boolean} [excludeUnsaved] Pass True to exclude gifts that aren\\\&#39;t saved to the account\\\&#39;s profile page
         * @param {boolean} [excludeSaved] Pass True to exclude gifts that are saved to the account\\\&#39;s profile page
         * @param {boolean} [excludeUnlimited] Pass True to exclude gifts that can be purchased an unlimited number of times
         * @param {boolean} [excludeLimited] Pass True to exclude gifts that can be purchased a limited number of times
         * @param {boolean} [excludeUnique] Pass True to exclude unique gifts
         * @param {boolean} [sortByPrice] Pass True to sort results by gift price instead of send date. Sorting is applied before pagination.
         * @param {string} [offset] Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
         * @param {number} [limit] The maximum number of gifts to be returned; 1-100. Defaults to 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessAccountGiftsPost(businessConnectionId: string, excludeUnsaved?: boolean, excludeSaved?: boolean, excludeUnlimited?: boolean, excludeLimited?: boolean, excludeUnique?: boolean, sortByPrice?: boolean, offset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBusinessAccountGiftsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessAccountGiftsPost(businessConnectionId, excludeUnsaved, excludeSaved, excludeUnlimited, excludeLimited, excludeUnique, sortByPrice, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBusinessAccountGiftsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the amount of Telegram Stars owned by a managed business account. Requires the *can\\_view\\_gifts\\_and\\_stars* business bot right. Returns [StarAmount](https://core.telegram.org/bots/api/#staramount) on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessAccountStarBalancePost(businessConnectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBusinessAccountStarBalancePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessAccountStarBalancePost(businessConnectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBusinessAccountStarBalancePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get information about the connection of the bot with a business account. Returns a [BusinessConnection](https://core.telegram.org/bots/api/#businessconnection) object on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessConnectionPost(businessConnectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBusinessConnectionPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessConnectionPost(businessConnectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBusinessConnectionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get a list of administrators in a chat, which aren\'t bots. Returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatAdministratorsPost(chatId: LeaveChatPostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetChatAdministratorsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatAdministratorsPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getChatAdministratorsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get the number of members in a chat. Returns *Int* on success.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatMemberCountPost(chatId: LeaveChatPostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetChatMemberCountPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatMemberCountPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getChatMemberCountPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatMemberPost(chatId: LeaveChatPostRequestChatId, userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetChatMemberPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatMemberPost(chatId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getChatMemberPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get the current value of the bot\'s menu button in a private chat, or the default menu button. Returns [MenuButton](https://core.telegram.org/bots/api/#menubutton) on success.
         * @param {number} [chatId] Unique identifier for the target private chat. If not specified, default bot\\\&#39;s menu button will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatMenuButtonPost(chatId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetChatMenuButtonPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatMenuButtonPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getChatMenuButtonPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get up-to-date information about the chat. Returns a [ChatFullInfo](https://core.telegram.org/bots/api/#chatfullinfo) object on success.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatPost(chatId: LeaveChatPostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetChatPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getChatPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of [Sticker](https://core.telegram.org/bots/api/#sticker) objects.
         * @param {Array<string>} customEmojiIds A JSON-serialized list of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomEmojiStickersPost(customEmojiIds: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetForumTopicIconStickersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomEmojiStickersPost(customEmojiIds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCustomEmojiStickersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
         * @param {string} fileId File identifier to get information about
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilePost(fileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFilePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFilePost(fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of [Sticker](https://core.telegram.org/bots/api/#sticker) objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getForumTopicIconStickersPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetForumTopicIconStickersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getForumTopicIconStickersPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getForumTopicIconStickersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.  This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and their neighbors are not among them. Please note that this behavior is subject to change.
         * @param {number} userId Target user id
         * @param {number} [chatId] Required if *inline\\\\_message\\\\_id* is not specified. Unique identifier for the target chat
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the sent message
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameHighScoresPost(userId: number, chatId?: number, messageId?: number, inlineMessageId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGameHighScoresPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGameHighScoresPost(userId, chatId, messageId, inlineMessageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getGameHighScoresPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * A simple method for testing your bot\'s authentication token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMePost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMePost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get the current list of the bot\'s commands for the given scope and user language. Returns an Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) objects. If commands aren\'t set, an empty list is returned.
         * @param {BotCommandScope} [scope] 
         * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyCommandsPost(scope?: BotCommandScope, languageCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyCommandsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyCommandsPost(scope, languageCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMyCommandsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get the current default administrator rights of the bot. Returns [ChatAdministratorRights](https://core.telegram.org/bots/api/#chatadministratorrights) on success.
         * @param {boolean} [forChannels] Pass *True* to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyDefaultAdministratorRightsPost(forChannels?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyDefaultAdministratorRightsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyDefaultAdministratorRightsPost(forChannels, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMyDefaultAdministratorRightsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get the current bot description for the given user language. Returns [BotDescription](https://core.telegram.org/bots/api/#botdescription) on success.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyDescriptionPost(languageCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyDescriptionPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyDescriptionPost(languageCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMyDescriptionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get the current bot name for the given user language. Returns [BotName](https://core.telegram.org/bots/api/#botname) on success.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyNamePost(languageCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyNamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyNamePost(languageCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMyNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get the current bot short description for the given user language. Returns [BotShortDescription](https://core.telegram.org/bots/api/#botshortdescription) on success.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyShortDescriptionPost(languageCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyShortDescriptionPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyShortDescriptionPost(languageCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMyShortDescriptionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the bot\'s Telegram Star transactions in chronological order. On success, returns a [StarTransactions](https://core.telegram.org/bots/api/#startransactions) object.
         * @param {number} [offset] Number of transactions to skip in the response
         * @param {number} [limit] The maximum number of transactions to be retrieved. Values between 1-100 are accepted. Defaults to 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStarTransactionsPost(offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStarTransactionsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStarTransactionsPost(offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getStarTransactionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
         * @param {string} name Name of the sticker set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStickerSetPost(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStickerSetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStickerSetPost(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getStickerSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). Returns an Array of [Update](https://core.telegram.org/bots/api/#update) objects.
         * @param {number} [offset] Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\\\\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will be forgotten.
         * @param {number} [limit] Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
         * @param {number} [timeout] Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
         * @param {Array<string>} [allowedUpdates] A JSON-serialized list of the update types you want your bot to receive. For example, specify &#x60;[\\\&quot;message\\\&quot;, \\\&quot;edited_channel_post\\\&quot;, \\\&quot;callback_query\\\&quot;]&#x60; to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all update types except *chat\\\\_member*, *message\\\\_reaction*, and *message\\\\_reaction\\\\_count* (default). If not specified, the previous setting will be used.    Please note that this parameter doesn\\\&#39;t affect updates created before the call to getUpdates, so unwanted updates may be received for a short period of time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUpdatesPost(offset?: number, limit?: number, timeout?: number, allowedUpdates?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUpdatesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUpdatesPost(offset, limit, timeout, allowedUpdates, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUpdatesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat. Returns a [UserChatBoosts](https://core.telegram.org/bots/api/#userchatboosts) object.
         * @param {GetUserChatBoostsPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserChatBoostsPost(chatId: GetUserChatBoostsPostRequestChatId, userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserChatBoostsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserChatBoostsPost(chatId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserChatBoostsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
         * @param {number} userId Unique identifier of the target user
         * @param {number} [offset] Sequential number of the first photo to be returned. By default, all photos are returned.
         * @param {number} [limit] Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfilePhotosPost(userId: number, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserProfilePhotosPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProfilePhotosPost(userId, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserProfilePhotosPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhookInfoPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWebhookInfoPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhookInfoPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWebhookInfoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gifts a Telegram Premium subscription to the given user. Returns *True* on success.
         * @param {number} userId Unique identifier of the target user who will receive a Telegram Premium subscription
         * @param {GiftPremiumSubscriptionPostMonthCountEnum} monthCount Number of months the Telegram Premium subscription will be active for the user; must be one of 3, 6, or 12
         * @param {number} starCount Number of Telegram Stars to pay for the Telegram Premium subscription; must be 1000 for 3 months, 1500 for 6 months, and 2500 for 12 months
         * @param {string} [text] Text that will be shown along with the service message about the subscription; 0-128 characters
         * @param {string} [textParseMode] Mode for parsing entities in the text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
         * @param {Array<MessageEntity>} [textEntities] A JSON-serialized list of special entities that appear in the gift text. It can be specified instead of *text\\\\_parse\\\\_mode*. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftPremiumSubscriptionPost(userId: number, monthCount: GiftPremiumSubscriptionPostMonthCountEnum, starCount: number, text?: string, textParseMode?: string, textEntities?: Array<MessageEntity>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftPremiumSubscriptionPost(userId, monthCount, starCount, text, textParseMode, textEntities, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.giftPremiumSubscriptionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to hide the \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. The topic will be automatically closed if it was open. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hideGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hideGeneralForumTopicPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.hideGeneralForumTopicPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaveChatPost(chatId: LeaveChatPostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaveChatPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.leaveChatPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logOutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logOutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logOutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the \'can\\_pin\\_messages\' administrator right in a supergroup or \'can\\_edit\\_messages\' administrator right in a channel. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} messageId Identifier of a message to pin
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be pinned
         * @param {boolean} [disableNotification] Pass *True* if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pinChatMessagePost(chatId: SendMessagePostRequestChatId, messageId: number, businessConnectionId?: string, disableNotification?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pinChatMessagePost(chatId, messageId, businessConnectionId, disableNotification, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.pinChatMessagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Posts a story on behalf of a managed business account. Requires the *can\\_manage\\_stories* business bot right. Returns [Story](https://core.telegram.org/bots/api/#story) on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {InputStoryContent} content 
         * @param {PostStoryPostActivePeriodEnum} activePeriod Period after which the story is moved to the archive, in seconds; must be one of &#x60;6 * 3600&#x60;, &#x60;12 * 3600&#x60;, &#x60;86400&#x60;, or &#x60;2 * 86400&#x60;
         * @param {string} [caption] Caption of the story, 0-2048 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the story caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {Array<StoryArea>} [areas] A JSON-serialized list of clickable areas to be shown on the story
         * @param {boolean} [postToChatPage] Pass *True* to keep the story accessible after it expires
         * @param {boolean} [protectContent] Pass *True* if the content of the story must be protected from forwarding and screenshotting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postStoryPost(businessConnectionId: string, content: InputStoryContent, activePeriod: PostStoryPostActivePeriodEnum, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, areas?: Array<StoryArea>, postToChatPage?: boolean, protectContent?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostStoryPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postStoryPost(businessConnectionId, content, activePeriod, caption, parseMode, captionEntities, areas, postToChatPage, protectContent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postStoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {boolean} [isAnonymous] Pass *True* if the administrator\\\&#39;s presence in the chat is hidden
         * @param {boolean} [canManageChat] Pass *True* if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.
         * @param {boolean} [canDeleteMessages] Pass *True* if the administrator can delete messages of other users
         * @param {boolean} [canManageVideoChats] Pass *True* if the administrator can manage video chats
         * @param {boolean} [canRestrictMembers] Pass *True* if the administrator can restrict, ban or unban chat members, or access supergroup statistics
         * @param {boolean} [canPromoteMembers] Pass *True* if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by him)
         * @param {boolean} [canChangeInfo] Pass *True* if the administrator can change chat title, photo and other settings
         * @param {boolean} [canInviteUsers] Pass *True* if the administrator can invite new users to the chat
         * @param {boolean} [canPostStories] Pass *True* if the administrator can post stories to the chat
         * @param {boolean} [canEditStories] Pass *True* if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat\\\&#39;s story archive
         * @param {boolean} [canDeleteStories] Pass *True* if the administrator can delete stories posted by other users
         * @param {boolean} [canPostMessages] Pass *True* if the administrator can post messages in the channel, or access channel statistics; for channels only
         * @param {boolean} [canEditMessages] Pass *True* if the administrator can edit messages of other users and can pin messages; for channels only
         * @param {boolean} [canPinMessages] Pass *True* if the administrator can pin messages; for supergroups only
         * @param {boolean} [canManageTopics] Pass *True* if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoteChatMemberPost(chatId: SendMessagePostRequestChatId, userId: number, isAnonymous?: boolean, canManageChat?: boolean, canDeleteMessages?: boolean, canManageVideoChats?: boolean, canRestrictMembers?: boolean, canPromoteMembers?: boolean, canChangeInfo?: boolean, canInviteUsers?: boolean, canPostStories?: boolean, canEditStories?: boolean, canDeleteStories?: boolean, canPostMessages?: boolean, canEditMessages?: boolean, canPinMessages?: boolean, canManageTopics?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoteChatMemberPost(chatId, userId, isAnonymous, canManageChat, canDeleteMessages, canManageVideoChats, canRestrictMembers, canPromoteMembers, canChangeInfo, canInviteUsers, canPostStories, canEditStories, canDeleteStories, canPostMessages, canEditMessages, canPinMessages, canManageTopics, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.promoteChatMemberPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Marks incoming message as read on behalf of a business account. Requires the *can\\_read\\_messages* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection on behalf of which to read the message
         * @param {number} chatId Unique identifier of the chat in which the message was received. The chat must have been active in the last 24 hours.
         * @param {number} messageId Unique identifier of the message to mark as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readBusinessMessagePost(businessConnectionId: string, chatId: number, messageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readBusinessMessagePost(businessConnectionId, chatId, messageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readBusinessMessagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Refunds a successful payment in [Telegram Stars](https://t.me/BotNews/90). Returns *True* on success.
         * @param {number} userId Identifier of the user whose payment will be refunded
         * @param {string} telegramPaymentChargeId Telegram payment identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundStarPaymentPost(userId: number, telegramPaymentChargeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundStarPaymentPost(userId, telegramPaymentChargeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.refundStarPaymentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes the current profile photo of a managed business account. Requires the *can\\_edit\\_profile\\_photo* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {boolean} [isPublic] Pass True to remove the public photo, which is visible even if the main photo is hidden by the business account\\\&#39;s privacy settings. After the main photo is removed, the previous profile photo (if present) becomes the main photo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBusinessAccountProfilePhotoPost(businessConnectionId: string, isPublic?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBusinessAccountProfilePhotoPost(businessConnectionId, isPublic, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.removeBusinessAccountProfilePhotoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes verification from a chat that is currently verified [on behalf of the organization](https://telegram.org/verify#third-party-verification) represented by the bot. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeChatVerificationPost(chatId: SendMessagePostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeChatVerificationPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.removeChatVerificationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes verification from a user who is currently verified [on behalf of the organization](https://telegram.org/verify#third-party-verification) represented by the bot. Returns *True* on success.
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserVerificationPost(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserVerificationPost(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.removeUserVerificationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights, unless it is the creator of the topic. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reopenForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reopenForumTopicPost(chatId, messageThreadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.reopenForumTopicPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to reopen a closed \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. The topic will be automatically unhidden if it was hidden. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reopenGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reopenGeneralForumTopicPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.reopenGeneralForumTopicPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling [deleteStickerFromSet](https://core.telegram.org/bots/api/#deletestickerfromset), then [addStickerToSet](https://core.telegram.org/bots/api/#addstickertoset), then [setStickerPositionInSet](https://core.telegram.org/bots/api/#setstickerpositioninset). Returns *True* on success.
         * @param {number} userId User identifier of the sticker set owner
         * @param {string} name Sticker set name
         * @param {string} oldSticker File identifier of the replaced sticker
         * @param {InputSticker} sticker 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceStickerInSetPost(userId: number, name: string, oldSticker: string, sticker: InputSticker, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceStickerInSetPost(userId, name, oldSticker, sticker, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.replaceStickerInSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {ChatPermissions} permissions 
         * @param {boolean} [useIndependentChatPermissions] Pass *True* if chat permissions are set independently. Otherwise, the *can\\\\_send\\\\_other\\\\_messages* and *can\\\\_add\\\\_web\\\\_page\\\\_previews* permissions will imply the *can\\\\_send\\\\_messages*, *can\\\\_send\\\\_audios*, *can\\\\_send\\\\_documents*, *can\\\\_send\\\\_photos*, *can\\\\_send\\\\_videos*, *can\\\\_send\\\\_video\\\\_notes*, and *can\\\\_send\\\\_voice\\\\_notes* permissions; the *can\\\\_send\\\\_polls* permission will imply the *can\\\\_send\\\\_messages* permission.
         * @param {number} [untilDate] Date when restrictions will be lifted for the user; Unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restrictChatMemberPost(chatId: RestrictChatMemberPostRequestChatId, userId: number, permissions: ChatPermissions, useIndependentChatPermissions?: boolean, untilDate?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restrictChatMemberPost(chatId, userId, permissions, useIndependentChatPermissions, untilDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.restrictChatMemberPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {RevokeChatInviteLinkPostRequestChatId} chatId 
         * @param {string} inviteLink The invite link to revoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeChatInviteLinkPost(chatId: RevokeChatInviteLinkPostRequestChatId, inviteLink: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateChatInviteLinkPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeChatInviteLinkPost(chatId, inviteLink, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.revokeChatInviteLinkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Stores a message that can be sent by a user of a Mini App. Returns a [PreparedInlineMessage](https://core.telegram.org/bots/api/#preparedinlinemessage) object.
         * @param {number} userId Unique identifier of the target user that can use the prepared message
         * @param {InlineQueryResult} result 
         * @param {boolean} [allowUserChats] Pass *True* if the message can be sent to private chats with users
         * @param {boolean} [allowBotChats] Pass *True* if the message can be sent to private chats with bots
         * @param {boolean} [allowGroupChats] Pass *True* if the message can be sent to group and supergroup chats
         * @param {boolean} [allowChannelChats] Pass *True* if the message can be sent to channel chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async savePreparedInlineMessagePost(userId: number, result: InlineQueryResult, allowUserChats?: boolean, allowBotChats?: boolean, allowGroupChats?: boolean, allowChannelChats?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavePreparedInlineMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.savePreparedInlineMessagePost(userId, result, allowUserChats, allowBotChats, allowGroupChats, allowChannelChats, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.savePreparedInlineMessagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendAnimationPostRequestAnimation} animation 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [duration] Duration of sent animation in seconds
         * @param {number} [width] Animation width
         * @param {number} [height] Animation height
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {string} [caption] Animation caption (may also be used when resending animation by *file\\\\_id*), 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
         * @param {boolean} [hasSpoiler] Pass *True* if the animation needs to be covered with a spoiler animation
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendAnimationPost(chatId: SendMessagePostRequestChatId, animation: SendAnimationPostRequestAnimation, businessConnectionId?: string, messageThreadId?: number, duration?: number, width?: number, height?: number, thumbnail?: SendAudioPostRequestThumbnail, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, hasSpoiler?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendAnimationPost(chatId, animation, businessConnectionId, messageThreadId, duration, width, height, thumbnail, caption, parseMode, captionEntities, showCaptionAboveMedia, hasSpoiler, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendAnimationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.  For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendAudioPostRequestAudio} audio 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [caption] Audio caption, 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {number} [duration] Duration of the audio in seconds
         * @param {string} [performer] Performer
         * @param {string} [title] Track name
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendAudioPost(chatId: SendMessagePostRequestChatId, audio: SendAudioPostRequestAudio, businessConnectionId?: string, messageThreadId?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, duration?: number, performer?: string, title?: string, thumbnail?: SendAudioPostRequestThumbnail, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendAudioPost(chatId, audio, businessConnectionId, messageThreadId, caption, parseMode, captionEntities, duration, performer, title, thumbnail, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendAudioPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method when you need to tell the user that something is happening on the bot\'s side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.  Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\\_photo*. The user will see a “sending photo” status for the bot.  We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendChatActionPostActionEnum} action Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\\\\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\\\\_video* or *upload\\\\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\\\\_voice* or *upload\\\\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\\\\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *choose\\\\_sticker* for [stickers](https://core.telegram.org/bots/api/#sendsticker), *find\\\\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\\\\_video\\\\_note* or *upload\\\\_video\\\\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the action will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread; for supergroups only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendChatActionPost(chatId: SendMessagePostRequestChatId, action: SendChatActionPostActionEnum, businessConnectionId?: string, messageThreadId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendChatActionPost(chatId, action, businessConnectionId, messageThreadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendChatActionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} phoneNumber Contact\\\&#39;s phone number
         * @param {string} firstName Contact\\\&#39;s first name
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [lastName] Contact\\\&#39;s last name
         * @param {string} [vcard] Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendContactPost(chatId: SendMessagePostRequestChatId, phoneNumber: string, firstName: string, businessConnectionId?: string, messageThreadId?: number, lastName?: string, vcard?: string, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendContactPost(chatId, phoneNumber, firstName, businessConnectionId, messageThreadId, lastName, vcard, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendContactPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {SendDicePostEmojiEnum} [emoji] Emoji on which the dice throw animation is based. Currently, must be one of “🎲”, “🎯”, “🏀”, “⚽”, “🎳”, or “🎰”. Dice can have values 1-6 for “🎲”, “🎯” and “🎳”, values 1-5 for “🏀” and “⚽”, and values 1-64 for “🎰”. Defaults to “🎲”
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendDicePost(chatId: SendMessagePostRequestChatId, businessConnectionId?: string, messageThreadId?: number, emoji?: SendDicePostEmojiEnum, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendDicePost(chatId, businessConnectionId, messageThreadId, emoji, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendDicePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendDocumentPostRequestDocument} document 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {string} [caption] Document caption (may also be used when resending documents by *file\\\\_id*), 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [disableContentTypeDetection] Disables automatic server-side content type detection for files uploaded using multipart/form-data
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendDocumentPost(chatId: SendMessagePostRequestChatId, document: SendDocumentPostRequestDocument, businessConnectionId?: string, messageThreadId?: number, thumbnail?: SendAudioPostRequestThumbnail, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, disableContentTypeDetection?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendDocumentPost(chatId, document, businessConnectionId, messageThreadId, thumbnail, caption, parseMode, captionEntities, disableContentTypeDetection, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendDocumentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {number} chatId Unique identifier for the target chat
         * @param {string} gameShortName Short name of the game, serves as the unique identifier for the game. Set up your games via [@BotFather](https://t.me/botfather).
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendGamePost(chatId: number, gameShortName: string, businessConnectionId?: string, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendGamePost(chatId, gameShortName, businessConnectionId, messageThreadId, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendGamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sends a gift to the given user or channel chat. The gift can\'t be converted to Telegram Stars by the receiver. Returns *True* on success.
         * @param {string} giftId Identifier of the gift
         * @param {number} [userId] Required if *chat\\\\_id* is not specified. Unique identifier of the target user who will receive the gift.
         * @param {SendGiftPostRequestChatId} [chatId] 
         * @param {boolean} [payForUpgrade] Pass *True* to pay for the gift upgrade from the bot\\\&#39;s balance, thereby making the upgrade free for the receiver
         * @param {string} [text] Text that will be shown along with the gift; 0-128 characters
         * @param {string} [textParseMode] Mode for parsing entities in the text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
         * @param {Array<MessageEntity>} [textEntities] A JSON-serialized list of special entities that appear in the gift text. It can be specified instead of *text\\\\_parse\\\\_mode*. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendGiftPost(giftId: string, userId?: number, chatId?: SendGiftPostRequestChatId, payForUpgrade?: boolean, text?: string, textParseMode?: string, textEntities?: Array<MessageEntity>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendGiftPost(giftId, userId, chatId, payForUpgrade, text, textParseMode, textEntities, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendGiftPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} title Product name, 1-32 characters
         * @param {string} description Product description, 1-255 characters
         * @param {string} payload Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.
         * @param {string} currency Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies). Pass “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {Array<LabeledPrice>} prices Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [providerToken] Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an empty string for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {number} [maxTipAmount] The maximum accepted amount for tips in the *smallest units* of the currency (integer, **not** float/double). For example, for a maximum tip of &#x60;US$ 1.45&#x60; pass &#x60;max_tip_amount &#x3D; 145&#x60;. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {Array<number>} [suggestedTipAmounts] A JSON-serialized array of suggested amounts of tips in the *smallest units* of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed *max\\\\_tip\\\\_amount*.
         * @param {string} [startParameter] Unique deep-linking parameter. If left empty, **forwarded copies** of the sent message will have a *Pay* button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a *URL* button with a deep link to the bot (instead of a *Pay* button), with the value used as the start parameter
         * @param {string} [providerData] JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
         * @param {string} [photoUrl] URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
         * @param {number} [photoSize] Photo size in bytes
         * @param {number} [photoWidth] Photo width
         * @param {number} [photoHeight] Photo height
         * @param {boolean} [needName] Pass *True* if you require the user\\\&#39;s full name to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needPhoneNumber] Pass *True* if you require the user\\\&#39;s phone number to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needEmail] Pass *True* if you require the user\\\&#39;s email address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needShippingAddress] Pass *True* if you require the user\\\&#39;s shipping address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [sendPhoneNumberToProvider] Pass *True* if the user\\\&#39;s phone number should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [sendEmailToProvider] Pass *True* if the user\\\&#39;s email address should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [isFlexible] Pass *True* if the final price depends on the shipping method. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendInvoicePost(chatId: SendMessagePostRequestChatId, title: string, description: string, payload: string, currency: string, prices: Array<LabeledPrice>, messageThreadId?: number, providerToken?: string, maxTipAmount?: number, suggestedTipAmounts?: Array<number>, startParameter?: string, providerData?: string, photoUrl?: string, photoSize?: number, photoWidth?: number, photoHeight?: number, needName?: boolean, needPhoneNumber?: boolean, needEmail?: boolean, needShippingAddress?: boolean, sendPhoneNumberToProvider?: boolean, sendEmailToProvider?: boolean, isFlexible?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendInvoicePost(chatId, title, description, payload, currency, prices, messageThreadId, providerToken, maxTipAmount, suggestedTipAmounts, startParameter, providerData, photoUrl, photoSize, photoWidth, photoHeight, needName, needPhoneNumber, needEmail, needShippingAddress, sendPhoneNumberToProvider, sendEmailToProvider, isFlexible, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendInvoicePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} latitude Latitude of the location
         * @param {number} longitude Longitude of the location
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [horizontalAccuracy] The radius of uncertainty for the location, measured in meters; 0-1500
         * @param {number} [livePeriod] Period in seconds during which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.
         * @param {number} [heading] For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
         * @param {number} [proximityAlertRadius] For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendLocationPost(chatId: SendMessagePostRequestChatId, latitude: number, longitude: number, businessConnectionId?: string, messageThreadId?: number, horizontalAccuracy?: number, livePeriod?: number, heading?: number, proximityAlertRadius?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendLocationPost(chatId, latitude, longitude, businessConnectionId, messageThreadId, horizontalAccuracy, livePeriod, heading, proximityAlertRadius, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendLocationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {Array<SendMediaGroupPostRequestMediaInner>} media A JSON-serialized array describing messages to be sent, must include 2-10 items
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {boolean} [disableNotification] Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent messages from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMediaGroupPost(chatId: SendMessagePostRequestChatId, media: Array<SendMediaGroupPostRequestMediaInner>, businessConnectionId?: string, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMediaGroupPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMediaGroupPost(chatId, media, businessConnectionId, messageThreadId, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendMediaGroupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} text Text of the message to be sent, 1-4096 characters after entities parsing
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [parseMode] Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [entities] A JSON-serialized list of special entities that appear in message text, which can be specified instead of *parse\\\\_mode*
         * @param {LinkPreviewOptions} [linkPreviewOptions] 
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessagePost(chatId: SendMessagePostRequestChatId, text: string, businessConnectionId?: string, messageThreadId?: number, parseMode?: string, entities?: Array<MessageEntity>, linkPreviewOptions?: LinkPreviewOptions, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMessagePost(chatId, text, businessConnectionId, messageThreadId, parseMode, entities, linkPreviewOptions, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendMessagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send paid media. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendPaidMediaPostRequestChatId} chatId 
         * @param {number} starCount The number of Telegram Stars that must be paid to buy access to the media; 1-10000
         * @param {Array<InputPaidMedia>} media A JSON-serialized array describing the media to be sent; up to 10 items
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {string} [payload] Bot-defined paid media payload, 0-128 bytes. This will not be displayed to the user, use it for your internal processes.
         * @param {string} [caption] Media caption, 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the media caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPaidMediaPost(chatId: SendPaidMediaPostRequestChatId, starCount: number, media: Array<InputPaidMedia>, businessConnectionId?: string, payload?: string, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendPaidMediaPost(chatId, starCount, media, businessConnectionId, payload, caption, parseMode, captionEntities, showCaptionAboveMedia, disableNotification, protectContent, allowPaidBroadcast, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendPaidMediaPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendPhotoPostRequestPhoto} photo 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [caption] Photo caption (may also be used when resending photos by *file\\\\_id*), 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
         * @param {boolean} [hasSpoiler] Pass *True* if the photo needs to be covered with a spoiler animation
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPhotoPost(chatId: SendMessagePostRequestChatId, photo: SendPhotoPostRequestPhoto, businessConnectionId?: string, messageThreadId?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, hasSpoiler?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendPhotoPost(chatId, photo, businessConnectionId, messageThreadId, caption, parseMode, captionEntities, showCaptionAboveMedia, hasSpoiler, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendPhotoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} question Poll question, 1-300 characters
         * @param {Array<InputPollOption>} _options A JSON-serialized list of 2-10 answer options
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [questionParseMode] Mode for parsing entities in the question. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Currently, only custom emoji entities are allowed
         * @param {Array<MessageEntity>} [questionEntities] A JSON-serialized list of special entities that appear in the poll question. It can be specified instead of *question\\\\_parse\\\\_mode*
         * @param {boolean} [isAnonymous] *True*, if the poll needs to be anonymous, defaults to *True*
         * @param {SendPollPostTypeEnum} [type] Poll type, “quiz” or “regular”, defaults to “regular”
         * @param {boolean} [allowsMultipleAnswers] *True*, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
         * @param {number} [correctOptionId] 0-based identifier of the correct answer option, required for polls in quiz mode
         * @param {string} [explanation] Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
         * @param {string} [explanationParseMode] Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [explanationEntities] A JSON-serialized list of special entities that appear in the poll explanation. It can be specified instead of *explanation\\\\_parse\\\\_mode*
         * @param {number} [openPeriod] Amount of time in seconds the poll will be active after creation, 5-600. Can\\\&#39;t be used together with *close\\\\_date*.
         * @param {number} [closeDate] Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can\\\&#39;t be used together with *open\\\\_period*.
         * @param {boolean} [isClosed] Pass *True* if the poll needs to be immediately closed. This can be useful for poll preview.
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPollPost(chatId: SendMessagePostRequestChatId, question: string, _options: Array<InputPollOption>, businessConnectionId?: string, messageThreadId?: number, questionParseMode?: string, questionEntities?: Array<MessageEntity>, isAnonymous?: boolean, type?: SendPollPostTypeEnum, allowsMultipleAnswers?: boolean, correctOptionId?: number, explanation?: string, explanationParseMode?: string, explanationEntities?: Array<MessageEntity>, openPeriod?: number, closeDate?: number, isClosed?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendPollPost(chatId, question, _options, businessConnectionId, messageThreadId, questionParseMode, questionEntities, isAnonymous, type, allowsMultipleAnswers, correctOptionId, explanation, explanationParseMode, explanationEntities, openPeriod, closeDate, isClosed, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendPollPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS, or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendStickerPostRequestSticker} sticker 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [emoji] Emoji associated with the sticker; only for just uploaded stickers
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendStickerPost(chatId: SendMessagePostRequestChatId, sticker: SendStickerPostRequestSticker, businessConnectionId?: string, messageThreadId?: number, emoji?: string, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendStickerPost(chatId, sticker, businessConnectionId, messageThreadId, emoji, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendStickerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} latitude Latitude of the venue
         * @param {number} longitude Longitude of the venue
         * @param {string} title Name of the venue
         * @param {string} address Address of the venue
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [foursquareId] Foursquare identifier of the venue
         * @param {string} [foursquareType] Foursquare type of the venue, if known. (For example, “arts\\\\_entertainment/default”, “arts\\\\_entertainment/aquarium” or “food/icecream”.)
         * @param {string} [googlePlaceId] Google Places identifier of the venue
         * @param {string} [googlePlaceType] Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendVenuePost(chatId: SendMessagePostRequestChatId, latitude: number, longitude: number, title: string, address: string, businessConnectionId?: string, messageThreadId?: number, foursquareId?: string, foursquareType?: string, googlePlaceId?: string, googlePlaceType?: string, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendVenuePost(chatId, latitude, longitude, title, address, businessConnectionId, messageThreadId, foursquareId, foursquareType, googlePlaceId, googlePlaceType, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendVenuePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendVideoNotePostRequestVideoNote} videoNote 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [duration] Duration of sent video in seconds
         * @param {number} [length] Video width and height, i.e. diameter of the video message
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendVideoNotePost(chatId: SendMessagePostRequestChatId, videoNote: SendVideoNotePostRequestVideoNote, businessConnectionId?: string, messageThreadId?: number, duration?: number, length?: number, thumbnail?: SendAudioPostRequestThumbnail, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendVideoNotePost(chatId, videoNote, businessConnectionId, messageThreadId, duration, length, thumbnail, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendVideoNotePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendVideoPostRequestVideo} video 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [duration] Duration of sent video in seconds
         * @param {number} [width] Video width
         * @param {number} [height] Video height
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {SendVideoPostRequestCover} [cover] 
         * @param {number} [startTimestamp] Start timestamp for the video in the message
         * @param {string} [caption] Video caption (may also be used when resending videos by *file\\\\_id*), 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
         * @param {boolean} [hasSpoiler] Pass *True* if the video needs to be covered with a spoiler animation
         * @param {boolean} [supportsStreaming] Pass *True* if the uploaded video is suitable for streaming
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendVideoPost(chatId: SendMessagePostRequestChatId, video: SendVideoPostRequestVideo, businessConnectionId?: string, messageThreadId?: number, duration?: number, width?: number, height?: number, thumbnail?: SendAudioPostRequestThumbnail, cover?: SendVideoPostRequestCover, startTimestamp?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, hasSpoiler?: boolean, supportsStreaming?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendVideoPost(chatId, video, businessConnectionId, messageThreadId, duration, width, height, thumbnail, cover, startTimestamp, caption, parseMode, captionEntities, showCaptionAboveMedia, hasSpoiler, supportsStreaming, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendVideoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS, or in .MP3 format, or in .M4A format (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendVoicePostRequestVoice} voice 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [caption] Voice message caption, 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {number} [duration] Duration of the voice message in seconds
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendVoicePost(chatId: SendMessagePostRequestChatId, voice: SendVoicePostRequestVoice, businessConnectionId?: string, messageThreadId?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, duration?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendVoicePost(chatId, voice, businessConnectionId, messageThreadId, caption, parseMode, captionEntities, duration, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sendVoicePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Changes the bio of a managed business account. Requires the *can\\_change\\_bio* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} [bio] The new value of the bio for the business account; 0-140 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setBusinessAccountBioPost(businessConnectionId: string, bio?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setBusinessAccountBioPost(businessConnectionId, bio, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setBusinessAccountBioPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Changes the privacy settings pertaining to incoming gifts in a managed business account. Requires the *can\\_change\\_gift\\_settings* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {boolean} showGiftButton Pass True, if a button for sending a gift to the user or by the business account must always be shown in the input field
         * @param {AcceptedGiftTypes} acceptedGiftTypes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setBusinessAccountGiftSettingsPost(businessConnectionId: string, showGiftButton: boolean, acceptedGiftTypes: AcceptedGiftTypes, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setBusinessAccountGiftSettingsPost(businessConnectionId, showGiftButton, acceptedGiftTypes, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setBusinessAccountGiftSettingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Changes the first and last name of a managed business account. Requires the *can\\_change\\_name* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} firstName The new value of the first name for the business account; 1-64 characters
         * @param {string} [lastName] The new value of the last name for the business account; 0-64 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setBusinessAccountNamePost(businessConnectionId: string, firstName: string, lastName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setBusinessAccountNamePost(businessConnectionId, firstName, lastName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setBusinessAccountNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Changes the profile photo of a managed business account. Requires the *can\\_edit\\_profile\\_photo* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {InputProfilePhoto} photo 
         * @param {boolean} [isPublic] Pass True to set the public photo, which will be visible even if the main photo is hidden by the business account\\\&#39;s privacy settings. An account can have only one public photo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setBusinessAccountProfilePhotoPost(businessConnectionId: string, photo: InputProfilePhoto, isPublic?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setBusinessAccountProfilePhotoPost(businessConnectionId, photo, isPublic, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setBusinessAccountProfilePhotoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Changes the username of a managed business account. Requires the *can\\_change\\_username* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} [username] The new value of the username for the business account; 0-32 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setBusinessAccountUsernamePost(businessConnectionId: string, username?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setBusinessAccountUsernamePost(businessConnectionId, username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setBusinessAccountUsernamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {string} customTitle New custom title for the administrator; 0-16 characters, emoji are not allowed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setChatAdministratorCustomTitlePost(chatId: RestrictChatMemberPostRequestChatId, userId: number, customTitle: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setChatAdministratorCustomTitlePost(chatId, userId, customTitle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setChatAdministratorCustomTitlePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [description] New chat description, 0-255 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setChatDescriptionPost(chatId: SendMessagePostRequestChatId, description?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setChatDescriptionPost(chatId, description, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setChatDescriptionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to change the bot\'s menu button in a private chat, or the default menu button. Returns *True* on success.
         * @param {number} [chatId] Unique identifier for the target private chat. If not specified, default bot\\\&#39;s menu button will be changed
         * @param {MenuButton} [menuButton] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setChatMenuButtonPost(chatId?: number, menuButton?: MenuButton, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setChatMenuButtonPost(chatId, menuButton, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setChatMenuButtonPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\\_restrict\\_members* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {ChatPermissions} permissions 
         * @param {boolean} [useIndependentChatPermissions] Pass *True* if chat permissions are set independently. Otherwise, the *can\\\\_send\\\\_other\\\\_messages* and *can\\\\_add\\\\_web\\\\_page\\\\_previews* permissions will imply the *can\\\\_send\\\\_messages*, *can\\\\_send\\\\_audios*, *can\\\\_send\\\\_documents*, *can\\\\_send\\\\_photos*, *can\\\\_send\\\\_videos*, *can\\\\_send\\\\_video\\\\_notes*, and *can\\\\_send\\\\_voice\\\\_notes* permissions; the *can\\\\_send\\\\_polls* permission will imply the *can\\\\_send\\\\_messages* permission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setChatPermissionsPost(chatId: RestrictChatMemberPostRequestChatId, permissions: ChatPermissions, useIndependentChatPermissions?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setChatPermissionsPost(chatId, permissions, useIndependentChatPermissions, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setChatPermissionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to set a new profile photo for the chat. Photos can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {any} photo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setChatPhotoPost(chatId: SendMessagePostRequestChatId, photo: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setChatPhotoPost(chatId, photo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setChatPhotoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {string} stickerSetName Name of the sticker set to be set as the group sticker set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setChatStickerSetPost(chatId: RestrictChatMemberPostRequestChatId, stickerSetName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setChatStickerSetPost(chatId, stickerSetName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setChatStickerSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to change the title of a chat. Titles can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} title New chat title, 1-128 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setChatTitlePost(chatId: SendMessagePostRequestChatId, title: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setChatTitlePost(chatId, title, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setChatTitlePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to set the thumbnail of a custom emoji sticker set. Returns *True* on success.
         * @param {string} name Sticker set name
         * @param {string} [customEmojiId] Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the thumbnail and use the first sticker as the thumbnail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setCustomEmojiStickerSetThumbnailPost(name: string, customEmojiId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setCustomEmojiStickerSetThumbnailPost(name, customEmojiId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setCustomEmojiStickerSetThumbnailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Returns an error, if the new score is not greater than the user\'s current score in the chat and *force* is *False*.
         * @param {number} userId User identifier
         * @param {number} score New score, must be non-negative
         * @param {boolean} [force] Pass *True* if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
         * @param {boolean} [disableEditMessage] Pass *True* if the game message should not be automatically edited to include the current scoreboard
         * @param {number} [chatId] Required if *inline\\\\_message\\\\_id* is not specified. Unique identifier for the target chat
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the sent message
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setGameScorePost(userId: number, score: number, force?: boolean, disableEditMessage?: boolean, chatId?: number, messageId?: number, inlineMessageId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditMessageTextPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setGameScorePost(userId, score, force, disableEditMessage, chatId, messageId, inlineMessageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setGameScorePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to change the chosen reactions on a message. Service messages of some types can\'t be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. Bots can\'t use paid reactions. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} messageId Identifier of the target message. If the message belongs to a media group, the reaction is set to the first non-deleted message in the group instead.
         * @param {Array<ReactionType>} [reaction] A JSON-serialized list of reaction types to set on the message. Currently, as non-premium users, bots can set up to one reaction per message. A custom emoji reaction can be used if it is either already present on the message or explicitly allowed by chat administrators. Paid reactions can\\\&#39;t be used by bots.
         * @param {boolean} [isBig] Pass *True* to set the reaction with a big animation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setMessageReactionPost(chatId: SendMessagePostRequestChatId, messageId: number, reaction?: Array<ReactionType>, isBig?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setMessageReactionPost(chatId, messageId, reaction, isBig, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setMessageReactionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to change the list of the bot\'s commands. See [this manual](https://core.telegram.org/bots/features#commands) for more details about bot commands. Returns *True* on success.
         * @param {Array<BotCommand>} commands A JSON-serialized list of bot commands to be set as the list of the bot\\\&#39;s commands. At most 100 commands can be specified.
         * @param {BotCommandScope} [scope] 
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setMyCommandsPost(commands: Array<BotCommand>, scope?: BotCommandScope, languageCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setMyCommandsPost(commands, scope, languageCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setMyCommandsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to change the default administrator rights requested by the bot when it\'s added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns *True* on success.
         * @param {ChatAdministratorRights} [rights] 
         * @param {boolean} [forChannels] Pass *True* to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setMyDefaultAdministratorRightsPost(rights?: ChatAdministratorRights, forChannels?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setMyDefaultAdministratorRightsPost(rights, forChannels, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setMyDefaultAdministratorRightsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to change the bot\'s description, which is shown in the chat with the bot if the chat is empty. Returns *True* on success.
         * @param {string} [description] New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for whose language there is no dedicated description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setMyDescriptionPost(description?: string, languageCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setMyDescriptionPost(description, languageCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setMyDescriptionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to change the bot\'s name. Returns *True* on success.
         * @param {string} [name] New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language there is no dedicated name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setMyNamePost(name?: string, languageCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setMyNamePost(name, languageCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setMyNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to change the bot\'s short description, which is shown on the bot\'s profile page and is sent together with the link when users share the bot. Returns *True* on success.
         * @param {string} [shortDescription] New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setMyShortDescriptionPost(shortDescription?: string, languageCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setMyShortDescriptionPost(shortDescription, languageCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setMyShortDescriptionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.  Use this if the data submitted by the user doesn\'t satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
         * @param {number} userId User identifier
         * @param {Array<PassportElementError>} errors A JSON-serialized array describing the errors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPassportDataErrorsPost(userId: number, errors: Array<PassportElementError>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPassportDataErrorsPost(userId, errors, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setPassportDataErrorsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {Array<string>} emojiList A JSON-serialized list of 1-20 emoji associated with the sticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStickerEmojiListPost(sticker: string, emojiList: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStickerEmojiListPost(sticker, emojiList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setStickerEmojiListPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {Array<string>} [keywords] A JSON-serialized list of 0-20 search keywords for the sticker with total length of up to 64 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStickerKeywordsPost(sticker: string, keywords?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStickerKeywordsPost(sticker, keywords, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setStickerKeywordsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to change the [mask position](https://core.telegram.org/bots/api/#maskposition) of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {MaskPosition} [maskPosition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStickerMaskPositionPost(sticker: string, maskPosition?: MaskPosition, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStickerMaskPositionPost(sticker, maskPosition, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setStickerMaskPositionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {number} position New sticker position in the set, zero-based
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStickerPositionInSetPost(sticker: string, position: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStickerPositionInSetPost(sticker, position, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setStickerPositionInSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns *True* on success.
         * @param {string} name Sticker set name
         * @param {number} userId User identifier of the sticker set owner
         * @param {SetStickerSetThumbnailPostFormatEnum} format Format of the thumbnail, must be one of “static” for a **.WEBP** or **.PNG** image, “animated” for a **.TGS** animation, or “video” for a **.WEBM** video
         * @param {SetStickerSetThumbnailPostRequestThumbnail} [thumbnail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStickerSetThumbnailPost(name: string, userId: number, format: SetStickerSetThumbnailPostFormatEnum, thumbnail?: SetStickerSetThumbnailPostRequestThumbnail, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStickerSetThumbnailPost(name, userId, format, thumbnail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setStickerSetThumbnailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to set the title of a created sticker set. Returns *True* on success.
         * @param {string} name Sticker set name
         * @param {string} title Sticker set title, 1-64 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStickerSetTitlePost(name: string, title: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStickerSetTitlePost(name, title, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setStickerSetTitlePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Changes the emoji status for a given user that previously allowed the bot to manage their emoji status via the Mini App method [requestEmojiStatusAccess](https://core.telegram.org/bots/webapps#initializing-mini-apps). Returns *True* on success.
         * @param {number} userId Unique identifier of the target user
         * @param {string} [emojiStatusCustomEmojiId] Custom emoji identifier of the emoji status to set. Pass an empty string to remove the status.
         * @param {number} [emojiStatusExpirationDate] Expiration date of the emoji status, if any
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setUserEmojiStatusPost(userId: number, emojiStatusCustomEmojiId?: string, emojiStatusExpirationDate?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setUserEmojiStatusPost(userId, emojiStatusCustomEmojiId, emojiStatusExpirationDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setUserEmojiStatusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request (a request with response [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) different from `2XY`), we will repeat the request and give up after a reasonable amount of attempts. Returns *True* on success.  If you\'d like to make sure that the webhook was set by you, you can specify secret data in the parameter *secret\\_token*. If specified, the request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the secret token as content.
         * @param {string} url HTTPS URL to send updates to. Use an empty string to remove webhook integration
         * @param {any} [certificate] 
         * @param {string} [ipAddress] The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS
         * @param {number} [maxConnections] The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on your bot\\\&#39;s server, and higher values to increase your bot\\\&#39;s throughput.
         * @param {Array<string>} [allowedUpdates] A JSON-serialized list of the update types you want your bot to receive. For example, specify &#x60;[\\\&quot;message\\\&quot;, \\\&quot;edited_channel_post\\\&quot;, \\\&quot;callback_query\\\&quot;]&#x60; to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all update types except *chat\\\\_member*, *message\\\\_reaction*, and *message\\\\_reaction\\\\_count* (default). If not specified, the previous setting will be used.   Please note that this parameter doesn\\\&#39;t affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.
         * @param {boolean} [dropPendingUpdates] Pass *True* to drop all pending updates
         * @param {string} [secretToken] A secret token to be sent in a header “X-Telegram-Bot-Api-Secret-Token” in every webhook request, 1-256 characters. Only characters &#x60;A-Z&#x60;, &#x60;a-z&#x60;, &#x60;0-9&#x60;, &#x60;_&#x60; and &#x60;-&#x60; are allowed. The header is useful to ensure that the request comes from a webhook set by you.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setWebhookPost(url: string, certificate?: any, ipAddress?: string, maxConnections?: number, allowedUpdates?: Array<string>, dropPendingUpdates?: boolean, secretToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setWebhookPost(url, certificate, ipAddress, maxConnections, allowedUpdates, dropPendingUpdates, secretToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setWebhookPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to stop updating a live location message before *live\\_period* expires. On success, if the message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message with live location to stop
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopMessageLiveLocationPost(businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditMessageTextPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopMessageLiveLocationPost(businessConnectionId, chatId, messageId, inlineMessageId, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.stopMessageLiveLocationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} messageId Identifier of the original message with the poll
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopPollPost(chatId: SendMessagePostRequestChatId, messageId: number, businessConnectionId?: string, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StopPollPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopPollPost(chatId, messageId, businessConnectionId, replyMarkup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.stopPollPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Transfers Telegram Stars from the business account balance to the bot\'s balance. Requires the *can\\_transfer\\_stars* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {number} starCount Number of Telegram Stars to transfer; 1-10000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferBusinessAccountStarsPost(businessConnectionId: string, starCount: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferBusinessAccountStarsPost(businessConnectionId, starCount, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.transferBusinessAccountStarsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Transfers an owned unique gift to another user. Requires the *can\\_transfer\\_and\\_upgrade\\_gifts* business bot right. Requires *can\\_transfer\\_stars* business bot right if the transfer is paid. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} ownedGiftId Unique identifier of the regular gift that should be transferred
         * @param {number} newOwnerChatId Unique identifier of the chat which will own the gift. The chat must be active in the last 24 hours.
         * @param {number} [starCount] The amount of Telegram Stars that will be paid for the transfer from the business account balance. If positive, then the *can\\\\_transfer\\\\_stars* business bot right is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferGiftPost(businessConnectionId: string, ownedGiftId: string, newOwnerChatId: number, starCount?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferGiftPost(businessConnectionId, ownedGiftId, newOwnerChatId, starCount, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.transferGiftPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to unban a previously banned user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don\'t want this, use the parameter *only\\_if\\_banned*. Returns *True* on success.
         * @param {BanChatMemberPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {boolean} [onlyIfBanned] Do nothing if the user is not banned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unbanChatMemberPost(chatId: BanChatMemberPostRequestChatId, userId: number, onlyIfBanned?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unbanChatMemberPost(chatId, userId, onlyIfBanned, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.unbanChatMemberPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} senderChatId Unique identifier of the target sender chat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unbanChatSenderChatPost(chatId: SendMessagePostRequestChatId, senderChatId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unbanChatSenderChatPost(chatId, senderChatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.unbanChatSenderChatPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to unhide the \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unhideGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unhideGeneralForumTopicPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.unhideGeneralForumTopicPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the \'can\\_pin\\_messages\' administrator right in a supergroup or \'can\\_edit\\_messages\' administrator right in a channel. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpinAllChatMessagesPost(chatId: SendMessagePostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unpinAllChatMessagesPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.unpinAllChatMessagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the *can\\_pin\\_messages* administrator right in the supergroup. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpinAllForumTopicMessagesPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unpinAllForumTopicMessagesPost(chatId, messageThreadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.unpinAllForumTopicMessagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the *can\\_pin\\_messages* administrator right in the supergroup. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpinAllGeneralForumTopicMessagesPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unpinAllGeneralForumTopicMessagesPost(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.unpinAllGeneralForumTopicMessagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the \'can\\_pin\\_messages\' administrator right in a supergroup or \'can\\_edit\\_messages\' administrator right in a channel. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be unpinned
         * @param {number} [messageId] Identifier of the message to unpin. Required if *business\\\\_connection\\\\_id* is specified. If not specified, the most recent pinned message (by sending date) will be unpinned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpinChatMessagePost(chatId: SendMessagePostRequestChatId, businessConnectionId?: string, messageId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unpinChatMessagePost(chatId, businessConnectionId, messageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.unpinChatMessagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upgrades a given regular gift to a unique gift. Requires the *can\\_transfer\\_and\\_upgrade\\_gifts* business bot right. Additionally requires the *can\\_transfer\\_stars* business bot right if the upgrade is paid. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} ownedGiftId Unique identifier of the regular gift that should be upgraded to a unique one
         * @param {boolean} [keepOriginalDetails] Pass True to keep the original gift text, sender and receiver in the upgraded gift
         * @param {number} [starCount] The amount of Telegram Stars that will be paid for the upgrade from the business account balance. If &#x60;gift.prepaid_upgrade_star_count &gt; 0&#x60;, then pass 0, otherwise, the *can\\\\_transfer\\\\_stars* business bot right is required and &#x60;gift.upgrade_star_count&#x60; must be passed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upgradeGiftPost(businessConnectionId: string, ownedGiftId: string, keepOriginalDetails?: boolean, starCount?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upgradeGiftPost(businessConnectionId, ownedGiftId, keepOriginalDetails, starCount, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.upgradeGiftPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this method to upload a file with a sticker for later use in the [createNewStickerSet](https://core.telegram.org/bots/api/#createnewstickerset), [addStickerToSet](https://core.telegram.org/bots/api/#addstickertoset), or [replaceStickerInSet](https://core.telegram.org/bots/api/#replacestickerinset) methods (the file can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
         * @param {number} userId User identifier of sticker file owner
         * @param {any} sticker 
         * @param {UploadStickerFilePostStickerFormatEnum} stickerFormat Format of the sticker, must be one of “static”, “animated”, “video”
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadStickerFilePost(userId: number, sticker: any, stickerFormat: UploadStickerFilePostStickerFormatEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFilePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadStickerFilePost(userId, sticker, stickerFormat, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uploadStickerFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verifies a chat [on behalf of the organization](https://telegram.org/verify#third-party-verification) which is represented by the bot. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [customDescription] Custom description for the verification; 0-70 characters. Must be empty if the organization isn\\\&#39;t allowed to provide a custom verification description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyChatPost(chatId: SendMessagePostRequestChatId, customDescription?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyChatPost(chatId, customDescription, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.verifyChatPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verifies a user [on behalf of the organization](https://telegram.org/verify#third-party-verification) which is represented by the bot. Returns *True* on success.
         * @param {number} userId Unique identifier of the target user
         * @param {string} [customDescription] Custom description for the verification; 0-70 characters. Must be empty if the organization isn\\\&#39;t allowed to provide a custom verification description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyUserPost(userId: number, customDescription?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebhookPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyUserPost(userId, customDescription, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.verifyUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers. Returns *True* on success.
         * @param {number} userId User identifier of sticker set owner
         * @param {string} name Sticker set name
         * @param {InputSticker} sticker 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStickerToSetPost(userId: number, name: string, sticker: InputSticker, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.addStickerToSetPost(userId, name, sticker, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send answers to callback queries sent from [inline keyboards](https://core.telegram.org/bots/features#inline-keyboards). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.  Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@BotFather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
         * @param {string} callbackQueryId Unique identifier for the query to be answered
         * @param {string} [text] Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
         * @param {boolean} [showAlert] If *True*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
         * @param {string} [url] URL that will be opened by the user\\\&#39;s client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@BotFather](https://t.me/botfather), specify the URL that opens your game - note that this will only work if the query comes from a [*callback\\\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.    Otherwise, you may use links like &#x60;t.me/your_bot?start&#x3D;XXXX&#x60; that open your bot with a parameter.
         * @param {number} [cacheTime] The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerCallbackQueryPost(callbackQueryId: string, text?: string, showAlert?: boolean, url?: string, cacheTime?: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.answerCallbackQueryPost(callbackQueryId, text, showAlert, url, cacheTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send answers to an inline query. On success, *True* is returned.   No more than **50** results per query are allowed.
         * @param {string} inlineQueryId Unique identifier for the answered query
         * @param {Array<InlineQueryResult>} results A JSON-serialized array of results for the inline query
         * @param {number} [cacheTime] The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
         * @param {boolean} [isPersonal] Pass *True* if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query.
         * @param {string} [nextOffset] Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don\\\&#39;t support pagination. Offset length can\\\&#39;t exceed 64 bytes.
         * @param {InlineQueryResultsButton} [button] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerInlineQueryPost(inlineQueryId: string, results: Array<InlineQueryResult>, cacheTime?: number, isPersonal?: boolean, nextOffset?: string, button?: InlineQueryResultsButton, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.answerInlineQueryPost(inlineQueryId, results, cacheTime, isPersonal, nextOffset, button, options).then((request) => request(axios, basePath));
        },
        /**
         * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\\_checkout\\_query*. Use this method to respond to such pre-checkout queries. On success, *True* is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
         * @param {string} preCheckoutQueryId Unique identifier for the query to be answered
         * @param {boolean} ok Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
         * @param {string} [errorMessage] Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \\\&quot;Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\\\&quot;). Telegram will display this message to the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerPreCheckoutQueryPost(preCheckoutQueryId: string, ok: boolean, errorMessage?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.answerPreCheckoutQueryPost(preCheckoutQueryId, ok, errorMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * If you sent an invoice requesting a shipping address and the parameter *is\\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\\_query* field to the bot. Use this method to reply to shipping queries. On success, *True* is returned.
         * @param {string} shippingQueryId Unique identifier for the query to be answered
         * @param {boolean} ok Pass *True* if delivery to the specified address is possible and *False* if there are any problems (for example, if delivery to the specified address is not possible)
         * @param {Array<ShippingOption>} [shippingOptions] Required if *ok* is *True*. A JSON-serialized array of available shipping options.
         * @param {string} [errorMessage] Required if *ok* is *False*. Error message in human readable form that explains why it is impossible to complete the order (e.g. “Sorry, delivery to your desired address is unavailable”). Telegram will display this message to the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerShippingQueryPost(shippingQueryId: string, ok: boolean, shippingOptions?: Array<ShippingOption>, errorMessage?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.answerShippingQueryPost(shippingQueryId, ok, shippingOptions, errorMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to set the result of an interaction with a [Web App](https://core.telegram.org/bots/webapps) and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a [SentWebAppMessage](https://core.telegram.org/bots/api/#sentwebappmessage) object is returned.
         * @param {string} webAppQueryId Unique identifier for the query to be answered
         * @param {InlineQueryResult} result 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerWebAppQueryPost(webAppQueryId: string, result: InlineQueryResult, options?: RawAxiosRequestConfig): AxiosPromise<AnswerWebAppQueryPost200Response> {
            return localVarFp.answerWebAppQueryPost(webAppQueryId, result, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the *can\\_invite\\_users* administrator right. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveChatJoinRequestPost(chatId: SendMessagePostRequestChatId, userId: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.approveChatJoinRequestPost(chatId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {BanChatMemberPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {number} [untilDate] Date when the user will be unbanned; Unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only.
         * @param {boolean} [revokeMessages] Pass *True* to delete all messages from the chat for the user that is being removed. If *False*, the user will be able to see messages in the group that were sent before the user was removed. Always *True* for supergroups and channels.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banChatMemberPost(chatId: BanChatMemberPostRequestChatId, userId: number, untilDate?: number, revokeMessages?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.banChatMemberPost(chatId, userId, untilDate, revokeMessages, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to ban a channel chat in a supergroup or a channel. Until the chat is [unbanned](https://core.telegram.org/bots/api/#unbanchatsenderchat), the owner of the banned chat won\'t be able to send messages on behalf of **any of their channels**. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} senderChatId Unique identifier of the target sender chat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banChatSenderChatPost(chatId: SendMessagePostRequestChatId, senderChatId: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.banChatSenderChatPost(chatId, senderChatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights, unless it is the creator of the topic. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.closeForumTopicPost(chatId, messageThreadId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to close an open \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.closeGeneralForumTopicPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn\'t launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closePost(options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.closePost(options).then((request) => request(axios, basePath));
        },
        /**
         * Converts a given regular gift to Telegram Stars. Requires the *can\\_convert\\_gifts\\_to\\_stars* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} ownedGiftId Unique identifier of the regular gift that should be converted to Telegram Stars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertGiftToStarsPost(businessConnectionId: string, ownedGiftId: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.convertGiftToStarsPost(businessConnectionId, ownedGiftId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to copy messages of any kind. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can\'t be copied. A quiz [poll](https://core.telegram.org/bots/api/#poll) can be copied only if the value of the field *correct\\_option\\_id* is known to the bot. The method is analogous to the method [forwardMessage](https://core.telegram.org/bots/api/#forwardmessage), but the copied message doesn\'t have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {ForwardMessagePostRequestFromChatId} fromChatId 
         * @param {number} messageId Message identifier in the chat specified in *from\\\\_chat\\\\_id*
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [videoStartTimestamp] New start timestamp for the copied video in the message
         * @param {string} [caption] New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
         * @param {string} [parseMode] Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the new caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media. Ignored if a new caption isn\\\&#39;t specified.
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyMessagePost(chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagePostRequestFromChatId, messageId: number, messageThreadId?: number, videoStartTimestamp?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<CopyMessagePost200Response> {
            return localVarFp.copyMessagePost(chatId, fromChatId, messageId, messageThreadId, videoStartTimestamp, caption, parseMode, captionEntities, showCaptionAboveMedia, disableNotification, protectContent, allowPaidBroadcast, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to copy messages of any kind. If some of the specified messages can\'t be found or copied, they are skipped. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can\'t be copied. A quiz [poll](https://core.telegram.org/bots/api/#poll) can be copied only if the value of the field *correct\\_option\\_id* is known to the bot. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied messages don\'t have a link to the original message. Album grouping is kept for copied messages. On success, an array of [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent messages is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {ForwardMessagesPostRequestFromChatId} fromChatId 
         * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages in the chat *from\\\\_chat\\\\_id* to copy. The identifiers must be specified in a strictly increasing order.
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {boolean} [disableNotification] Sends the messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent messages from forwarding and saving
         * @param {boolean} [removeCaption] Pass *True* to copy the messages without their captions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyMessagesPost(chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagesPostRequestFromChatId, messageIds: Array<number>, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, removeCaption?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<ForwardMessagesPost200Response> {
            return localVarFp.copyMessagesPost(chatId, fromChatId, messageIds, messageThreadId, disableNotification, protectContent, removeCaption, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api/#revokechatinvitelink). Returns the new invite link as [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [name] Invite link name; 0-32 characters
         * @param {number} [expireDate] Point in time (Unix timestamp) when the link will expire
         * @param {number} [memberLimit] The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
         * @param {boolean} [createsJoinRequest] *True*, if users joining the chat via the link need to be approved by chat administrators. If *True*, *member\\\\_limit* can\\\&#39;t be specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatInviteLinkPost(chatId: SendMessagePostRequestChatId, name?: string, expireDate?: number, memberLimit?: number, createsJoinRequest?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<CreateChatInviteLinkPost200Response> {
            return localVarFp.createChatInviteLinkPost(chatId, name, expireDate, memberLimit, createsJoinRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to create a [subscription invite link](https://telegram.org/blog/superchannels-star-reactions-subscriptions#star-subscriptions) for a channel chat. The bot must have the *can\\_invite\\_users* administrator rights. The link can be edited using the method [editChatSubscriptionInviteLink](https://core.telegram.org/bots/api/#editchatsubscriptioninvitelink) or revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api/#revokechatinvitelink). Returns the new invite link as a [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {CreateChatSubscriptionInviteLinkPostRequestChatId} chatId 
         * @param {number} subscriptionPeriod The number of seconds the subscription will be active for before the next payment. Currently, it must always be 2592000 (30 days).
         * @param {number} subscriptionPrice The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat; 1-10000
         * @param {string} [name] Invite link name; 0-32 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatSubscriptionInviteLinkPost(chatId: CreateChatSubscriptionInviteLinkPostRequestChatId, subscriptionPeriod: number, subscriptionPrice: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateChatInviteLinkPost200Response> {
            return localVarFp.createChatSubscriptionInviteLinkPost(chatId, subscriptionPeriod, subscriptionPrice, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns information about the created topic as a [ForumTopic](https://core.telegram.org/bots/api/#forumtopic) object.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {string} name Topic name, 1-128 characters
         * @param {CreateForumTopicPostIconColorEnum} [iconColor] Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F)
         * @param {string} [iconCustomEmojiId] Unique identifier of the custom emoji shown as the topic icon. Use [getForumTopicIconStickers](https://core.telegram.org/bots/api/#getforumtopiciconstickers) to get all allowed custom emoji identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, name: string, iconColor?: CreateForumTopicPostIconColorEnum, iconCustomEmojiId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateForumTopicPost200Response> {
            return localVarFp.createForumTopicPost(chatId, name, iconColor, iconCustomEmojiId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to create a link for an invoice. Returns the created invoice link as *String* on success.
         * @param {string} title Product name, 1-32 characters
         * @param {string} description Product description, 1-255 characters
         * @param {string} payload Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.
         * @param {string} currency Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies). Pass “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {Array<LabeledPrice>} prices Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the link will be created. For payments in [Telegram Stars](https://t.me/BotNews/90) only.
         * @param {string} [providerToken] Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an empty string for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {number} [subscriptionPeriod] The number of seconds the subscription will be active for before the next payment. The currency must be set to “XTR” (Telegram Stars) if the parameter is used. Currently, it must always be 2592000 (30 days) if specified. Any number of subscriptions can be active for a given bot at the same time, including multiple concurrent subscriptions from the same user. Subscription price must no exceed 10000 Telegram Stars.
         * @param {number} [maxTipAmount] The maximum accepted amount for tips in the *smallest units* of the currency (integer, **not** float/double). For example, for a maximum tip of &#x60;US$ 1.45&#x60; pass &#x60;max_tip_amount &#x3D; 145&#x60;. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {Array<number>} [suggestedTipAmounts] A JSON-serialized array of suggested amounts of tips in the *smallest units* of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed *max\\\\_tip\\\\_amount*.
         * @param {string} [providerData] JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
         * @param {string} [photoUrl] URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
         * @param {number} [photoSize] Photo size in bytes
         * @param {number} [photoWidth] Photo width
         * @param {number} [photoHeight] Photo height
         * @param {boolean} [needName] Pass *True* if you require the user\\\&#39;s full name to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needPhoneNumber] Pass *True* if you require the user\\\&#39;s phone number to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needEmail] Pass *True* if you require the user\\\&#39;s email address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needShippingAddress] Pass *True* if you require the user\\\&#39;s shipping address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [sendPhoneNumberToProvider] Pass *True* if the user\\\&#39;s phone number should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [sendEmailToProvider] Pass *True* if the user\\\&#39;s email address should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [isFlexible] Pass *True* if the final price depends on the shipping method. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvoiceLinkPost(title: string, description: string, payload: string, currency: string, prices: Array<LabeledPrice>, businessConnectionId?: string, providerToken?: string, subscriptionPeriod?: number, maxTipAmount?: number, suggestedTipAmounts?: Array<number>, providerData?: string, photoUrl?: string, photoSize?: number, photoWidth?: number, photoHeight?: number, needName?: boolean, needPhoneNumber?: boolean, needEmail?: boolean, needShippingAddress?: boolean, sendPhoneNumberToProvider?: boolean, sendEmailToProvider?: boolean, isFlexible?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<ExportChatInviteLinkPost200Response> {
            return localVarFp.createInvoiceLinkPost(title, description, payload, currency, prices, businessConnectionId, providerToken, subscriptionPeriod, maxTipAmount, suggestedTipAmounts, providerData, photoUrl, photoSize, photoWidth, photoHeight, needName, needPhoneNumber, needEmail, needShippingAddress, sendPhoneNumberToProvider, sendEmailToProvider, isFlexible, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns *True* on success.
         * @param {number} userId User identifier of created sticker set owner
         * @param {string} name Short name of sticker set, to be used in &#x60;t.me/addstickers/&#x60; URLs (e.g., *animals*). Can contain only English letters, digits and underscores. Must begin with a letter, can\\\&#39;t contain consecutive underscores and must end in &#x60;\\\&quot;_by_&lt;bot_username&gt;\\\&quot;&#x60;. &#x60;&lt;bot_username&gt;&#x60; is case insensitive. 1-64 characters.
         * @param {string} title Sticker set title, 1-64 characters
         * @param {Array<InputSticker>} stickers A JSON-serialized list of 1-50 initial stickers to be added to the sticker set
         * @param {CreateNewStickerSetPostStickerTypeEnum} [stickerType] Type of stickers in the set, pass “regular”, “mask”, or “custom\\\\_emoji”. By default, a regular sticker set is created.
         * @param {boolean} [needsRepainting] Pass *True* if stickers in the sticker set must be repainted to the color of text when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context; for custom emoji sticker sets only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewStickerSetPost(userId: number, name: string, title: string, stickers: Array<InputSticker>, stickerType?: CreateNewStickerSetPostStickerTypeEnum, needsRepainting?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.createNewStickerSetPost(userId, name, title, stickers, stickerType, needsRepainting, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the *can\\_invite\\_users* administrator right. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineChatJoinRequestPost(chatId: SendMessagePostRequestChatId, userId: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.declineChatJoinRequestPost(chatId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete messages on behalf of a business account. Requires the *can\\_delete\\_sent\\_messages* business bot right to delete messages sent by the bot itself, or the *can\\_delete\\_all\\_messages* business bot right to delete any message. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection on behalf of which to delete the messages
         * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages to delete. All messages must be from the same chat. See [deleteMessage](https://core.telegram.org/bots/api/#deletemessage) for limitations on which messages can be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessMessagesPost(businessConnectionId: string, messageIds: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.deleteBusinessMessagesPost(businessConnectionId, messageIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete a chat photo. Photos can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatPhotoPost(chatId: SendMessagePostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.deleteChatPhotoPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatStickerSetPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.deleteChatStickerSetPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_delete\\_messages* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.deleteForumTopicPost(chatId, messageThreadId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete a message, including service messages, with the following limitations:   \\- A message can only be deleted if it was sent less than 48 hours ago.   \\- Service messages about a supergroup, channel, or forum topic creation can\'t be deleted.   \\- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.   \\- Bots can delete outgoing messages in private chats, groups, and supergroups.   \\- Bots can delete incoming messages in private chats.   \\- Bots granted *can\\_post\\_messages* permissions can delete outgoing messages in channels.   \\- If the bot is an administrator of a group, it can delete any message there.   \\- If the bot has *can\\_delete\\_messages* permission in a supergroup or a channel, it can delete any message there.   Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} messageId Identifier of the message to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessagePost(chatId: SendMessagePostRequestChatId, messageId: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.deleteMessagePost(chatId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete multiple messages simultaneously. If some of the specified messages can\'t be found, they are skipped. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages to delete. See [deleteMessage](https://core.telegram.org/bots/api/#deletemessage) for limitations on which messages can be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessagesPost(chatId: SendMessagePostRequestChatId, messageIds: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.deleteMessagesPost(chatId, messageIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the list of the bot\'s commands for the given scope and user language. After deletion, [higher level commands](https://core.telegram.org/bots/api/#determining-list-of-commands) will be shown to affected users. Returns *True* on success.
         * @param {BotCommandScope} [scope] 
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyCommandsPost(scope?: BotCommandScope, languageCode?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.deleteMyCommandsPost(scope, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStickerFromSetPost(sticker: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.deleteStickerFromSetPost(sticker, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete a sticker set that was created by the bot. Returns *True* on success.
         * @param {string} name Sticker set name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStickerSetPost(name: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.deleteStickerSetPost(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a story previously posted by the bot on behalf of a managed business account. Requires the *can\\_manage\\_stories* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {number} storyId Unique identifier of the story to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoryPost(businessConnectionId: string, storyId: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.deleteStoryPost(businessConnectionId, storyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
         * @param {boolean} [dropPendingUpdates] Pass *True* to drop all pending updates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookPost(dropPendingUpdates?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.deleteWebhookPost(dropPendingUpdates, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} inviteLink The invite link to edit
         * @param {string} [name] Invite link name; 0-32 characters
         * @param {number} [expireDate] Point in time (Unix timestamp) when the link will expire
         * @param {number} [memberLimit] The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
         * @param {boolean} [createsJoinRequest] *True*, if users joining the chat via the link need to be approved by chat administrators. If *True*, *member\\\\_limit* can\\\&#39;t be specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editChatInviteLinkPost(chatId: SendMessagePostRequestChatId, inviteLink: string, name?: string, expireDate?: number, memberLimit?: number, createsJoinRequest?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<CreateChatInviteLinkPost200Response> {
            return localVarFp.editChatInviteLinkPost(chatId, inviteLink, name, expireDate, memberLimit, createsJoinRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to edit a subscription invite link created by the bot. The bot must have the *can\\_invite\\_users* administrator rights. Returns the edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} inviteLink The invite link to edit
         * @param {string} [name] Invite link name; 0-32 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editChatSubscriptionInviteLinkPost(chatId: SendMessagePostRequestChatId, inviteLink: string, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateChatInviteLinkPost200Response> {
            return localVarFp.editChatSubscriptionInviteLinkPost(chatId, inviteLink, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights, unless it is the creator of the topic. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {string} [name] New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept
         * @param {string} [iconCustomEmojiId] New unique identifier of the custom emoji shown as the topic icon. Use [getForumTopicIconStickers](https://core.telegram.org/bots/api/#getforumtopiciconstickers) to get all allowed custom emoji identifiers. Pass an empty string to remove the icon. If not specified, the current icon will be kept
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, name?: string, iconCustomEmojiId?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.editForumTopicPost(chatId, messageThreadId, name, iconCustomEmojiId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to edit the name of the \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {string} name New topic name, 1-128 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, name: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.editGeneralForumTopicPost(chatId, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {string} [caption] New caption of the message, 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media. Supported only for animation, photo and video messages.
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageCaptionPost(businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): AxiosPromise<EditMessageTextPost200Response> {
            return localVarFp.editMessageCaptionPost(businessConnectionId, chatId, messageId, inlineMessageId, caption, parseMode, captionEntities, showCaptionAboveMedia, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to edit live location messages. A location can be edited until its *live\\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
         * @param {number} latitude Latitude of new location
         * @param {number} longitude Longitude of new location
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {number} [livePeriod] New period in seconds during which the location can be updated, starting from the message send date. If 0x7FFFFFFF is specified, then the location can be updated forever. Otherwise, the new value must not exceed the current *live\\\\_period* by more than a day, and the live location expiration date must remain within the next 90 days. If not specified, then *live\\\\_period* remains unchanged
         * @param {number} [horizontalAccuracy] The radius of uncertainty for the location, measured in meters; 0-1500
         * @param {number} [heading] Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
         * @param {number} [proximityAlertRadius] The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageLiveLocationPost(latitude: number, longitude: number, businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, livePeriod?: number, horizontalAccuracy?: number, heading?: number, proximityAlertRadius?: number, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): AxiosPromise<EditMessageTextPost200Response> {
            return localVarFp.editMessageLiveLocationPost(latitude, longitude, businessConnectionId, chatId, messageId, inlineMessageId, livePeriod, horizontalAccuracy, heading, proximityAlertRadius, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to edit animation, audio, document, photo, or video messages, or to add media to text messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can\'t be uploaded; use a previously uploaded file via its file\\_id or specify a URL. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
         * @param {InputMedia} media 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageMediaPost(media: InputMedia, businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): AxiosPromise<EditMessageTextPost200Response> {
            return localVarFp.editMessageMediaPost(media, businessConnectionId, chatId, messageId, inlineMessageId, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageReplyMarkupPost(businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): AxiosPromise<EditMessageTextPost200Response> {
            return localVarFp.editMessageReplyMarkupPost(businessConnectionId, chatId, messageId, inlineMessageId, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
         * @param {string} text New text of the message, 1-4096 characters after entities parsing
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {string} [parseMode] Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [entities] A JSON-serialized list of special entities that appear in message text, which can be specified instead of *parse\\\\_mode*
         * @param {LinkPreviewOptions} [linkPreviewOptions] 
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageTextPost(text: string, businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, parseMode?: string, entities?: Array<MessageEntity>, linkPreviewOptions?: LinkPreviewOptions, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): AxiosPromise<EditMessageTextPost200Response> {
            return localVarFp.editMessageTextPost(text, businessConnectionId, chatId, messageId, inlineMessageId, parseMode, entities, linkPreviewOptions, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits a story previously posted by the bot on behalf of a managed business account. Requires the *can\\_manage\\_stories* business bot right. Returns [Story](https://core.telegram.org/bots/api/#story) on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {number} storyId Unique identifier of the story to edit
         * @param {InputStoryContent} content 
         * @param {string} [caption] Caption of the story, 0-2048 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the story caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {Array<StoryArea>} [areas] A JSON-serialized list of clickable areas to be shown on the story
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStoryPost(businessConnectionId: string, storyId: number, content: InputStoryContent, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, areas?: Array<StoryArea>, options?: RawAxiosRequestConfig): AxiosPromise<PostStoryPost200Response> {
            return localVarFp.editStoryPost(businessConnectionId, storyId, content, caption, parseMode, captionEntities, areas, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows the bot to cancel or re-enable extension of a subscription paid in Telegram Stars. Returns *True* on success.
         * @param {number} userId Identifier of the user whose subscription will be edited
         * @param {string} telegramPaymentChargeId Telegram payment identifier for the subscription
         * @param {boolean} isCanceled Pass *True* to cancel extension of the user subscription; the subscription must be active up to the end of the current subscription period. Pass *False* to allow the user to re-enable a subscription that was previously canceled by the bot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserStarSubscriptionPost(userId: number, telegramPaymentChargeId: string, isCanceled: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.editUserStarSubscriptionPost(userId, telegramPaymentChargeId, isCanceled, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as *String* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportChatInviteLinkPost(chatId: SendMessagePostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<ExportChatInviteLinkPost200Response> {
            return localVarFp.exportChatInviteLinkPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to forward messages of any kind. Service messages and messages with protected content can\'t be forwarded. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {ForwardMessagePostRequestFromChatId} fromChatId 
         * @param {number} messageId Message identifier in the chat specified in *from\\\\_chat\\\\_id*
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [videoStartTimestamp] New start timestamp for the forwarded video in the message
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the forwarded message from forwarding and saving
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forwardMessagePost(chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagePostRequestFromChatId, messageId: number, messageThreadId?: number, videoStartTimestamp?: number, disableNotification?: boolean, protectContent?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.forwardMessagePost(chatId, fromChatId, messageId, messageThreadId, videoStartTimestamp, disableNotification, protectContent, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to forward multiple messages of any kind. If some of the specified messages can\'t be found or forwarded, they are skipped. Service messages and messages with protected content can\'t be forwarded. Album grouping is kept for forwarded messages. On success, an array of [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent messages is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {ForwardMessagesPostRequestFromChatId} fromChatId 
         * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages in the chat *from\\\\_chat\\\\_id* to forward. The identifiers must be specified in a strictly increasing order.
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {boolean} [disableNotification] Sends the messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the forwarded messages from forwarding and saving
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forwardMessagesPost(chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagesPostRequestFromChatId, messageIds: Array<number>, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<ForwardMessagesPost200Response> {
            return localVarFp.forwardMessagesPost(chatId, fromChatId, messageIds, messageThreadId, disableNotification, protectContent, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of gifts that can be sent by the bot to users and channel chats. Requires no parameters. Returns a [Gifts](https://core.telegram.org/bots/api/#gifts) object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableGiftsPost(options?: RawAxiosRequestConfig): AxiosPromise<GetAvailableGiftsPost200Response> {
            return localVarFp.getAvailableGiftsPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the gifts received and owned by a managed business account. Requires the *can\\_view\\_gifts\\_and\\_stars* business bot right. Returns [OwnedGifts](https://core.telegram.org/bots/api/#ownedgifts) on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {boolean} [excludeUnsaved] Pass True to exclude gifts that aren\\\&#39;t saved to the account\\\&#39;s profile page
         * @param {boolean} [excludeSaved] Pass True to exclude gifts that are saved to the account\\\&#39;s profile page
         * @param {boolean} [excludeUnlimited] Pass True to exclude gifts that can be purchased an unlimited number of times
         * @param {boolean} [excludeLimited] Pass True to exclude gifts that can be purchased a limited number of times
         * @param {boolean} [excludeUnique] Pass True to exclude unique gifts
         * @param {boolean} [sortByPrice] Pass True to sort results by gift price instead of send date. Sorting is applied before pagination.
         * @param {string} [offset] Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
         * @param {number} [limit] The maximum number of gifts to be returned; 1-100. Defaults to 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessAccountGiftsPost(businessConnectionId: string, excludeUnsaved?: boolean, excludeSaved?: boolean, excludeUnlimited?: boolean, excludeLimited?: boolean, excludeUnique?: boolean, sortByPrice?: boolean, offset?: string, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetBusinessAccountGiftsPost200Response> {
            return localVarFp.getBusinessAccountGiftsPost(businessConnectionId, excludeUnsaved, excludeSaved, excludeUnlimited, excludeLimited, excludeUnique, sortByPrice, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the amount of Telegram Stars owned by a managed business account. Requires the *can\\_view\\_gifts\\_and\\_stars* business bot right. Returns [StarAmount](https://core.telegram.org/bots/api/#staramount) on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessAccountStarBalancePost(businessConnectionId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetBusinessAccountStarBalancePost200Response> {
            return localVarFp.getBusinessAccountStarBalancePost(businessConnectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get information about the connection of the bot with a business account. Returns a [BusinessConnection](https://core.telegram.org/bots/api/#businessconnection) object on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessConnectionPost(businessConnectionId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetBusinessConnectionPost200Response> {
            return localVarFp.getBusinessConnectionPost(businessConnectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get a list of administrators in a chat, which aren\'t bots. Returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatAdministratorsPost(chatId: LeaveChatPostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<GetChatAdministratorsPost200Response> {
            return localVarFp.getChatAdministratorsPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get the number of members in a chat. Returns *Int* on success.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatMemberCountPost(chatId: LeaveChatPostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<GetChatMemberCountPost200Response> {
            return localVarFp.getChatMemberCountPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatMemberPost(chatId: LeaveChatPostRequestChatId, userId: number, options?: RawAxiosRequestConfig): AxiosPromise<GetChatMemberPost200Response> {
            return localVarFp.getChatMemberPost(chatId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get the current value of the bot\'s menu button in a private chat, or the default menu button. Returns [MenuButton](https://core.telegram.org/bots/api/#menubutton) on success.
         * @param {number} [chatId] Unique identifier for the target private chat. If not specified, default bot\\\&#39;s menu button will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatMenuButtonPost(chatId?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetChatMenuButtonPost200Response> {
            return localVarFp.getChatMenuButtonPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get up-to-date information about the chat. Returns a [ChatFullInfo](https://core.telegram.org/bots/api/#chatfullinfo) object on success.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatPost(chatId: LeaveChatPostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<GetChatPost200Response> {
            return localVarFp.getChatPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of [Sticker](https://core.telegram.org/bots/api/#sticker) objects.
         * @param {Array<string>} customEmojiIds A JSON-serialized list of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomEmojiStickersPost(customEmojiIds: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<GetForumTopicIconStickersPost200Response> {
            return localVarFp.getCustomEmojiStickersPost(customEmojiIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
         * @param {string} fileId File identifier to get information about
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilePost(fileId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetFilePost200Response> {
            return localVarFp.getFilePost(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of [Sticker](https://core.telegram.org/bots/api/#sticker) objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForumTopicIconStickersPost(options?: RawAxiosRequestConfig): AxiosPromise<GetForumTopicIconStickersPost200Response> {
            return localVarFp.getForumTopicIconStickersPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.  This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and their neighbors are not among them. Please note that this behavior is subject to change.
         * @param {number} userId Target user id
         * @param {number} [chatId] Required if *inline\\\\_message\\\\_id* is not specified. Unique identifier for the target chat
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the sent message
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameHighScoresPost(userId: number, chatId?: number, messageId?: number, inlineMessageId?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetGameHighScoresPost200Response> {
            return localVarFp.getGameHighScoresPost(userId, chatId, messageId, inlineMessageId, options).then((request) => request(axios, basePath));
        },
        /**
         * A simple method for testing your bot\'s authentication token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMePost(options?: RawAxiosRequestConfig): AxiosPromise<GetMePost200Response> {
            return localVarFp.getMePost(options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get the current list of the bot\'s commands for the given scope and user language. Returns an Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) objects. If commands aren\'t set, an empty list is returned.
         * @param {BotCommandScope} [scope] 
         * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyCommandsPost(scope?: BotCommandScope, languageCode?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetMyCommandsPost200Response> {
            return localVarFp.getMyCommandsPost(scope, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get the current default administrator rights of the bot. Returns [ChatAdministratorRights](https://core.telegram.org/bots/api/#chatadministratorrights) on success.
         * @param {boolean} [forChannels] Pass *True* to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDefaultAdministratorRightsPost(forChannels?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<GetMyDefaultAdministratorRightsPost200Response> {
            return localVarFp.getMyDefaultAdministratorRightsPost(forChannels, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get the current bot description for the given user language. Returns [BotDescription](https://core.telegram.org/bots/api/#botdescription) on success.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDescriptionPost(languageCode?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetMyDescriptionPost200Response> {
            return localVarFp.getMyDescriptionPost(languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get the current bot name for the given user language. Returns [BotName](https://core.telegram.org/bots/api/#botname) on success.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyNamePost(languageCode?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetMyNamePost200Response> {
            return localVarFp.getMyNamePost(languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get the current bot short description for the given user language. Returns [BotShortDescription](https://core.telegram.org/bots/api/#botshortdescription) on success.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShortDescriptionPost(languageCode?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetMyShortDescriptionPost200Response> {
            return localVarFp.getMyShortDescriptionPost(languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the bot\'s Telegram Star transactions in chronological order. On success, returns a [StarTransactions](https://core.telegram.org/bots/api/#startransactions) object.
         * @param {number} [offset] Number of transactions to skip in the response
         * @param {number} [limit] The maximum number of transactions to be retrieved. Values between 1-100 are accepted. Defaults to 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStarTransactionsPost(offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetStarTransactionsPost200Response> {
            return localVarFp.getStarTransactionsPost(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
         * @param {string} name Name of the sticker set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStickerSetPost(name: string, options?: RawAxiosRequestConfig): AxiosPromise<GetStickerSetPost200Response> {
            return localVarFp.getStickerSetPost(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). Returns an Array of [Update](https://core.telegram.org/bots/api/#update) objects.
         * @param {number} [offset] Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\\\\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will be forgotten.
         * @param {number} [limit] Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
         * @param {number} [timeout] Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
         * @param {Array<string>} [allowedUpdates] A JSON-serialized list of the update types you want your bot to receive. For example, specify &#x60;[\\\&quot;message\\\&quot;, \\\&quot;edited_channel_post\\\&quot;, \\\&quot;callback_query\\\&quot;]&#x60; to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all update types except *chat\\\\_member*, *message\\\\_reaction*, and *message\\\\_reaction\\\\_count* (default). If not specified, the previous setting will be used.    Please note that this parameter doesn\\\&#39;t affect updates created before the call to getUpdates, so unwanted updates may be received for a short period of time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpdatesPost(offset?: number, limit?: number, timeout?: number, allowedUpdates?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<GetUpdatesPost200Response> {
            return localVarFp.getUpdatesPost(offset, limit, timeout, allowedUpdates, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat. Returns a [UserChatBoosts](https://core.telegram.org/bots/api/#userchatboosts) object.
         * @param {GetUserChatBoostsPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserChatBoostsPost(chatId: GetUserChatBoostsPostRequestChatId, userId: number, options?: RawAxiosRequestConfig): AxiosPromise<GetUserChatBoostsPost200Response> {
            return localVarFp.getUserChatBoostsPost(chatId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
         * @param {number} userId Unique identifier of the target user
         * @param {number} [offset] Sequential number of the first photo to be returned. By default, all photos are returned.
         * @param {number} [limit] Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfilePhotosPost(userId: number, offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetUserProfilePhotosPost200Response> {
            return localVarFp.getUserProfilePhotosPost(userId, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookInfoPost(options?: RawAxiosRequestConfig): AxiosPromise<GetWebhookInfoPost200Response> {
            return localVarFp.getWebhookInfoPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Gifts a Telegram Premium subscription to the given user. Returns *True* on success.
         * @param {number} userId Unique identifier of the target user who will receive a Telegram Premium subscription
         * @param {GiftPremiumSubscriptionPostMonthCountEnum} monthCount Number of months the Telegram Premium subscription will be active for the user; must be one of 3, 6, or 12
         * @param {number} starCount Number of Telegram Stars to pay for the Telegram Premium subscription; must be 1000 for 3 months, 1500 for 6 months, and 2500 for 12 months
         * @param {string} [text] Text that will be shown along with the service message about the subscription; 0-128 characters
         * @param {string} [textParseMode] Mode for parsing entities in the text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
         * @param {Array<MessageEntity>} [textEntities] A JSON-serialized list of special entities that appear in the gift text. It can be specified instead of *text\\\\_parse\\\\_mode*. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftPremiumSubscriptionPost(userId: number, monthCount: GiftPremiumSubscriptionPostMonthCountEnum, starCount: number, text?: string, textParseMode?: string, textEntities?: Array<MessageEntity>, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.giftPremiumSubscriptionPost(userId, monthCount, starCount, text, textParseMode, textEntities, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to hide the \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. The topic will be automatically closed if it was open. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hideGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.hideGeneralForumTopicPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
         * @param {LeaveChatPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveChatPost(chatId: LeaveChatPostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.leaveChatPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logOutPost(options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.logOutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the \'can\\_pin\\_messages\' administrator right in a supergroup or \'can\\_edit\\_messages\' administrator right in a channel. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} messageId Identifier of a message to pin
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be pinned
         * @param {boolean} [disableNotification] Pass *True* if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinChatMessagePost(chatId: SendMessagePostRequestChatId, messageId: number, businessConnectionId?: string, disableNotification?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.pinChatMessagePost(chatId, messageId, businessConnectionId, disableNotification, options).then((request) => request(axios, basePath));
        },
        /**
         * Posts a story on behalf of a managed business account. Requires the *can\\_manage\\_stories* business bot right. Returns [Story](https://core.telegram.org/bots/api/#story) on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {InputStoryContent} content 
         * @param {PostStoryPostActivePeriodEnum} activePeriod Period after which the story is moved to the archive, in seconds; must be one of &#x60;6 * 3600&#x60;, &#x60;12 * 3600&#x60;, &#x60;86400&#x60;, or &#x60;2 * 86400&#x60;
         * @param {string} [caption] Caption of the story, 0-2048 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the story caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {Array<StoryArea>} [areas] A JSON-serialized list of clickable areas to be shown on the story
         * @param {boolean} [postToChatPage] Pass *True* to keep the story accessible after it expires
         * @param {boolean} [protectContent] Pass *True* if the content of the story must be protected from forwarding and screenshotting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStoryPost(businessConnectionId: string, content: InputStoryContent, activePeriod: PostStoryPostActivePeriodEnum, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, areas?: Array<StoryArea>, postToChatPage?: boolean, protectContent?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<PostStoryPost200Response> {
            return localVarFp.postStoryPost(businessConnectionId, content, activePeriod, caption, parseMode, captionEntities, areas, postToChatPage, protectContent, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {boolean} [isAnonymous] Pass *True* if the administrator\\\&#39;s presence in the chat is hidden
         * @param {boolean} [canManageChat] Pass *True* if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.
         * @param {boolean} [canDeleteMessages] Pass *True* if the administrator can delete messages of other users
         * @param {boolean} [canManageVideoChats] Pass *True* if the administrator can manage video chats
         * @param {boolean} [canRestrictMembers] Pass *True* if the administrator can restrict, ban or unban chat members, or access supergroup statistics
         * @param {boolean} [canPromoteMembers] Pass *True* if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by him)
         * @param {boolean} [canChangeInfo] Pass *True* if the administrator can change chat title, photo and other settings
         * @param {boolean} [canInviteUsers] Pass *True* if the administrator can invite new users to the chat
         * @param {boolean} [canPostStories] Pass *True* if the administrator can post stories to the chat
         * @param {boolean} [canEditStories] Pass *True* if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat\\\&#39;s story archive
         * @param {boolean} [canDeleteStories] Pass *True* if the administrator can delete stories posted by other users
         * @param {boolean} [canPostMessages] Pass *True* if the administrator can post messages in the channel, or access channel statistics; for channels only
         * @param {boolean} [canEditMessages] Pass *True* if the administrator can edit messages of other users and can pin messages; for channels only
         * @param {boolean} [canPinMessages] Pass *True* if the administrator can pin messages; for supergroups only
         * @param {boolean} [canManageTopics] Pass *True* if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteChatMemberPost(chatId: SendMessagePostRequestChatId, userId: number, isAnonymous?: boolean, canManageChat?: boolean, canDeleteMessages?: boolean, canManageVideoChats?: boolean, canRestrictMembers?: boolean, canPromoteMembers?: boolean, canChangeInfo?: boolean, canInviteUsers?: boolean, canPostStories?: boolean, canEditStories?: boolean, canDeleteStories?: boolean, canPostMessages?: boolean, canEditMessages?: boolean, canPinMessages?: boolean, canManageTopics?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.promoteChatMemberPost(chatId, userId, isAnonymous, canManageChat, canDeleteMessages, canManageVideoChats, canRestrictMembers, canPromoteMembers, canChangeInfo, canInviteUsers, canPostStories, canEditStories, canDeleteStories, canPostMessages, canEditMessages, canPinMessages, canManageTopics, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks incoming message as read on behalf of a business account. Requires the *can\\_read\\_messages* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection on behalf of which to read the message
         * @param {number} chatId Unique identifier of the chat in which the message was received. The chat must have been active in the last 24 hours.
         * @param {number} messageId Unique identifier of the message to mark as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readBusinessMessagePost(businessConnectionId: string, chatId: number, messageId: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.readBusinessMessagePost(businessConnectionId, chatId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Refunds a successful payment in [Telegram Stars](https://t.me/BotNews/90). Returns *True* on success.
         * @param {number} userId Identifier of the user whose payment will be refunded
         * @param {string} telegramPaymentChargeId Telegram payment identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundStarPaymentPost(userId: number, telegramPaymentChargeId: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.refundStarPaymentPost(userId, telegramPaymentChargeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the current profile photo of a managed business account. Requires the *can\\_edit\\_profile\\_photo* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {boolean} [isPublic] Pass True to remove the public photo, which is visible even if the main photo is hidden by the business account\\\&#39;s privacy settings. After the main photo is removed, the previous profile photo (if present) becomes the main photo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBusinessAccountProfilePhotoPost(businessConnectionId: string, isPublic?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.removeBusinessAccountProfilePhotoPost(businessConnectionId, isPublic, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes verification from a chat that is currently verified [on behalf of the organization](https://telegram.org/verify#third-party-verification) represented by the bot. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeChatVerificationPost(chatId: SendMessagePostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.removeChatVerificationPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes verification from a user who is currently verified [on behalf of the organization](https://telegram.org/verify#third-party-verification) represented by the bot. Returns *True* on success.
         * @param {number} userId Unique identifier of the target user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserVerificationPost(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.removeUserVerificationPost(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights, unless it is the creator of the topic. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reopenForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.reopenForumTopicPost(chatId, messageThreadId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to reopen a closed \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. The topic will be automatically unhidden if it was hidden. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reopenGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.reopenGeneralForumTopicPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling [deleteStickerFromSet](https://core.telegram.org/bots/api/#deletestickerfromset), then [addStickerToSet](https://core.telegram.org/bots/api/#addstickertoset), then [setStickerPositionInSet](https://core.telegram.org/bots/api/#setstickerpositioninset). Returns *True* on success.
         * @param {number} userId User identifier of the sticker set owner
         * @param {string} name Sticker set name
         * @param {string} oldSticker File identifier of the replaced sticker
         * @param {InputSticker} sticker 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceStickerInSetPost(userId: number, name: string, oldSticker: string, sticker: InputSticker, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.replaceStickerInSetPost(userId, name, oldSticker, sticker, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {ChatPermissions} permissions 
         * @param {boolean} [useIndependentChatPermissions] Pass *True* if chat permissions are set independently. Otherwise, the *can\\\\_send\\\\_other\\\\_messages* and *can\\\\_add\\\\_web\\\\_page\\\\_previews* permissions will imply the *can\\\\_send\\\\_messages*, *can\\\\_send\\\\_audios*, *can\\\\_send\\\\_documents*, *can\\\\_send\\\\_photos*, *can\\\\_send\\\\_videos*, *can\\\\_send\\\\_video\\\\_notes*, and *can\\\\_send\\\\_voice\\\\_notes* permissions; the *can\\\\_send\\\\_polls* permission will imply the *can\\\\_send\\\\_messages* permission.
         * @param {number} [untilDate] Date when restrictions will be lifted for the user; Unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restrictChatMemberPost(chatId: RestrictChatMemberPostRequestChatId, userId: number, permissions: ChatPermissions, useIndependentChatPermissions?: boolean, untilDate?: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.restrictChatMemberPost(chatId, userId, permissions, useIndependentChatPermissions, untilDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
         * @param {RevokeChatInviteLinkPostRequestChatId} chatId 
         * @param {string} inviteLink The invite link to revoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeChatInviteLinkPost(chatId: RevokeChatInviteLinkPostRequestChatId, inviteLink: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateChatInviteLinkPost200Response> {
            return localVarFp.revokeChatInviteLinkPost(chatId, inviteLink, options).then((request) => request(axios, basePath));
        },
        /**
         * Stores a message that can be sent by a user of a Mini App. Returns a [PreparedInlineMessage](https://core.telegram.org/bots/api/#preparedinlinemessage) object.
         * @param {number} userId Unique identifier of the target user that can use the prepared message
         * @param {InlineQueryResult} result 
         * @param {boolean} [allowUserChats] Pass *True* if the message can be sent to private chats with users
         * @param {boolean} [allowBotChats] Pass *True* if the message can be sent to private chats with bots
         * @param {boolean} [allowGroupChats] Pass *True* if the message can be sent to group and supergroup chats
         * @param {boolean} [allowChannelChats] Pass *True* if the message can be sent to channel chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savePreparedInlineMessagePost(userId: number, result: InlineQueryResult, allowUserChats?: boolean, allowBotChats?: boolean, allowGroupChats?: boolean, allowChannelChats?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SavePreparedInlineMessagePost200Response> {
            return localVarFp.savePreparedInlineMessagePost(userId, result, allowUserChats, allowBotChats, allowGroupChats, allowChannelChats, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendAnimationPostRequestAnimation} animation 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [duration] Duration of sent animation in seconds
         * @param {number} [width] Animation width
         * @param {number} [height] Animation height
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {string} [caption] Animation caption (may also be used when resending animation by *file\\\\_id*), 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
         * @param {boolean} [hasSpoiler] Pass *True* if the animation needs to be covered with a spoiler animation
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAnimationPost(chatId: SendMessagePostRequestChatId, animation: SendAnimationPostRequestAnimation, businessConnectionId?: string, messageThreadId?: number, duration?: number, width?: number, height?: number, thumbnail?: SendAudioPostRequestThumbnail, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, hasSpoiler?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendAnimationPost(chatId, animation, businessConnectionId, messageThreadId, duration, width, height, thumbnail, caption, parseMode, captionEntities, showCaptionAboveMedia, hasSpoiler, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.  For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendAudioPostRequestAudio} audio 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [caption] Audio caption, 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {number} [duration] Duration of the audio in seconds
         * @param {string} [performer] Performer
         * @param {string} [title] Track name
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAudioPost(chatId: SendMessagePostRequestChatId, audio: SendAudioPostRequestAudio, businessConnectionId?: string, messageThreadId?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, duration?: number, performer?: string, title?: string, thumbnail?: SendAudioPostRequestThumbnail, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendAudioPost(chatId, audio, businessConnectionId, messageThreadId, caption, parseMode, captionEntities, duration, performer, title, thumbnail, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method when you need to tell the user that something is happening on the bot\'s side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.  Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\\_photo*. The user will see a “sending photo” status for the bot.  We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendChatActionPostActionEnum} action Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\\\\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\\\\_video* or *upload\\\\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\\\\_voice* or *upload\\\\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\\\\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *choose\\\\_sticker* for [stickers](https://core.telegram.org/bots/api/#sendsticker), *find\\\\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\\\\_video\\\\_note* or *upload\\\\_video\\\\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the action will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread; for supergroups only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendChatActionPost(chatId: SendMessagePostRequestChatId, action: SendChatActionPostActionEnum, businessConnectionId?: string, messageThreadId?: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.sendChatActionPost(chatId, action, businessConnectionId, messageThreadId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} phoneNumber Contact\\\&#39;s phone number
         * @param {string} firstName Contact\\\&#39;s first name
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [lastName] Contact\\\&#39;s last name
         * @param {string} [vcard] Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendContactPost(chatId: SendMessagePostRequestChatId, phoneNumber: string, firstName: string, businessConnectionId?: string, messageThreadId?: number, lastName?: string, vcard?: string, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendContactPost(chatId, phoneNumber, firstName, businessConnectionId, messageThreadId, lastName, vcard, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {SendDicePostEmojiEnum} [emoji] Emoji on which the dice throw animation is based. Currently, must be one of “🎲”, “🎯”, “🏀”, “⚽”, “🎳”, or “🎰”. Dice can have values 1-6 for “🎲”, “🎯” and “🎳”, values 1-5 for “🏀” and “⚽”, and values 1-64 for “🎰”. Defaults to “🎲”
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDicePost(chatId: SendMessagePostRequestChatId, businessConnectionId?: string, messageThreadId?: number, emoji?: SendDicePostEmojiEnum, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendDicePost(chatId, businessConnectionId, messageThreadId, emoji, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendDocumentPostRequestDocument} document 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {string} [caption] Document caption (may also be used when resending documents by *file\\\\_id*), 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [disableContentTypeDetection] Disables automatic server-side content type detection for files uploaded using multipart/form-data
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDocumentPost(chatId: SendMessagePostRequestChatId, document: SendDocumentPostRequestDocument, businessConnectionId?: string, messageThreadId?: number, thumbnail?: SendAudioPostRequestThumbnail, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, disableContentTypeDetection?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendDocumentPost(chatId, document, businessConnectionId, messageThreadId, thumbnail, caption, parseMode, captionEntities, disableContentTypeDetection, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {number} chatId Unique identifier for the target chat
         * @param {string} gameShortName Short name of the game, serves as the unique identifier for the game. Set up your games via [@BotFather](https://t.me/botfather).
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendGamePost(chatId: number, gameShortName: string, businessConnectionId?: string, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendGamePost(chatId, gameShortName, businessConnectionId, messageThreadId, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a gift to the given user or channel chat. The gift can\'t be converted to Telegram Stars by the receiver. Returns *True* on success.
         * @param {string} giftId Identifier of the gift
         * @param {number} [userId] Required if *chat\\\\_id* is not specified. Unique identifier of the target user who will receive the gift.
         * @param {SendGiftPostRequestChatId} [chatId] 
         * @param {boolean} [payForUpgrade] Pass *True* to pay for the gift upgrade from the bot\\\&#39;s balance, thereby making the upgrade free for the receiver
         * @param {string} [text] Text that will be shown along with the gift; 0-128 characters
         * @param {string} [textParseMode] Mode for parsing entities in the text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
         * @param {Array<MessageEntity>} [textEntities] A JSON-serialized list of special entities that appear in the gift text. It can be specified instead of *text\\\\_parse\\\\_mode*. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendGiftPost(giftId: string, userId?: number, chatId?: SendGiftPostRequestChatId, payForUpgrade?: boolean, text?: string, textParseMode?: string, textEntities?: Array<MessageEntity>, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.sendGiftPost(giftId, userId, chatId, payForUpgrade, text, textParseMode, textEntities, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} title Product name, 1-32 characters
         * @param {string} description Product description, 1-255 characters
         * @param {string} payload Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.
         * @param {string} currency Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies). Pass “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {Array<LabeledPrice>} prices Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [providerToken] Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an empty string for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {number} [maxTipAmount] The maximum accepted amount for tips in the *smallest units* of the currency (integer, **not** float/double). For example, for a maximum tip of &#x60;US$ 1.45&#x60; pass &#x60;max_tip_amount &#x3D; 145&#x60;. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {Array<number>} [suggestedTipAmounts] A JSON-serialized array of suggested amounts of tips in the *smallest units* of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed *max\\\\_tip\\\\_amount*.
         * @param {string} [startParameter] Unique deep-linking parameter. If left empty, **forwarded copies** of the sent message will have a *Pay* button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a *URL* button with a deep link to the bot (instead of a *Pay* button), with the value used as the start parameter
         * @param {string} [providerData] JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
         * @param {string} [photoUrl] URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
         * @param {number} [photoSize] Photo size in bytes
         * @param {number} [photoWidth] Photo width
         * @param {number} [photoHeight] Photo height
         * @param {boolean} [needName] Pass *True* if you require the user\\\&#39;s full name to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needPhoneNumber] Pass *True* if you require the user\\\&#39;s phone number to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needEmail] Pass *True* if you require the user\\\&#39;s email address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [needShippingAddress] Pass *True* if you require the user\\\&#39;s shipping address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [sendPhoneNumberToProvider] Pass *True* if the user\\\&#39;s phone number should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [sendEmailToProvider] Pass *True* if the user\\\&#39;s email address should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [isFlexible] Pass *True* if the final price depends on the shipping method. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendInvoicePost(chatId: SendMessagePostRequestChatId, title: string, description: string, payload: string, currency: string, prices: Array<LabeledPrice>, messageThreadId?: number, providerToken?: string, maxTipAmount?: number, suggestedTipAmounts?: Array<number>, startParameter?: string, providerData?: string, photoUrl?: string, photoSize?: number, photoWidth?: number, photoHeight?: number, needName?: boolean, needPhoneNumber?: boolean, needEmail?: boolean, needShippingAddress?: boolean, sendPhoneNumberToProvider?: boolean, sendEmailToProvider?: boolean, isFlexible?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendInvoicePost(chatId, title, description, payload, currency, prices, messageThreadId, providerToken, maxTipAmount, suggestedTipAmounts, startParameter, providerData, photoUrl, photoSize, photoWidth, photoHeight, needName, needPhoneNumber, needEmail, needShippingAddress, sendPhoneNumberToProvider, sendEmailToProvider, isFlexible, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} latitude Latitude of the location
         * @param {number} longitude Longitude of the location
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [horizontalAccuracy] The radius of uncertainty for the location, measured in meters; 0-1500
         * @param {number} [livePeriod] Period in seconds during which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.
         * @param {number} [heading] For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
         * @param {number} [proximityAlertRadius] For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendLocationPost(chatId: SendMessagePostRequestChatId, latitude: number, longitude: number, businessConnectionId?: string, messageThreadId?: number, horizontalAccuracy?: number, livePeriod?: number, heading?: number, proximityAlertRadius?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendLocationPost(chatId, latitude, longitude, businessConnectionId, messageThreadId, horizontalAccuracy, livePeriod, heading, proximityAlertRadius, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {Array<SendMediaGroupPostRequestMediaInner>} media A JSON-serialized array describing messages to be sent, must include 2-10 items
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {boolean} [disableNotification] Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent messages from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMediaGroupPost(chatId: SendMessagePostRequestChatId, media: Array<SendMediaGroupPostRequestMediaInner>, businessConnectionId?: string, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, options?: RawAxiosRequestConfig): AxiosPromise<SendMediaGroupPost200Response> {
            return localVarFp.sendMediaGroupPost(chatId, media, businessConnectionId, messageThreadId, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} text Text of the message to be sent, 1-4096 characters after entities parsing
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [parseMode] Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [entities] A JSON-serialized list of special entities that appear in message text, which can be specified instead of *parse\\\\_mode*
         * @param {LinkPreviewOptions} [linkPreviewOptions] 
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessagePost(chatId: SendMessagePostRequestChatId, text: string, businessConnectionId?: string, messageThreadId?: number, parseMode?: string, entities?: Array<MessageEntity>, linkPreviewOptions?: LinkPreviewOptions, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendMessagePost(chatId, text, businessConnectionId, messageThreadId, parseMode, entities, linkPreviewOptions, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send paid media. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendPaidMediaPostRequestChatId} chatId 
         * @param {number} starCount The number of Telegram Stars that must be paid to buy access to the media; 1-10000
         * @param {Array<InputPaidMedia>} media A JSON-serialized array describing the media to be sent; up to 10 items
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {string} [payload] Bot-defined paid media payload, 0-128 bytes. This will not be displayed to the user, use it for your internal processes.
         * @param {string} [caption] Media caption, 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the media caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPaidMediaPost(chatId: SendPaidMediaPostRequestChatId, starCount: number, media: Array<InputPaidMedia>, businessConnectionId?: string, payload?: string, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendPaidMediaPost(chatId, starCount, media, businessConnectionId, payload, caption, parseMode, captionEntities, showCaptionAboveMedia, disableNotification, protectContent, allowPaidBroadcast, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendPhotoPostRequestPhoto} photo 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [caption] Photo caption (may also be used when resending photos by *file\\\\_id*), 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
         * @param {boolean} [hasSpoiler] Pass *True* if the photo needs to be covered with a spoiler animation
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPhotoPost(chatId: SendMessagePostRequestChatId, photo: SendPhotoPostRequestPhoto, businessConnectionId?: string, messageThreadId?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, hasSpoiler?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendPhotoPost(chatId, photo, businessConnectionId, messageThreadId, caption, parseMode, captionEntities, showCaptionAboveMedia, hasSpoiler, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} question Poll question, 1-300 characters
         * @param {Array<InputPollOption>} _options A JSON-serialized list of 2-10 answer options
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [questionParseMode] Mode for parsing entities in the question. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Currently, only custom emoji entities are allowed
         * @param {Array<MessageEntity>} [questionEntities] A JSON-serialized list of special entities that appear in the poll question. It can be specified instead of *question\\\\_parse\\\\_mode*
         * @param {boolean} [isAnonymous] *True*, if the poll needs to be anonymous, defaults to *True*
         * @param {SendPollPostTypeEnum} [type] Poll type, “quiz” or “regular”, defaults to “regular”
         * @param {boolean} [allowsMultipleAnswers] *True*, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
         * @param {number} [correctOptionId] 0-based identifier of the correct answer option, required for polls in quiz mode
         * @param {string} [explanation] Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
         * @param {string} [explanationParseMode] Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [explanationEntities] A JSON-serialized list of special entities that appear in the poll explanation. It can be specified instead of *explanation\\\\_parse\\\\_mode*
         * @param {number} [openPeriod] Amount of time in seconds the poll will be active after creation, 5-600. Can\\\&#39;t be used together with *close\\\\_date*.
         * @param {number} [closeDate] Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can\\\&#39;t be used together with *open\\\\_period*.
         * @param {boolean} [isClosed] Pass *True* if the poll needs to be immediately closed. This can be useful for poll preview.
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPollPost(chatId: SendMessagePostRequestChatId, question: string, _options: Array<InputPollOption>, businessConnectionId?: string, messageThreadId?: number, questionParseMode?: string, questionEntities?: Array<MessageEntity>, isAnonymous?: boolean, type?: SendPollPostTypeEnum, allowsMultipleAnswers?: boolean, correctOptionId?: number, explanation?: string, explanationParseMode?: string, explanationEntities?: Array<MessageEntity>, openPeriod?: number, closeDate?: number, isClosed?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendPollPost(chatId, question, _options, businessConnectionId, messageThreadId, questionParseMode, questionEntities, isAnonymous, type, allowsMultipleAnswers, correctOptionId, explanation, explanationParseMode, explanationEntities, openPeriod, closeDate, isClosed, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS, or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendStickerPostRequestSticker} sticker 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [emoji] Emoji associated with the sticker; only for just uploaded stickers
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendStickerPost(chatId: SendMessagePostRequestChatId, sticker: SendStickerPostRequestSticker, businessConnectionId?: string, messageThreadId?: number, emoji?: string, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendStickerPost(chatId, sticker, businessConnectionId, messageThreadId, emoji, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} latitude Latitude of the venue
         * @param {number} longitude Longitude of the venue
         * @param {string} title Name of the venue
         * @param {string} address Address of the venue
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [foursquareId] Foursquare identifier of the venue
         * @param {string} [foursquareType] Foursquare type of the venue, if known. (For example, “arts\\\\_entertainment/default”, “arts\\\\_entertainment/aquarium” or “food/icecream”.)
         * @param {string} [googlePlaceId] Google Places identifier of the venue
         * @param {string} [googlePlaceType] Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVenuePost(chatId: SendMessagePostRequestChatId, latitude: number, longitude: number, title: string, address: string, businessConnectionId?: string, messageThreadId?: number, foursquareId?: string, foursquareType?: string, googlePlaceId?: string, googlePlaceType?: string, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendVenuePost(chatId, latitude, longitude, title, address, businessConnectionId, messageThreadId, foursquareId, foursquareType, googlePlaceId, googlePlaceType, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendVideoNotePostRequestVideoNote} videoNote 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [duration] Duration of sent video in seconds
         * @param {number} [length] Video width and height, i.e. diameter of the video message
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVideoNotePost(chatId: SendMessagePostRequestChatId, videoNote: SendVideoNotePostRequestVideoNote, businessConnectionId?: string, messageThreadId?: number, duration?: number, length?: number, thumbnail?: SendAudioPostRequestThumbnail, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendVideoNotePost(chatId, videoNote, businessConnectionId, messageThreadId, duration, length, thumbnail, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendVideoPostRequestVideo} video 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {number} [duration] Duration of sent video in seconds
         * @param {number} [width] Video width
         * @param {number} [height] Video height
         * @param {SendAudioPostRequestThumbnail} [thumbnail] 
         * @param {SendVideoPostRequestCover} [cover] 
         * @param {number} [startTimestamp] Start timestamp for the video in the message
         * @param {string} [caption] Video caption (may also be used when resending videos by *file\\\\_id*), 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
         * @param {boolean} [hasSpoiler] Pass *True* if the video needs to be covered with a spoiler animation
         * @param {boolean} [supportsStreaming] Pass *True* if the uploaded video is suitable for streaming
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVideoPost(chatId: SendMessagePostRequestChatId, video: SendVideoPostRequestVideo, businessConnectionId?: string, messageThreadId?: number, duration?: number, width?: number, height?: number, thumbnail?: SendAudioPostRequestThumbnail, cover?: SendVideoPostRequestCover, startTimestamp?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, hasSpoiler?: boolean, supportsStreaming?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendVideoPost(chatId, video, businessConnectionId, messageThreadId, duration, width, height, thumbnail, cover, startTimestamp, caption, parseMode, captionEntities, showCaptionAboveMedia, hasSpoiler, supportsStreaming, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS, or in .MP3 format, or in .M4A format (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {SendVoicePostRequestVoice} voice 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
         * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
         * @param {string} [caption] Voice message caption, 0-1024 characters after entities parsing
         * @param {string} [parseMode] Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
         * @param {number} [duration] Duration of the voice message in seconds
         * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
         * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
         * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
         * @param {ReplyParameters} [replyParameters] 
         * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVoicePost(chatId: SendMessagePostRequestChatId, voice: SendVoicePostRequestVoice, businessConnectionId?: string, messageThreadId?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, duration?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig): AxiosPromise<SendMessagePost200Response> {
            return localVarFp.sendVoicePost(chatId, voice, businessConnectionId, messageThreadId, caption, parseMode, captionEntities, duration, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Changes the bio of a managed business account. Requires the *can\\_change\\_bio* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} [bio] The new value of the bio for the business account; 0-140 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBusinessAccountBioPost(businessConnectionId: string, bio?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setBusinessAccountBioPost(businessConnectionId, bio, options).then((request) => request(axios, basePath));
        },
        /**
         * Changes the privacy settings pertaining to incoming gifts in a managed business account. Requires the *can\\_change\\_gift\\_settings* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {boolean} showGiftButton Pass True, if a button for sending a gift to the user or by the business account must always be shown in the input field
         * @param {AcceptedGiftTypes} acceptedGiftTypes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBusinessAccountGiftSettingsPost(businessConnectionId: string, showGiftButton: boolean, acceptedGiftTypes: AcceptedGiftTypes, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setBusinessAccountGiftSettingsPost(businessConnectionId, showGiftButton, acceptedGiftTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Changes the first and last name of a managed business account. Requires the *can\\_change\\_name* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} firstName The new value of the first name for the business account; 1-64 characters
         * @param {string} [lastName] The new value of the last name for the business account; 0-64 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBusinessAccountNamePost(businessConnectionId: string, firstName: string, lastName?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setBusinessAccountNamePost(businessConnectionId, firstName, lastName, options).then((request) => request(axios, basePath));
        },
        /**
         * Changes the profile photo of a managed business account. Requires the *can\\_edit\\_profile\\_photo* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {InputProfilePhoto} photo 
         * @param {boolean} [isPublic] Pass True to set the public photo, which will be visible even if the main photo is hidden by the business account\\\&#39;s privacy settings. An account can have only one public photo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBusinessAccountProfilePhotoPost(businessConnectionId: string, photo: InputProfilePhoto, isPublic?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setBusinessAccountProfilePhotoPost(businessConnectionId, photo, isPublic, options).then((request) => request(axios, basePath));
        },
        /**
         * Changes the username of a managed business account. Requires the *can\\_change\\_username* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} [username] The new value of the username for the business account; 0-32 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBusinessAccountUsernamePost(businessConnectionId: string, username?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setBusinessAccountUsernamePost(businessConnectionId, username, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {string} customTitle New custom title for the administrator; 0-16 characters, emoji are not allowed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatAdministratorCustomTitlePost(chatId: RestrictChatMemberPostRequestChatId, userId: number, customTitle: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setChatAdministratorCustomTitlePost(chatId, userId, customTitle, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [description] New chat description, 0-255 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatDescriptionPost(chatId: SendMessagePostRequestChatId, description?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setChatDescriptionPost(chatId, description, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to change the bot\'s menu button in a private chat, or the default menu button. Returns *True* on success.
         * @param {number} [chatId] Unique identifier for the target private chat. If not specified, default bot\\\&#39;s menu button will be changed
         * @param {MenuButton} [menuButton] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatMenuButtonPost(chatId?: number, menuButton?: MenuButton, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setChatMenuButtonPost(chatId, menuButton, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\\_restrict\\_members* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {ChatPermissions} permissions 
         * @param {boolean} [useIndependentChatPermissions] Pass *True* if chat permissions are set independently. Otherwise, the *can\\\\_send\\\\_other\\\\_messages* and *can\\\\_add\\\\_web\\\\_page\\\\_previews* permissions will imply the *can\\\\_send\\\\_messages*, *can\\\\_send\\\\_audios*, *can\\\\_send\\\\_documents*, *can\\\\_send\\\\_photos*, *can\\\\_send\\\\_videos*, *can\\\\_send\\\\_video\\\\_notes*, and *can\\\\_send\\\\_voice\\\\_notes* permissions; the *can\\\\_send\\\\_polls* permission will imply the *can\\\\_send\\\\_messages* permission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatPermissionsPost(chatId: RestrictChatMemberPostRequestChatId, permissions: ChatPermissions, useIndependentChatPermissions?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setChatPermissionsPost(chatId, permissions, useIndependentChatPermissions, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to set a new profile photo for the chat. Photos can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {any} photo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatPhotoPost(chatId: SendMessagePostRequestChatId, photo: any, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setChatPhotoPost(chatId, photo, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {string} stickerSetName Name of the sticker set to be set as the group sticker set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatStickerSetPost(chatId: RestrictChatMemberPostRequestChatId, stickerSetName: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setChatStickerSetPost(chatId, stickerSetName, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to change the title of a chat. Titles can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} title New chat title, 1-128 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChatTitlePost(chatId: SendMessagePostRequestChatId, title: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setChatTitlePost(chatId, title, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to set the thumbnail of a custom emoji sticker set. Returns *True* on success.
         * @param {string} name Sticker set name
         * @param {string} [customEmojiId] Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the thumbnail and use the first sticker as the thumbnail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCustomEmojiStickerSetThumbnailPost(name: string, customEmojiId?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setCustomEmojiStickerSetThumbnailPost(name, customEmojiId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Returns an error, if the new score is not greater than the user\'s current score in the chat and *force* is *False*.
         * @param {number} userId User identifier
         * @param {number} score New score, must be non-negative
         * @param {boolean} [force] Pass *True* if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
         * @param {boolean} [disableEditMessage] Pass *True* if the game message should not be automatically edited to include the current scoreboard
         * @param {number} [chatId] Required if *inline\\\\_message\\\\_id* is not specified. Unique identifier for the target chat
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the sent message
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGameScorePost(userId: number, score: number, force?: boolean, disableEditMessage?: boolean, chatId?: number, messageId?: number, inlineMessageId?: string, options?: RawAxiosRequestConfig): AxiosPromise<EditMessageTextPost200Response> {
            return localVarFp.setGameScorePost(userId, score, force, disableEditMessage, chatId, messageId, inlineMessageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to change the chosen reactions on a message. Service messages of some types can\'t be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. Bots can\'t use paid reactions. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} messageId Identifier of the target message. If the message belongs to a media group, the reaction is set to the first non-deleted message in the group instead.
         * @param {Array<ReactionType>} [reaction] A JSON-serialized list of reaction types to set on the message. Currently, as non-premium users, bots can set up to one reaction per message. A custom emoji reaction can be used if it is either already present on the message or explicitly allowed by chat administrators. Paid reactions can\\\&#39;t be used by bots.
         * @param {boolean} [isBig] Pass *True* to set the reaction with a big animation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMessageReactionPost(chatId: SendMessagePostRequestChatId, messageId: number, reaction?: Array<ReactionType>, isBig?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setMessageReactionPost(chatId, messageId, reaction, isBig, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to change the list of the bot\'s commands. See [this manual](https://core.telegram.org/bots/features#commands) for more details about bot commands. Returns *True* on success.
         * @param {Array<BotCommand>} commands A JSON-serialized list of bot commands to be set as the list of the bot\\\&#39;s commands. At most 100 commands can be specified.
         * @param {BotCommandScope} [scope] 
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMyCommandsPost(commands: Array<BotCommand>, scope?: BotCommandScope, languageCode?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setMyCommandsPost(commands, scope, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to change the default administrator rights requested by the bot when it\'s added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns *True* on success.
         * @param {ChatAdministratorRights} [rights] 
         * @param {boolean} [forChannels] Pass *True* to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMyDefaultAdministratorRightsPost(rights?: ChatAdministratorRights, forChannels?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setMyDefaultAdministratorRightsPost(rights, forChannels, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to change the bot\'s description, which is shown in the chat with the bot if the chat is empty. Returns *True* on success.
         * @param {string} [description] New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for whose language there is no dedicated description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMyDescriptionPost(description?: string, languageCode?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setMyDescriptionPost(description, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to change the bot\'s name. Returns *True* on success.
         * @param {string} [name] New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language there is no dedicated name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMyNamePost(name?: string, languageCode?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setMyNamePost(name, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to change the bot\'s short description, which is shown on the bot\'s profile page and is sent together with the link when users share the bot. Returns *True* on success.
         * @param {string} [shortDescription] New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language.
         * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMyShortDescriptionPost(shortDescription?: string, languageCode?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setMyShortDescriptionPost(shortDescription, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.  Use this if the data submitted by the user doesn\'t satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
         * @param {number} userId User identifier
         * @param {Array<PassportElementError>} errors A JSON-serialized array describing the errors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPassportDataErrorsPost(userId: number, errors: Array<PassportElementError>, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setPassportDataErrorsPost(userId, errors, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {Array<string>} emojiList A JSON-serialized list of 1-20 emoji associated with the sticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStickerEmojiListPost(sticker: string, emojiList: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setStickerEmojiListPost(sticker, emojiList, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {Array<string>} [keywords] A JSON-serialized list of 0-20 search keywords for the sticker with total length of up to 64 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStickerKeywordsPost(sticker: string, keywords?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setStickerKeywordsPost(sticker, keywords, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to change the [mask position](https://core.telegram.org/bots/api/#maskposition) of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {MaskPosition} [maskPosition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStickerMaskPositionPost(sticker: string, maskPosition?: MaskPosition, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setStickerMaskPositionPost(sticker, maskPosition, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
         * @param {string} sticker File identifier of the sticker
         * @param {number} position New sticker position in the set, zero-based
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStickerPositionInSetPost(sticker: string, position: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setStickerPositionInSetPost(sticker, position, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns *True* on success.
         * @param {string} name Sticker set name
         * @param {number} userId User identifier of the sticker set owner
         * @param {SetStickerSetThumbnailPostFormatEnum} format Format of the thumbnail, must be one of “static” for a **.WEBP** or **.PNG** image, “animated” for a **.TGS** animation, or “video” for a **.WEBM** video
         * @param {SetStickerSetThumbnailPostRequestThumbnail} [thumbnail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStickerSetThumbnailPost(name: string, userId: number, format: SetStickerSetThumbnailPostFormatEnum, thumbnail?: SetStickerSetThumbnailPostRequestThumbnail, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setStickerSetThumbnailPost(name, userId, format, thumbnail, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to set the title of a created sticker set. Returns *True* on success.
         * @param {string} name Sticker set name
         * @param {string} title Sticker set title, 1-64 characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStickerSetTitlePost(name: string, title: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setStickerSetTitlePost(name, title, options).then((request) => request(axios, basePath));
        },
        /**
         * Changes the emoji status for a given user that previously allowed the bot to manage their emoji status via the Mini App method [requestEmojiStatusAccess](https://core.telegram.org/bots/webapps#initializing-mini-apps). Returns *True* on success.
         * @param {number} userId Unique identifier of the target user
         * @param {string} [emojiStatusCustomEmojiId] Custom emoji identifier of the emoji status to set. Pass an empty string to remove the status.
         * @param {number} [emojiStatusExpirationDate] Expiration date of the emoji status, if any
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserEmojiStatusPost(userId: number, emojiStatusCustomEmojiId?: string, emojiStatusExpirationDate?: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setUserEmojiStatusPost(userId, emojiStatusCustomEmojiId, emojiStatusExpirationDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request (a request with response [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) different from `2XY`), we will repeat the request and give up after a reasonable amount of attempts. Returns *True* on success.  If you\'d like to make sure that the webhook was set by you, you can specify secret data in the parameter *secret\\_token*. If specified, the request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the secret token as content.
         * @param {string} url HTTPS URL to send updates to. Use an empty string to remove webhook integration
         * @param {any} [certificate] 
         * @param {string} [ipAddress] The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS
         * @param {number} [maxConnections] The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on your bot\\\&#39;s server, and higher values to increase your bot\\\&#39;s throughput.
         * @param {Array<string>} [allowedUpdates] A JSON-serialized list of the update types you want your bot to receive. For example, specify &#x60;[\\\&quot;message\\\&quot;, \\\&quot;edited_channel_post\\\&quot;, \\\&quot;callback_query\\\&quot;]&#x60; to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all update types except *chat\\\\_member*, *message\\\\_reaction*, and *message\\\\_reaction\\\\_count* (default). If not specified, the previous setting will be used.   Please note that this parameter doesn\\\&#39;t affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.
         * @param {boolean} [dropPendingUpdates] Pass *True* to drop all pending updates
         * @param {string} [secretToken] A secret token to be sent in a header “X-Telegram-Bot-Api-Secret-Token” in every webhook request, 1-256 characters. Only characters &#x60;A-Z&#x60;, &#x60;a-z&#x60;, &#x60;0-9&#x60;, &#x60;_&#x60; and &#x60;-&#x60; are allowed. The header is useful to ensure that the request comes from a webhook set by you.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWebhookPost(url: string, certificate?: any, ipAddress?: string, maxConnections?: number, allowedUpdates?: Array<string>, dropPendingUpdates?: boolean, secretToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.setWebhookPost(url, certificate, ipAddress, maxConnections, allowedUpdates, dropPendingUpdates, secretToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to stop updating a live location message before *live\\_period* expires. On success, if the message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {EditMessageTextPostRequestChatId} [chatId] 
         * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message with live location to stop
         * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopMessageLiveLocationPost(businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): AxiosPromise<EditMessageTextPost200Response> {
            return localVarFp.stopMessageLiveLocationPost(businessConnectionId, chatId, messageId, inlineMessageId, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) is returned.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} messageId Identifier of the original message with the poll
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
         * @param {InlineKeyboardMarkup} [replyMarkup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopPollPost(chatId: SendMessagePostRequestChatId, messageId: number, businessConnectionId?: string, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig): AxiosPromise<StopPollPost200Response> {
            return localVarFp.stopPollPost(chatId, messageId, businessConnectionId, replyMarkup, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfers Telegram Stars from the business account balance to the bot\'s balance. Requires the *can\\_transfer\\_stars* business bot right. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {number} starCount Number of Telegram Stars to transfer; 1-10000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBusinessAccountStarsPost(businessConnectionId: string, starCount: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.transferBusinessAccountStarsPost(businessConnectionId, starCount, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfers an owned unique gift to another user. Requires the *can\\_transfer\\_and\\_upgrade\\_gifts* business bot right. Requires *can\\_transfer\\_stars* business bot right if the transfer is paid. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} ownedGiftId Unique identifier of the regular gift that should be transferred
         * @param {number} newOwnerChatId Unique identifier of the chat which will own the gift. The chat must be active in the last 24 hours.
         * @param {number} [starCount] The amount of Telegram Stars that will be paid for the transfer from the business account balance. If positive, then the *can\\\\_transfer\\\\_stars* business bot right is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferGiftPost(businessConnectionId: string, ownedGiftId: string, newOwnerChatId: number, starCount?: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.transferGiftPost(businessConnectionId, ownedGiftId, newOwnerChatId, starCount, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to unban a previously banned user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don\'t want this, use the parameter *only\\_if\\_banned*. Returns *True* on success.
         * @param {BanChatMemberPostRequestChatId} chatId 
         * @param {number} userId Unique identifier of the target user
         * @param {boolean} [onlyIfBanned] Do nothing if the user is not banned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbanChatMemberPost(chatId: BanChatMemberPostRequestChatId, userId: number, onlyIfBanned?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.unbanChatMemberPost(chatId, userId, onlyIfBanned, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {number} senderChatId Unique identifier of the target sender chat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbanChatSenderChatPost(chatId: SendMessagePostRequestChatId, senderChatId: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.unbanChatSenderChatPost(chatId, senderChatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to unhide the \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unhideGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.unhideGeneralForumTopicPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the \'can\\_pin\\_messages\' administrator right in a supergroup or \'can\\_edit\\_messages\' administrator right in a channel. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpinAllChatMessagesPost(chatId: SendMessagePostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.unpinAllChatMessagesPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the *can\\_pin\\_messages* administrator right in the supergroup. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpinAllForumTopicMessagesPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.unpinAllForumTopicMessagesPost(chatId, messageThreadId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the *can\\_pin\\_messages* administrator right in the supergroup. Returns *True* on success.
         * @param {RestrictChatMemberPostRequestChatId} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpinAllGeneralForumTopicMessagesPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.unpinAllGeneralForumTopicMessagesPost(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the \'can\\_pin\\_messages\' administrator right in a supergroup or \'can\\_edit\\_messages\' administrator right in a channel. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be unpinned
         * @param {number} [messageId] Identifier of the message to unpin. Required if *business\\\\_connection\\\\_id* is specified. If not specified, the most recent pinned message (by sending date) will be unpinned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpinChatMessagePost(chatId: SendMessagePostRequestChatId, businessConnectionId?: string, messageId?: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.unpinChatMessagePost(chatId, businessConnectionId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Upgrades a given regular gift to a unique gift. Requires the *can\\_transfer\\_and\\_upgrade\\_gifts* business bot right. Additionally requires the *can\\_transfer\\_stars* business bot right if the upgrade is paid. Returns *True* on success.
         * @param {string} businessConnectionId Unique identifier of the business connection
         * @param {string} ownedGiftId Unique identifier of the regular gift that should be upgraded to a unique one
         * @param {boolean} [keepOriginalDetails] Pass True to keep the original gift text, sender and receiver in the upgraded gift
         * @param {number} [starCount] The amount of Telegram Stars that will be paid for the upgrade from the business account balance. If &#x60;gift.prepaid_upgrade_star_count &gt; 0&#x60;, then pass 0, otherwise, the *can\\\\_transfer\\\\_stars* business bot right is required and &#x60;gift.upgrade_star_count&#x60; must be passed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradeGiftPost(businessConnectionId: string, ownedGiftId: string, keepOriginalDetails?: boolean, starCount?: number, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.upgradeGiftPost(businessConnectionId, ownedGiftId, keepOriginalDetails, starCount, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to upload a file with a sticker for later use in the [createNewStickerSet](https://core.telegram.org/bots/api/#createnewstickerset), [addStickerToSet](https://core.telegram.org/bots/api/#addstickertoset), or [replaceStickerInSet](https://core.telegram.org/bots/api/#replacestickerinset) methods (the file can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
         * @param {number} userId User identifier of sticker file owner
         * @param {any} sticker 
         * @param {UploadStickerFilePostStickerFormatEnum} stickerFormat Format of the sticker, must be one of “static”, “animated”, “video”
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadStickerFilePost(userId: number, sticker: any, stickerFormat: UploadStickerFilePostStickerFormatEnum, options?: RawAxiosRequestConfig): AxiosPromise<GetFilePost200Response> {
            return localVarFp.uploadStickerFilePost(userId, sticker, stickerFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies a chat [on behalf of the organization](https://telegram.org/verify#third-party-verification) which is represented by the bot. Returns *True* on success.
         * @param {SendMessagePostRequestChatId} chatId 
         * @param {string} [customDescription] Custom description for the verification; 0-70 characters. Must be empty if the organization isn\\\&#39;t allowed to provide a custom verification description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyChatPost(chatId: SendMessagePostRequestChatId, customDescription?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.verifyChatPost(chatId, customDescription, options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies a user [on behalf of the organization](https://telegram.org/verify#third-party-verification) which is represented by the bot. Returns *True* on success.
         * @param {number} userId Unique identifier of the target user
         * @param {string} [customDescription] Custom description for the verification; 0-70 characters. Must be empty if the organization isn\\\&#39;t allowed to provide a custom verification description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserPost(userId: number, customDescription?: string, options?: RawAxiosRequestConfig): AxiosPromise<SetWebhookPost200Response> {
            return localVarFp.verifyUserPost(userId, customDescription, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers. Returns *True* on success.
     * @param {number} userId User identifier of sticker set owner
     * @param {string} name Sticker set name
     * @param {InputSticker} sticker 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addStickerToSetPost(userId: number, name: string, sticker: InputSticker, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addStickerToSetPost(userId, name, sticker, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send answers to callback queries sent from [inline keyboards](https://core.telegram.org/bots/features#inline-keyboards). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.  Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@BotFather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
     * @param {string} callbackQueryId Unique identifier for the query to be answered
     * @param {string} [text] Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
     * @param {boolean} [showAlert] If *True*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
     * @param {string} [url] URL that will be opened by the user\\\&#39;s client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@BotFather](https://t.me/botfather), specify the URL that opens your game - note that this will only work if the query comes from a [*callback\\\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.    Otherwise, you may use links like &#x60;t.me/your_bot?start&#x3D;XXXX&#x60; that open your bot with a parameter.
     * @param {number} [cacheTime] The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public answerCallbackQueryPost(callbackQueryId: string, text?: string, showAlert?: boolean, url?: string, cacheTime?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).answerCallbackQueryPost(callbackQueryId, text, showAlert, url, cacheTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send answers to an inline query. On success, *True* is returned.   No more than **50** results per query are allowed.
     * @param {string} inlineQueryId Unique identifier for the answered query
     * @param {Array<InlineQueryResult>} results A JSON-serialized array of results for the inline query
     * @param {number} [cacheTime] The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
     * @param {boolean} [isPersonal] Pass *True* if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query.
     * @param {string} [nextOffset] Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don\\\&#39;t support pagination. Offset length can\\\&#39;t exceed 64 bytes.
     * @param {InlineQueryResultsButton} [button] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public answerInlineQueryPost(inlineQueryId: string, results: Array<InlineQueryResult>, cacheTime?: number, isPersonal?: boolean, nextOffset?: string, button?: InlineQueryResultsButton, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).answerInlineQueryPost(inlineQueryId, results, cacheTime, isPersonal, nextOffset, button, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\\_checkout\\_query*. Use this method to respond to such pre-checkout queries. On success, *True* is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
     * @param {string} preCheckoutQueryId Unique identifier for the query to be answered
     * @param {boolean} ok Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
     * @param {string} [errorMessage] Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \\\&quot;Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\\\&quot;). Telegram will display this message to the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public answerPreCheckoutQueryPost(preCheckoutQueryId: string, ok: boolean, errorMessage?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).answerPreCheckoutQueryPost(preCheckoutQueryId, ok, errorMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * If you sent an invoice requesting a shipping address and the parameter *is\\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\\_query* field to the bot. Use this method to reply to shipping queries. On success, *True* is returned.
     * @param {string} shippingQueryId Unique identifier for the query to be answered
     * @param {boolean} ok Pass *True* if delivery to the specified address is possible and *False* if there are any problems (for example, if delivery to the specified address is not possible)
     * @param {Array<ShippingOption>} [shippingOptions] Required if *ok* is *True*. A JSON-serialized array of available shipping options.
     * @param {string} [errorMessage] Required if *ok* is *False*. Error message in human readable form that explains why it is impossible to complete the order (e.g. “Sorry, delivery to your desired address is unavailable”). Telegram will display this message to the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public answerShippingQueryPost(shippingQueryId: string, ok: boolean, shippingOptions?: Array<ShippingOption>, errorMessage?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).answerShippingQueryPost(shippingQueryId, ok, shippingOptions, errorMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to set the result of an interaction with a [Web App](https://core.telegram.org/bots/webapps) and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a [SentWebAppMessage](https://core.telegram.org/bots/api/#sentwebappmessage) object is returned.
     * @param {string} webAppQueryId Unique identifier for the query to be answered
     * @param {InlineQueryResult} result 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public answerWebAppQueryPost(webAppQueryId: string, result: InlineQueryResult, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).answerWebAppQueryPost(webAppQueryId, result, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the *can\\_invite\\_users* administrator right. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {number} userId Unique identifier of the target user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public approveChatJoinRequestPost(chatId: SendMessagePostRequestChatId, userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).approveChatJoinRequestPost(chatId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
     * @param {BanChatMemberPostRequestChatId} chatId 
     * @param {number} userId Unique identifier of the target user
     * @param {number} [untilDate] Date when the user will be unbanned; Unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only.
     * @param {boolean} [revokeMessages] Pass *True* to delete all messages from the chat for the user that is being removed. If *False*, the user will be able to see messages in the group that were sent before the user was removed. Always *True* for supergroups and channels.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public banChatMemberPost(chatId: BanChatMemberPostRequestChatId, userId: number, untilDate?: number, revokeMessages?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).banChatMemberPost(chatId, userId, untilDate, revokeMessages, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to ban a channel chat in a supergroup or a channel. Until the chat is [unbanned](https://core.telegram.org/bots/api/#unbanchatsenderchat), the owner of the banned chat won\'t be able to send messages on behalf of **any of their channels**. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {number} senderChatId Unique identifier of the target sender chat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public banChatSenderChatPost(chatId: SendMessagePostRequestChatId, senderChatId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).banChatSenderChatPost(chatId, senderChatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights, unless it is the creator of the topic. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public closeForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).closeForumTopicPost(chatId, messageThreadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to close an open \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public closeGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).closeGeneralForumTopicPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn\'t launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public closePost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).closePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Converts a given regular gift to Telegram Stars. Requires the *can\\_convert\\_gifts\\_to\\_stars* business bot right. Returns *True* on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {string} ownedGiftId Unique identifier of the regular gift that should be converted to Telegram Stars
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public convertGiftToStarsPost(businessConnectionId: string, ownedGiftId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).convertGiftToStarsPost(businessConnectionId, ownedGiftId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to copy messages of any kind. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can\'t be copied. A quiz [poll](https://core.telegram.org/bots/api/#poll) can be copied only if the value of the field *correct\\_option\\_id* is known to the bot. The method is analogous to the method [forwardMessage](https://core.telegram.org/bots/api/#forwardmessage), but the copied message doesn\'t have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {ForwardMessagePostRequestFromChatId} fromChatId 
     * @param {number} messageId Message identifier in the chat specified in *from\\\\_chat\\\\_id*
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {number} [videoStartTimestamp] New start timestamp for the copied video in the message
     * @param {string} [caption] New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
     * @param {string} [parseMode] Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the new caption, which can be specified instead of *parse\\\\_mode*
     * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media. Ignored if a new caption isn\\\&#39;t specified.
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public copyMessagePost(chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagePostRequestFromChatId, messageId: number, messageThreadId?: number, videoStartTimestamp?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).copyMessagePost(chatId, fromChatId, messageId, messageThreadId, videoStartTimestamp, caption, parseMode, captionEntities, showCaptionAboveMedia, disableNotification, protectContent, allowPaidBroadcast, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to copy messages of any kind. If some of the specified messages can\'t be found or copied, they are skipped. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can\'t be copied. A quiz [poll](https://core.telegram.org/bots/api/#poll) can be copied only if the value of the field *correct\\_option\\_id* is known to the bot. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied messages don\'t have a link to the original message. Album grouping is kept for copied messages. On success, an array of [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent messages is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {ForwardMessagesPostRequestFromChatId} fromChatId 
     * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages in the chat *from\\\\_chat\\\\_id* to copy. The identifiers must be specified in a strictly increasing order.
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {boolean} [disableNotification] Sends the messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent messages from forwarding and saving
     * @param {boolean} [removeCaption] Pass *True* to copy the messages without their captions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public copyMessagesPost(chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagesPostRequestFromChatId, messageIds: Array<number>, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, removeCaption?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).copyMessagesPost(chatId, fromChatId, messageIds, messageThreadId, disableNotification, protectContent, removeCaption, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api/#revokechatinvitelink). Returns the new invite link as [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {string} [name] Invite link name; 0-32 characters
     * @param {number} [expireDate] Point in time (Unix timestamp) when the link will expire
     * @param {number} [memberLimit] The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
     * @param {boolean} [createsJoinRequest] *True*, if users joining the chat via the link need to be approved by chat administrators. If *True*, *member\\\\_limit* can\\\&#39;t be specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createChatInviteLinkPost(chatId: SendMessagePostRequestChatId, name?: string, expireDate?: number, memberLimit?: number, createsJoinRequest?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createChatInviteLinkPost(chatId, name, expireDate, memberLimit, createsJoinRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to create a [subscription invite link](https://telegram.org/blog/superchannels-star-reactions-subscriptions#star-subscriptions) for a channel chat. The bot must have the *can\\_invite\\_users* administrator rights. The link can be edited using the method [editChatSubscriptionInviteLink](https://core.telegram.org/bots/api/#editchatsubscriptioninvitelink) or revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api/#revokechatinvitelink). Returns the new invite link as a [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
     * @param {CreateChatSubscriptionInviteLinkPostRequestChatId} chatId 
     * @param {number} subscriptionPeriod The number of seconds the subscription will be active for before the next payment. Currently, it must always be 2592000 (30 days).
     * @param {number} subscriptionPrice The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat; 1-10000
     * @param {string} [name] Invite link name; 0-32 characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createChatSubscriptionInviteLinkPost(chatId: CreateChatSubscriptionInviteLinkPostRequestChatId, subscriptionPeriod: number, subscriptionPrice: number, name?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createChatSubscriptionInviteLinkPost(chatId, subscriptionPeriod, subscriptionPrice, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns information about the created topic as a [ForumTopic](https://core.telegram.org/bots/api/#forumtopic) object.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {string} name Topic name, 1-128 characters
     * @param {CreateForumTopicPostIconColorEnum} [iconColor] Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F)
     * @param {string} [iconCustomEmojiId] Unique identifier of the custom emoji shown as the topic icon. Use [getForumTopicIconStickers](https://core.telegram.org/bots/api/#getforumtopiciconstickers) to get all allowed custom emoji identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, name: string, iconColor?: CreateForumTopicPostIconColorEnum, iconCustomEmojiId?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createForumTopicPost(chatId, name, iconColor, iconCustomEmojiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to create a link for an invoice. Returns the created invoice link as *String* on success.
     * @param {string} title Product name, 1-32 characters
     * @param {string} description Product description, 1-255 characters
     * @param {string} payload Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.
     * @param {string} currency Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies). Pass “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {Array<LabeledPrice>} prices Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the link will be created. For payments in [Telegram Stars](https://t.me/BotNews/90) only.
     * @param {string} [providerToken] Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an empty string for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {number} [subscriptionPeriod] The number of seconds the subscription will be active for before the next payment. The currency must be set to “XTR” (Telegram Stars) if the parameter is used. Currently, it must always be 2592000 (30 days) if specified. Any number of subscriptions can be active for a given bot at the same time, including multiple concurrent subscriptions from the same user. Subscription price must no exceed 10000 Telegram Stars.
     * @param {number} [maxTipAmount] The maximum accepted amount for tips in the *smallest units* of the currency (integer, **not** float/double). For example, for a maximum tip of &#x60;US$ 1.45&#x60; pass &#x60;max_tip_amount &#x3D; 145&#x60;. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {Array<number>} [suggestedTipAmounts] A JSON-serialized array of suggested amounts of tips in the *smallest units* of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed *max\\\\_tip\\\\_amount*.
     * @param {string} [providerData] JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
     * @param {string} [photoUrl] URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
     * @param {number} [photoSize] Photo size in bytes
     * @param {number} [photoWidth] Photo width
     * @param {number} [photoHeight] Photo height
     * @param {boolean} [needName] Pass *True* if you require the user\\\&#39;s full name to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {boolean} [needPhoneNumber] Pass *True* if you require the user\\\&#39;s phone number to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {boolean} [needEmail] Pass *True* if you require the user\\\&#39;s email address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {boolean} [needShippingAddress] Pass *True* if you require the user\\\&#39;s shipping address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {boolean} [sendPhoneNumberToProvider] Pass *True* if the user\\\&#39;s phone number should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {boolean} [sendEmailToProvider] Pass *True* if the user\\\&#39;s email address should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {boolean} [isFlexible] Pass *True* if the final price depends on the shipping method. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createInvoiceLinkPost(title: string, description: string, payload: string, currency: string, prices: Array<LabeledPrice>, businessConnectionId?: string, providerToken?: string, subscriptionPeriod?: number, maxTipAmount?: number, suggestedTipAmounts?: Array<number>, providerData?: string, photoUrl?: string, photoSize?: number, photoWidth?: number, photoHeight?: number, needName?: boolean, needPhoneNumber?: boolean, needEmail?: boolean, needShippingAddress?: boolean, sendPhoneNumberToProvider?: boolean, sendEmailToProvider?: boolean, isFlexible?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createInvoiceLinkPost(title, description, payload, currency, prices, businessConnectionId, providerToken, subscriptionPeriod, maxTipAmount, suggestedTipAmounts, providerData, photoUrl, photoSize, photoWidth, photoHeight, needName, needPhoneNumber, needEmail, needShippingAddress, sendPhoneNumberToProvider, sendEmailToProvider, isFlexible, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns *True* on success.
     * @param {number} userId User identifier of created sticker set owner
     * @param {string} name Short name of sticker set, to be used in &#x60;t.me/addstickers/&#x60; URLs (e.g., *animals*). Can contain only English letters, digits and underscores. Must begin with a letter, can\\\&#39;t contain consecutive underscores and must end in &#x60;\\\&quot;_by_&lt;bot_username&gt;\\\&quot;&#x60;. &#x60;&lt;bot_username&gt;&#x60; is case insensitive. 1-64 characters.
     * @param {string} title Sticker set title, 1-64 characters
     * @param {Array<InputSticker>} stickers A JSON-serialized list of 1-50 initial stickers to be added to the sticker set
     * @param {CreateNewStickerSetPostStickerTypeEnum} [stickerType] Type of stickers in the set, pass “regular”, “mask”, or “custom\\\\_emoji”. By default, a regular sticker set is created.
     * @param {boolean} [needsRepainting] Pass *True* if stickers in the sticker set must be repainted to the color of text when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context; for custom emoji sticker sets only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createNewStickerSetPost(userId: number, name: string, title: string, stickers: Array<InputSticker>, stickerType?: CreateNewStickerSetPostStickerTypeEnum, needsRepainting?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createNewStickerSetPost(userId, name, title, stickers, stickerType, needsRepainting, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the *can\\_invite\\_users* administrator right. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {number} userId Unique identifier of the target user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public declineChatJoinRequestPost(chatId: SendMessagePostRequestChatId, userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).declineChatJoinRequestPost(chatId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete messages on behalf of a business account. Requires the *can\\_delete\\_sent\\_messages* business bot right to delete messages sent by the bot itself, or the *can\\_delete\\_all\\_messages* business bot right to delete any message. Returns *True* on success.
     * @param {string} businessConnectionId Unique identifier of the business connection on behalf of which to delete the messages
     * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages to delete. All messages must be from the same chat. See [deleteMessage](https://core.telegram.org/bots/api/#deletemessage) for limitations on which messages can be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteBusinessMessagesPost(businessConnectionId: string, messageIds: Array<number>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteBusinessMessagesPost(businessConnectionId, messageIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete a chat photo. Photos can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteChatPhotoPost(chatId: SendMessagePostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteChatPhotoPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteChatStickerSetPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteChatStickerSetPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_delete\\_messages* administrator rights. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteForumTopicPost(chatId, messageThreadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete a message, including service messages, with the following limitations:   \\- A message can only be deleted if it was sent less than 48 hours ago.   \\- Service messages about a supergroup, channel, or forum topic creation can\'t be deleted.   \\- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.   \\- Bots can delete outgoing messages in private chats, groups, and supergroups.   \\- Bots can delete incoming messages in private chats.   \\- Bots granted *can\\_post\\_messages* permissions can delete outgoing messages in channels.   \\- If the bot is an administrator of a group, it can delete any message there.   \\- If the bot has *can\\_delete\\_messages* permission in a supergroup or a channel, it can delete any message there.   Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {number} messageId Identifier of the message to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMessagePost(chatId: SendMessagePostRequestChatId, messageId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMessagePost(chatId, messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete multiple messages simultaneously. If some of the specified messages can\'t be found, they are skipped. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages to delete. See [deleteMessage](https://core.telegram.org/bots/api/#deletemessage) for limitations on which messages can be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMessagesPost(chatId: SendMessagePostRequestChatId, messageIds: Array<number>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMessagesPost(chatId, messageIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the list of the bot\'s commands for the given scope and user language. After deletion, [higher level commands](https://core.telegram.org/bots/api/#determining-list-of-commands) will be shown to affected users. Returns *True* on success.
     * @param {BotCommandScope} [scope] 
     * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMyCommandsPost(scope?: BotCommandScope, languageCode?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMyCommandsPost(scope, languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
     * @param {string} sticker File identifier of the sticker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteStickerFromSetPost(sticker: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteStickerFromSetPost(sticker, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete a sticker set that was created by the bot. Returns *True* on success.
     * @param {string} name Sticker set name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteStickerSetPost(name: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteStickerSetPost(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a story previously posted by the bot on behalf of a managed business account. Requires the *can\\_manage\\_stories* business bot right. Returns *True* on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {number} storyId Unique identifier of the story to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteStoryPost(businessConnectionId: string, storyId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteStoryPost(businessConnectionId, storyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
     * @param {boolean} [dropPendingUpdates] Pass *True* to drop all pending updates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWebhookPost(dropPendingUpdates?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteWebhookPost(dropPendingUpdates, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {string} inviteLink The invite link to edit
     * @param {string} [name] Invite link name; 0-32 characters
     * @param {number} [expireDate] Point in time (Unix timestamp) when the link will expire
     * @param {number} [memberLimit] The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
     * @param {boolean} [createsJoinRequest] *True*, if users joining the chat via the link need to be approved by chat administrators. If *True*, *member\\\\_limit* can\\\&#39;t be specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editChatInviteLinkPost(chatId: SendMessagePostRequestChatId, inviteLink: string, name?: string, expireDate?: number, memberLimit?: number, createsJoinRequest?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editChatInviteLinkPost(chatId, inviteLink, name, expireDate, memberLimit, createsJoinRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to edit a subscription invite link created by the bot. The bot must have the *can\\_invite\\_users* administrator rights. Returns the edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {string} inviteLink The invite link to edit
     * @param {string} [name] Invite link name; 0-32 characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editChatSubscriptionInviteLinkPost(chatId: SendMessagePostRequestChatId, inviteLink: string, name?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editChatSubscriptionInviteLinkPost(chatId, inviteLink, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights, unless it is the creator of the topic. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
     * @param {string} [name] New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept
     * @param {string} [iconCustomEmojiId] New unique identifier of the custom emoji shown as the topic icon. Use [getForumTopicIconStickers](https://core.telegram.org/bots/api/#getforumtopiciconstickers) to get all allowed custom emoji identifiers. Pass an empty string to remove the icon. If not specified, the current icon will be kept
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, name?: string, iconCustomEmojiId?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editForumTopicPost(chatId, messageThreadId, name, iconCustomEmojiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to edit the name of the \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {string} name New topic name, 1-128 characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, name: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editGeneralForumTopicPost(chatId, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
     * @param {EditMessageTextPostRequestChatId} [chatId] 
     * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
     * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
     * @param {string} [caption] New caption of the message, 0-1024 characters after entities parsing
     * @param {string} [parseMode] Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media. Supported only for animation, photo and video messages.
     * @param {InlineKeyboardMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editMessageCaptionPost(businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editMessageCaptionPost(businessConnectionId, chatId, messageId, inlineMessageId, caption, parseMode, captionEntities, showCaptionAboveMedia, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to edit live location messages. A location can be edited until its *live\\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param {number} latitude Latitude of new location
     * @param {number} longitude Longitude of new location
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
     * @param {EditMessageTextPostRequestChatId} [chatId] 
     * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
     * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
     * @param {number} [livePeriod] New period in seconds during which the location can be updated, starting from the message send date. If 0x7FFFFFFF is specified, then the location can be updated forever. Otherwise, the new value must not exceed the current *live\\\\_period* by more than a day, and the live location expiration date must remain within the next 90 days. If not specified, then *live\\\\_period* remains unchanged
     * @param {number} [horizontalAccuracy] The radius of uncertainty for the location, measured in meters; 0-1500
     * @param {number} [heading] Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
     * @param {number} [proximityAlertRadius] The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
     * @param {InlineKeyboardMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editMessageLiveLocationPost(latitude: number, longitude: number, businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, livePeriod?: number, horizontalAccuracy?: number, heading?: number, proximityAlertRadius?: number, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editMessageLiveLocationPost(latitude, longitude, businessConnectionId, chatId, messageId, inlineMessageId, livePeriod, horizontalAccuracy, heading, proximityAlertRadius, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to edit animation, audio, document, photo, or video messages, or to add media to text messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can\'t be uploaded; use a previously uploaded file via its file\\_id or specify a URL. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
     * @param {InputMedia} media 
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
     * @param {EditMessageTextPostRequestChatId} [chatId] 
     * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
     * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
     * @param {InlineKeyboardMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editMessageMediaPost(media: InputMedia, businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editMessageMediaPost(media, businessConnectionId, chatId, messageId, inlineMessageId, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
     * @param {EditMessageTextPostRequestChatId} [chatId] 
     * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
     * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
     * @param {InlineKeyboardMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editMessageReplyMarkupPost(businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editMessageReplyMarkupPost(businessConnectionId, chatId, messageId, inlineMessageId, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within **48 hours** from the time they were sent.
     * @param {string} text New text of the message, 1-4096 characters after entities parsing
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
     * @param {EditMessageTextPostRequestChatId} [chatId] 
     * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message to edit
     * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
     * @param {string} [parseMode] Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [entities] A JSON-serialized list of special entities that appear in message text, which can be specified instead of *parse\\\\_mode*
     * @param {LinkPreviewOptions} [linkPreviewOptions] 
     * @param {InlineKeyboardMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editMessageTextPost(text: string, businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, parseMode?: string, entities?: Array<MessageEntity>, linkPreviewOptions?: LinkPreviewOptions, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editMessageTextPost(text, businessConnectionId, chatId, messageId, inlineMessageId, parseMode, entities, linkPreviewOptions, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits a story previously posted by the bot on behalf of a managed business account. Requires the *can\\_manage\\_stories* business bot right. Returns [Story](https://core.telegram.org/bots/api/#story) on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {number} storyId Unique identifier of the story to edit
     * @param {InputStoryContent} content 
     * @param {string} [caption] Caption of the story, 0-2048 characters after entities parsing
     * @param {string} [parseMode] Mode for parsing entities in the story caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {Array<StoryArea>} [areas] A JSON-serialized list of clickable areas to be shown on the story
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editStoryPost(businessConnectionId: string, storyId: number, content: InputStoryContent, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, areas?: Array<StoryArea>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editStoryPost(businessConnectionId, storyId, content, caption, parseMode, captionEntities, areas, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows the bot to cancel or re-enable extension of a subscription paid in Telegram Stars. Returns *True* on success.
     * @param {number} userId Identifier of the user whose subscription will be edited
     * @param {string} telegramPaymentChargeId Telegram payment identifier for the subscription
     * @param {boolean} isCanceled Pass *True* to cancel extension of the user subscription; the subscription must be active up to the end of the current subscription period. Pass *False* to allow the user to re-enable a subscription that was previously canceled by the bot.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editUserStarSubscriptionPost(userId: number, telegramPaymentChargeId: string, isCanceled: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editUserStarSubscriptionPost(userId, telegramPaymentChargeId, isCanceled, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as *String* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportChatInviteLinkPost(chatId: SendMessagePostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).exportChatInviteLinkPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to forward messages of any kind. Service messages and messages with protected content can\'t be forwarded. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {ForwardMessagePostRequestFromChatId} fromChatId 
     * @param {number} messageId Message identifier in the chat specified in *from\\\\_chat\\\\_id*
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {number} [videoStartTimestamp] New start timestamp for the forwarded video in the message
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the forwarded message from forwarding and saving
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public forwardMessagePost(chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagePostRequestFromChatId, messageId: number, messageThreadId?: number, videoStartTimestamp?: number, disableNotification?: boolean, protectContent?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).forwardMessagePost(chatId, fromChatId, messageId, messageThreadId, videoStartTimestamp, disableNotification, protectContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to forward multiple messages of any kind. If some of the specified messages can\'t be found or forwarded, they are skipped. Service messages and messages with protected content can\'t be forwarded. Album grouping is kept for forwarded messages. On success, an array of [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent messages is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {ForwardMessagesPostRequestFromChatId} fromChatId 
     * @param {Array<number>} messageIds A JSON-serialized list of 1-100 identifiers of messages in the chat *from\\\\_chat\\\\_id* to forward. The identifiers must be specified in a strictly increasing order.
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {boolean} [disableNotification] Sends the messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the forwarded messages from forwarding and saving
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public forwardMessagesPost(chatId: SendMessagePostRequestChatId, fromChatId: ForwardMessagesPostRequestFromChatId, messageIds: Array<number>, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).forwardMessagesPost(chatId, fromChatId, messageIds, messageThreadId, disableNotification, protectContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the list of gifts that can be sent by the bot to users and channel chats. Requires no parameters. Returns a [Gifts](https://core.telegram.org/bots/api/#gifts) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAvailableGiftsPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAvailableGiftsPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the gifts received and owned by a managed business account. Requires the *can\\_view\\_gifts\\_and\\_stars* business bot right. Returns [OwnedGifts](https://core.telegram.org/bots/api/#ownedgifts) on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {boolean} [excludeUnsaved] Pass True to exclude gifts that aren\\\&#39;t saved to the account\\\&#39;s profile page
     * @param {boolean} [excludeSaved] Pass True to exclude gifts that are saved to the account\\\&#39;s profile page
     * @param {boolean} [excludeUnlimited] Pass True to exclude gifts that can be purchased an unlimited number of times
     * @param {boolean} [excludeLimited] Pass True to exclude gifts that can be purchased a limited number of times
     * @param {boolean} [excludeUnique] Pass True to exclude unique gifts
     * @param {boolean} [sortByPrice] Pass True to sort results by gift price instead of send date. Sorting is applied before pagination.
     * @param {string} [offset] Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
     * @param {number} [limit] The maximum number of gifts to be returned; 1-100. Defaults to 100
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBusinessAccountGiftsPost(businessConnectionId: string, excludeUnsaved?: boolean, excludeSaved?: boolean, excludeUnlimited?: boolean, excludeLimited?: boolean, excludeUnique?: boolean, sortByPrice?: boolean, offset?: string, limit?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBusinessAccountGiftsPost(businessConnectionId, excludeUnsaved, excludeSaved, excludeUnlimited, excludeLimited, excludeUnique, sortByPrice, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the amount of Telegram Stars owned by a managed business account. Requires the *can\\_view\\_gifts\\_and\\_stars* business bot right. Returns [StarAmount](https://core.telegram.org/bots/api/#staramount) on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBusinessAccountStarBalancePost(businessConnectionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBusinessAccountStarBalancePost(businessConnectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get information about the connection of the bot with a business account. Returns a [BusinessConnection](https://core.telegram.org/bots/api/#businessconnection) object on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBusinessConnectionPost(businessConnectionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBusinessConnectionPost(businessConnectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get a list of administrators in a chat, which aren\'t bots. Returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects.
     * @param {LeaveChatPostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getChatAdministratorsPost(chatId: LeaveChatPostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getChatAdministratorsPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get the number of members in a chat. Returns *Int* on success.
     * @param {LeaveChatPostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getChatMemberCountPost(chatId: LeaveChatPostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getChatMemberCountPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
     * @param {LeaveChatPostRequestChatId} chatId 
     * @param {number} userId Unique identifier of the target user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getChatMemberPost(chatId: LeaveChatPostRequestChatId, userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getChatMemberPost(chatId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get the current value of the bot\'s menu button in a private chat, or the default menu button. Returns [MenuButton](https://core.telegram.org/bots/api/#menubutton) on success.
     * @param {number} [chatId] Unique identifier for the target private chat. If not specified, default bot\\\&#39;s menu button will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getChatMenuButtonPost(chatId?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getChatMenuButtonPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get up-to-date information about the chat. Returns a [ChatFullInfo](https://core.telegram.org/bots/api/#chatfullinfo) object on success.
     * @param {LeaveChatPostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getChatPost(chatId: LeaveChatPostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getChatPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of [Sticker](https://core.telegram.org/bots/api/#sticker) objects.
     * @param {Array<string>} customEmojiIds A JSON-serialized list of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCustomEmojiStickersPost(customEmojiIds: Array<string>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCustomEmojiStickersPost(customEmojiIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
     * @param {string} fileId File identifier to get information about
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFilePost(fileId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFilePost(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of [Sticker](https://core.telegram.org/bots/api/#sticker) objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getForumTopicIconStickersPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getForumTopicIconStickersPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.  This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and their neighbors are not among them. Please note that this behavior is subject to change.
     * @param {number} userId Target user id
     * @param {number} [chatId] Required if *inline\\\\_message\\\\_id* is not specified. Unique identifier for the target chat
     * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the sent message
     * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGameHighScoresPost(userId: number, chatId?: number, messageId?: number, inlineMessageId?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGameHighScoresPost(userId, chatId, messageId, inlineMessageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A simple method for testing your bot\'s authentication token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMePost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get the current list of the bot\'s commands for the given scope and user language. Returns an Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) objects. If commands aren\'t set, an empty list is returned.
     * @param {BotCommandScope} [scope] 
     * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyCommandsPost(scope?: BotCommandScope, languageCode?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyCommandsPost(scope, languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get the current default administrator rights of the bot. Returns [ChatAdministratorRights](https://core.telegram.org/bots/api/#chatadministratorrights) on success.
     * @param {boolean} [forChannels] Pass *True* to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyDefaultAdministratorRightsPost(forChannels?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyDefaultAdministratorRightsPost(forChannels, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get the current bot description for the given user language. Returns [BotDescription](https://core.telegram.org/bots/api/#botdescription) on success.
     * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyDescriptionPost(languageCode?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyDescriptionPost(languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get the current bot name for the given user language. Returns [BotName](https://core.telegram.org/bots/api/#botname) on success.
     * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyNamePost(languageCode?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyNamePost(languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get the current bot short description for the given user language. Returns [BotShortDescription](https://core.telegram.org/bots/api/#botshortdescription) on success.
     * @param {string} [languageCode] A two-letter ISO 639-1 language code or an empty string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyShortDescriptionPost(languageCode?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyShortDescriptionPost(languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the bot\'s Telegram Star transactions in chronological order. On success, returns a [StarTransactions](https://core.telegram.org/bots/api/#startransactions) object.
     * @param {number} [offset] Number of transactions to skip in the response
     * @param {number} [limit] The maximum number of transactions to be retrieved. Values between 1-100 are accepted. Defaults to 100.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStarTransactionsPost(offset?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStarTransactionsPost(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
     * @param {string} name Name of the sticker set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStickerSetPost(name: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStickerSetPost(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). Returns an Array of [Update](https://core.telegram.org/bots/api/#update) objects.
     * @param {number} [offset] Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\\\\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will be forgotten.
     * @param {number} [limit] Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
     * @param {number} [timeout] Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
     * @param {Array<string>} [allowedUpdates] A JSON-serialized list of the update types you want your bot to receive. For example, specify &#x60;[\\\&quot;message\\\&quot;, \\\&quot;edited_channel_post\\\&quot;, \\\&quot;callback_query\\\&quot;]&#x60; to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all update types except *chat\\\\_member*, *message\\\\_reaction*, and *message\\\\_reaction\\\\_count* (default). If not specified, the previous setting will be used.    Please note that this parameter doesn\\\&#39;t affect updates created before the call to getUpdates, so unwanted updates may be received for a short period of time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUpdatesPost(offset?: number, limit?: number, timeout?: number, allowedUpdates?: Array<string>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUpdatesPost(offset, limit, timeout, allowedUpdates, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat. Returns a [UserChatBoosts](https://core.telegram.org/bots/api/#userchatboosts) object.
     * @param {GetUserChatBoostsPostRequestChatId} chatId 
     * @param {number} userId Unique identifier of the target user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserChatBoostsPost(chatId: GetUserChatBoostsPostRequestChatId, userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserChatBoostsPost(chatId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
     * @param {number} userId Unique identifier of the target user
     * @param {number} [offset] Sequential number of the first photo to be returned. By default, all photos are returned.
     * @param {number} [limit] Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserProfilePhotosPost(userId: number, offset?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserProfilePhotosPost(userId, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWebhookInfoPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWebhookInfoPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gifts a Telegram Premium subscription to the given user. Returns *True* on success.
     * @param {number} userId Unique identifier of the target user who will receive a Telegram Premium subscription
     * @param {GiftPremiumSubscriptionPostMonthCountEnum} monthCount Number of months the Telegram Premium subscription will be active for the user; must be one of 3, 6, or 12
     * @param {number} starCount Number of Telegram Stars to pay for the Telegram Premium subscription; must be 1000 for 3 months, 1500 for 6 months, and 2500 for 12 months
     * @param {string} [text] Text that will be shown along with the service message about the subscription; 0-128 characters
     * @param {string} [textParseMode] Mode for parsing entities in the text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
     * @param {Array<MessageEntity>} [textEntities] A JSON-serialized list of special entities that appear in the gift text. It can be specified instead of *text\\\\_parse\\\\_mode*. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public giftPremiumSubscriptionPost(userId: number, monthCount: GiftPremiumSubscriptionPostMonthCountEnum, starCount: number, text?: string, textParseMode?: string, textEntities?: Array<MessageEntity>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).giftPremiumSubscriptionPost(userId, monthCount, starCount, text, textParseMode, textEntities, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to hide the \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. The topic will be automatically closed if it was open. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public hideGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).hideGeneralForumTopicPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
     * @param {LeaveChatPostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public leaveChatPost(chatId: LeaveChatPostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).leaveChatPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logOutPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logOutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the \'can\\_pin\\_messages\' administrator right in a supergroup or \'can\\_edit\\_messages\' administrator right in a channel. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {number} messageId Identifier of a message to pin
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be pinned
     * @param {boolean} [disableNotification] Pass *True* if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pinChatMessagePost(chatId: SendMessagePostRequestChatId, messageId: number, businessConnectionId?: string, disableNotification?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pinChatMessagePost(chatId, messageId, businessConnectionId, disableNotification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Posts a story on behalf of a managed business account. Requires the *can\\_manage\\_stories* business bot right. Returns [Story](https://core.telegram.org/bots/api/#story) on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {InputStoryContent} content 
     * @param {PostStoryPostActivePeriodEnum} activePeriod Period after which the story is moved to the archive, in seconds; must be one of &#x60;6 * 3600&#x60;, &#x60;12 * 3600&#x60;, &#x60;86400&#x60;, or &#x60;2 * 86400&#x60;
     * @param {string} [caption] Caption of the story, 0-2048 characters after entities parsing
     * @param {string} [parseMode] Mode for parsing entities in the story caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {Array<StoryArea>} [areas] A JSON-serialized list of clickable areas to be shown on the story
     * @param {boolean} [postToChatPage] Pass *True* to keep the story accessible after it expires
     * @param {boolean} [protectContent] Pass *True* if the content of the story must be protected from forwarding and screenshotting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postStoryPost(businessConnectionId: string, content: InputStoryContent, activePeriod: PostStoryPostActivePeriodEnum, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, areas?: Array<StoryArea>, postToChatPage?: boolean, protectContent?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postStoryPost(businessConnectionId, content, activePeriod, caption, parseMode, captionEntities, areas, postToChatPage, protectContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {number} userId Unique identifier of the target user
     * @param {boolean} [isAnonymous] Pass *True* if the administrator\\\&#39;s presence in the chat is hidden
     * @param {boolean} [canManageChat] Pass *True* if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.
     * @param {boolean} [canDeleteMessages] Pass *True* if the administrator can delete messages of other users
     * @param {boolean} [canManageVideoChats] Pass *True* if the administrator can manage video chats
     * @param {boolean} [canRestrictMembers] Pass *True* if the administrator can restrict, ban or unban chat members, or access supergroup statistics
     * @param {boolean} [canPromoteMembers] Pass *True* if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by him)
     * @param {boolean} [canChangeInfo] Pass *True* if the administrator can change chat title, photo and other settings
     * @param {boolean} [canInviteUsers] Pass *True* if the administrator can invite new users to the chat
     * @param {boolean} [canPostStories] Pass *True* if the administrator can post stories to the chat
     * @param {boolean} [canEditStories] Pass *True* if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat\\\&#39;s story archive
     * @param {boolean} [canDeleteStories] Pass *True* if the administrator can delete stories posted by other users
     * @param {boolean} [canPostMessages] Pass *True* if the administrator can post messages in the channel, or access channel statistics; for channels only
     * @param {boolean} [canEditMessages] Pass *True* if the administrator can edit messages of other users and can pin messages; for channels only
     * @param {boolean} [canPinMessages] Pass *True* if the administrator can pin messages; for supergroups only
     * @param {boolean} [canManageTopics] Pass *True* if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public promoteChatMemberPost(chatId: SendMessagePostRequestChatId, userId: number, isAnonymous?: boolean, canManageChat?: boolean, canDeleteMessages?: boolean, canManageVideoChats?: boolean, canRestrictMembers?: boolean, canPromoteMembers?: boolean, canChangeInfo?: boolean, canInviteUsers?: boolean, canPostStories?: boolean, canEditStories?: boolean, canDeleteStories?: boolean, canPostMessages?: boolean, canEditMessages?: boolean, canPinMessages?: boolean, canManageTopics?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).promoteChatMemberPost(chatId, userId, isAnonymous, canManageChat, canDeleteMessages, canManageVideoChats, canRestrictMembers, canPromoteMembers, canChangeInfo, canInviteUsers, canPostStories, canEditStories, canDeleteStories, canPostMessages, canEditMessages, canPinMessages, canManageTopics, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks incoming message as read on behalf of a business account. Requires the *can\\_read\\_messages* business bot right. Returns *True* on success.
     * @param {string} businessConnectionId Unique identifier of the business connection on behalf of which to read the message
     * @param {number} chatId Unique identifier of the chat in which the message was received. The chat must have been active in the last 24 hours.
     * @param {number} messageId Unique identifier of the message to mark as read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readBusinessMessagePost(businessConnectionId: string, chatId: number, messageId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readBusinessMessagePost(businessConnectionId, chatId, messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refunds a successful payment in [Telegram Stars](https://t.me/BotNews/90). Returns *True* on success.
     * @param {number} userId Identifier of the user whose payment will be refunded
     * @param {string} telegramPaymentChargeId Telegram payment identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refundStarPaymentPost(userId: number, telegramPaymentChargeId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refundStarPaymentPost(userId, telegramPaymentChargeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the current profile photo of a managed business account. Requires the *can\\_edit\\_profile\\_photo* business bot right. Returns *True* on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {boolean} [isPublic] Pass True to remove the public photo, which is visible even if the main photo is hidden by the business account\\\&#39;s privacy settings. After the main photo is removed, the previous profile photo (if present) becomes the main photo.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeBusinessAccountProfilePhotoPost(businessConnectionId: string, isPublic?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).removeBusinessAccountProfilePhotoPost(businessConnectionId, isPublic, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes verification from a chat that is currently verified [on behalf of the organization](https://telegram.org/verify#third-party-verification) represented by the bot. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeChatVerificationPost(chatId: SendMessagePostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).removeChatVerificationPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes verification from a user who is currently verified [on behalf of the organization](https://telegram.org/verify#third-party-verification) represented by the bot. Returns *True* on success.
     * @param {number} userId Unique identifier of the target user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeUserVerificationPost(userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).removeUserVerificationPost(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights, unless it is the creator of the topic. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reopenForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).reopenForumTopicPost(chatId, messageThreadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to reopen a closed \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. The topic will be automatically unhidden if it was hidden. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reopenGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).reopenGeneralForumTopicPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling [deleteStickerFromSet](https://core.telegram.org/bots/api/#deletestickerfromset), then [addStickerToSet](https://core.telegram.org/bots/api/#addstickertoset), then [setStickerPositionInSet](https://core.telegram.org/bots/api/#setstickerpositioninset). Returns *True* on success.
     * @param {number} userId User identifier of the sticker set owner
     * @param {string} name Sticker set name
     * @param {string} oldSticker File identifier of the replaced sticker
     * @param {InputSticker} sticker 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public replaceStickerInSetPost(userId: number, name: string, oldSticker: string, sticker: InputSticker, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).replaceStickerInSetPost(userId, name, oldSticker, sticker, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {number} userId Unique identifier of the target user
     * @param {ChatPermissions} permissions 
     * @param {boolean} [useIndependentChatPermissions] Pass *True* if chat permissions are set independently. Otherwise, the *can\\\\_send\\\\_other\\\\_messages* and *can\\\\_add\\\\_web\\\\_page\\\\_previews* permissions will imply the *can\\\\_send\\\\_messages*, *can\\\\_send\\\\_audios*, *can\\\\_send\\\\_documents*, *can\\\\_send\\\\_photos*, *can\\\\_send\\\\_videos*, *can\\\\_send\\\\_video\\\\_notes*, and *can\\\\_send\\\\_voice\\\\_notes* permissions; the *can\\\\_send\\\\_polls* permission will imply the *can\\\\_send\\\\_messages* permission.
     * @param {number} [untilDate] Date when restrictions will be lifted for the user; Unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public restrictChatMemberPost(chatId: RestrictChatMemberPostRequestChatId, userId: number, permissions: ChatPermissions, useIndependentChatPermissions?: boolean, untilDate?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).restrictChatMemberPost(chatId, userId, permissions, useIndependentChatPermissions, untilDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
     * @param {RevokeChatInviteLinkPostRequestChatId} chatId 
     * @param {string} inviteLink The invite link to revoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public revokeChatInviteLinkPost(chatId: RevokeChatInviteLinkPostRequestChatId, inviteLink: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).revokeChatInviteLinkPost(chatId, inviteLink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stores a message that can be sent by a user of a Mini App. Returns a [PreparedInlineMessage](https://core.telegram.org/bots/api/#preparedinlinemessage) object.
     * @param {number} userId Unique identifier of the target user that can use the prepared message
     * @param {InlineQueryResult} result 
     * @param {boolean} [allowUserChats] Pass *True* if the message can be sent to private chats with users
     * @param {boolean} [allowBotChats] Pass *True* if the message can be sent to private chats with bots
     * @param {boolean} [allowGroupChats] Pass *True* if the message can be sent to group and supergroup chats
     * @param {boolean} [allowChannelChats] Pass *True* if the message can be sent to channel chats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public savePreparedInlineMessagePost(userId: number, result: InlineQueryResult, allowUserChats?: boolean, allowBotChats?: boolean, allowGroupChats?: boolean, allowChannelChats?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).savePreparedInlineMessagePost(userId, result, allowUserChats, allowBotChats, allowGroupChats, allowChannelChats, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {SendAnimationPostRequestAnimation} animation 
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {number} [duration] Duration of sent animation in seconds
     * @param {number} [width] Animation width
     * @param {number} [height] Animation height
     * @param {SendAudioPostRequestThumbnail} [thumbnail] 
     * @param {string} [caption] Animation caption (may also be used when resending animation by *file\\\\_id*), 0-1024 characters after entities parsing
     * @param {string} [parseMode] Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
     * @param {boolean} [hasSpoiler] Pass *True* if the animation needs to be covered with a spoiler animation
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendAnimationPost(chatId: SendMessagePostRequestChatId, animation: SendAnimationPostRequestAnimation, businessConnectionId?: string, messageThreadId?: number, duration?: number, width?: number, height?: number, thumbnail?: SendAudioPostRequestThumbnail, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, hasSpoiler?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendAnimationPost(chatId, animation, businessConnectionId, messageThreadId, duration, width, height, thumbnail, caption, parseMode, captionEntities, showCaptionAboveMedia, hasSpoiler, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.  For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {SendAudioPostRequestAudio} audio 
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {string} [caption] Audio caption, 0-1024 characters after entities parsing
     * @param {string} [parseMode] Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {number} [duration] Duration of the audio in seconds
     * @param {string} [performer] Performer
     * @param {string} [title] Track name
     * @param {SendAudioPostRequestThumbnail} [thumbnail] 
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendAudioPost(chatId: SendMessagePostRequestChatId, audio: SendAudioPostRequestAudio, businessConnectionId?: string, messageThreadId?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, duration?: number, performer?: string, title?: string, thumbnail?: SendAudioPostRequestThumbnail, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendAudioPost(chatId, audio, businessConnectionId, messageThreadId, caption, parseMode, captionEntities, duration, performer, title, thumbnail, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method when you need to tell the user that something is happening on the bot\'s side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.  Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\\_photo*. The user will see a “sending photo” status for the bot.  We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {SendChatActionPostActionEnum} action Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\\\\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\\\\_video* or *upload\\\\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\\\\_voice* or *upload\\\\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\\\\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *choose\\\\_sticker* for [stickers](https://core.telegram.org/bots/api/#sendsticker), *find\\\\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\\\\_video\\\\_note* or *upload\\\\_video\\\\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the action will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread; for supergroups only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendChatActionPost(chatId: SendMessagePostRequestChatId, action: SendChatActionPostActionEnum, businessConnectionId?: string, messageThreadId?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendChatActionPost(chatId, action, businessConnectionId, messageThreadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {string} phoneNumber Contact\\\&#39;s phone number
     * @param {string} firstName Contact\\\&#39;s first name
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {string} [lastName] Contact\\\&#39;s last name
     * @param {string} [vcard] Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendContactPost(chatId: SendMessagePostRequestChatId, phoneNumber: string, firstName: string, businessConnectionId?: string, messageThreadId?: number, lastName?: string, vcard?: string, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendContactPost(chatId, phoneNumber, firstName, businessConnectionId, messageThreadId, lastName, vcard, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {SendDicePostEmojiEnum} [emoji] Emoji on which the dice throw animation is based. Currently, must be one of “🎲”, “🎯”, “🏀”, “⚽”, “🎳”, or “🎰”. Dice can have values 1-6 for “🎲”, “🎯” and “🎳”, values 1-5 for “🏀” and “⚽”, and values 1-64 for “🎰”. Defaults to “🎲”
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendDicePost(chatId: SendMessagePostRequestChatId, businessConnectionId?: string, messageThreadId?: number, emoji?: SendDicePostEmojiEnum, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendDicePost(chatId, businessConnectionId, messageThreadId, emoji, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {SendDocumentPostRequestDocument} document 
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {SendAudioPostRequestThumbnail} [thumbnail] 
     * @param {string} [caption] Document caption (may also be used when resending documents by *file\\\\_id*), 0-1024 characters after entities parsing
     * @param {string} [parseMode] Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {boolean} [disableContentTypeDetection] Disables automatic server-side content type detection for files uploaded using multipart/form-data
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendDocumentPost(chatId: SendMessagePostRequestChatId, document: SendDocumentPostRequestDocument, businessConnectionId?: string, messageThreadId?: number, thumbnail?: SendAudioPostRequestThumbnail, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, disableContentTypeDetection?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendDocumentPost(chatId, document, businessConnectionId, messageThreadId, thumbnail, caption, parseMode, captionEntities, disableContentTypeDetection, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {number} chatId Unique identifier for the target chat
     * @param {string} gameShortName Short name of the game, serves as the unique identifier for the game. Set up your games via [@BotFather](https://t.me/botfather).
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {InlineKeyboardMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendGamePost(chatId: number, gameShortName: string, businessConnectionId?: string, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendGamePost(chatId, gameShortName, businessConnectionId, messageThreadId, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a gift to the given user or channel chat. The gift can\'t be converted to Telegram Stars by the receiver. Returns *True* on success.
     * @param {string} giftId Identifier of the gift
     * @param {number} [userId] Required if *chat\\\\_id* is not specified. Unique identifier of the target user who will receive the gift.
     * @param {SendGiftPostRequestChatId} [chatId] 
     * @param {boolean} [payForUpgrade] Pass *True* to pay for the gift upgrade from the bot\\\&#39;s balance, thereby making the upgrade free for the receiver
     * @param {string} [text] Text that will be shown along with the gift; 0-128 characters
     * @param {string} [textParseMode] Mode for parsing entities in the text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
     * @param {Array<MessageEntity>} [textEntities] A JSON-serialized list of special entities that appear in the gift text. It can be specified instead of *text\\\\_parse\\\\_mode*. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom\\\\_emoji” are ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendGiftPost(giftId: string, userId?: number, chatId?: SendGiftPostRequestChatId, payForUpgrade?: boolean, text?: string, textParseMode?: string, textEntities?: Array<MessageEntity>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendGiftPost(giftId, userId, chatId, payForUpgrade, text, textParseMode, textEntities, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {string} title Product name, 1-32 characters
     * @param {string} description Product description, 1-255 characters
     * @param {string} payload Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.
     * @param {string} currency Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies). Pass “XTR” for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {Array<LabeledPrice>} prices Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {string} [providerToken] Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an empty string for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {number} [maxTipAmount] The maximum accepted amount for tips in the *smallest units* of the currency (integer, **not** float/double). For example, for a maximum tip of &#x60;US$ 1.45&#x60; pass &#x60;max_tip_amount &#x3D; 145&#x60;. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {Array<number>} [suggestedTipAmounts] A JSON-serialized array of suggested amounts of tips in the *smallest units* of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed *max\\\\_tip\\\\_amount*.
     * @param {string} [startParameter] Unique deep-linking parameter. If left empty, **forwarded copies** of the sent message will have a *Pay* button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a *URL* button with a deep link to the bot (instead of a *Pay* button), with the value used as the start parameter
     * @param {string} [providerData] JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
     * @param {string} [photoUrl] URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
     * @param {number} [photoSize] Photo size in bytes
     * @param {number} [photoWidth] Photo width
     * @param {number} [photoHeight] Photo height
     * @param {boolean} [needName] Pass *True* if you require the user\\\&#39;s full name to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {boolean} [needPhoneNumber] Pass *True* if you require the user\\\&#39;s phone number to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {boolean} [needEmail] Pass *True* if you require the user\\\&#39;s email address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {boolean} [needShippingAddress] Pass *True* if you require the user\\\&#39;s shipping address to complete the order. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {boolean} [sendPhoneNumberToProvider] Pass *True* if the user\\\&#39;s phone number should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {boolean} [sendEmailToProvider] Pass *True* if the user\\\&#39;s email address should be sent to the provider. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {boolean} [isFlexible] Pass *True* if the final price depends on the shipping method. Ignored for payments in [Telegram Stars](https://t.me/BotNews/90).
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {InlineKeyboardMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendInvoicePost(chatId: SendMessagePostRequestChatId, title: string, description: string, payload: string, currency: string, prices: Array<LabeledPrice>, messageThreadId?: number, providerToken?: string, maxTipAmount?: number, suggestedTipAmounts?: Array<number>, startParameter?: string, providerData?: string, photoUrl?: string, photoSize?: number, photoWidth?: number, photoHeight?: number, needName?: boolean, needPhoneNumber?: boolean, needEmail?: boolean, needShippingAddress?: boolean, sendPhoneNumberToProvider?: boolean, sendEmailToProvider?: boolean, isFlexible?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendInvoicePost(chatId, title, description, payload, currency, prices, messageThreadId, providerToken, maxTipAmount, suggestedTipAmounts, startParameter, providerData, photoUrl, photoSize, photoWidth, photoHeight, needName, needPhoneNumber, needEmail, needShippingAddress, sendPhoneNumberToProvider, sendEmailToProvider, isFlexible, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {number} latitude Latitude of the location
     * @param {number} longitude Longitude of the location
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {number} [horizontalAccuracy] The radius of uncertainty for the location, measured in meters; 0-1500
     * @param {number} [livePeriod] Period in seconds during which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.
     * @param {number} [heading] For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
     * @param {number} [proximityAlertRadius] For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendLocationPost(chatId: SendMessagePostRequestChatId, latitude: number, longitude: number, businessConnectionId?: string, messageThreadId?: number, horizontalAccuracy?: number, livePeriod?: number, heading?: number, proximityAlertRadius?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendLocationPost(chatId, latitude, longitude, businessConnectionId, messageThreadId, horizontalAccuracy, livePeriod, heading, proximityAlertRadius, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {Array<SendMediaGroupPostRequestMediaInner>} media A JSON-serialized array describing messages to be sent, must include 2-10 items
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {boolean} [disableNotification] Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent messages from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendMediaGroupPost(chatId: SendMessagePostRequestChatId, media: Array<SendMediaGroupPostRequestMediaInner>, businessConnectionId?: string, messageThreadId?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendMediaGroupPost(chatId, media, businessConnectionId, messageThreadId, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {string} text Text of the message to be sent, 1-4096 characters after entities parsing
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {string} [parseMode] Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [entities] A JSON-serialized list of special entities that appear in message text, which can be specified instead of *parse\\\\_mode*
     * @param {LinkPreviewOptions} [linkPreviewOptions] 
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendMessagePost(chatId: SendMessagePostRequestChatId, text: string, businessConnectionId?: string, messageThreadId?: number, parseMode?: string, entities?: Array<MessageEntity>, linkPreviewOptions?: LinkPreviewOptions, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendMessagePost(chatId, text, businessConnectionId, messageThreadId, parseMode, entities, linkPreviewOptions, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send paid media. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {SendPaidMediaPostRequestChatId} chatId 
     * @param {number} starCount The number of Telegram Stars that must be paid to buy access to the media; 1-10000
     * @param {Array<InputPaidMedia>} media A JSON-serialized array describing the media to be sent; up to 10 items
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {string} [payload] Bot-defined paid media payload, 0-128 bytes. This will not be displayed to the user, use it for your internal processes.
     * @param {string} [caption] Media caption, 0-1024 characters after entities parsing
     * @param {string} [parseMode] Mode for parsing entities in the media caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendPaidMediaPost(chatId: SendPaidMediaPostRequestChatId, starCount: number, media: Array<InputPaidMedia>, businessConnectionId?: string, payload?: string, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendPaidMediaPost(chatId, starCount, media, businessConnectionId, payload, caption, parseMode, captionEntities, showCaptionAboveMedia, disableNotification, protectContent, allowPaidBroadcast, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {SendPhotoPostRequestPhoto} photo 
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {string} [caption] Photo caption (may also be used when resending photos by *file\\\\_id*), 0-1024 characters after entities parsing
     * @param {string} [parseMode] Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
     * @param {boolean} [hasSpoiler] Pass *True* if the photo needs to be covered with a spoiler animation
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendPhotoPost(chatId: SendMessagePostRequestChatId, photo: SendPhotoPostRequestPhoto, businessConnectionId?: string, messageThreadId?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, hasSpoiler?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendPhotoPost(chatId, photo, businessConnectionId, messageThreadId, caption, parseMode, captionEntities, showCaptionAboveMedia, hasSpoiler, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {string} question Poll question, 1-300 characters
     * @param {Array<InputPollOption>} _options A JSON-serialized list of 2-10 answer options
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {string} [questionParseMode] Mode for parsing entities in the question. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details. Currently, only custom emoji entities are allowed
     * @param {Array<MessageEntity>} [questionEntities] A JSON-serialized list of special entities that appear in the poll question. It can be specified instead of *question\\\\_parse\\\\_mode*
     * @param {boolean} [isAnonymous] *True*, if the poll needs to be anonymous, defaults to *True*
     * @param {SendPollPostTypeEnum} [type] Poll type, “quiz” or “regular”, defaults to “regular”
     * @param {boolean} [allowsMultipleAnswers] *True*, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
     * @param {number} [correctOptionId] 0-based identifier of the correct answer option, required for polls in quiz mode
     * @param {string} [explanation] Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
     * @param {string} [explanationParseMode] Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [explanationEntities] A JSON-serialized list of special entities that appear in the poll explanation. It can be specified instead of *explanation\\\\_parse\\\\_mode*
     * @param {number} [openPeriod] Amount of time in seconds the poll will be active after creation, 5-600. Can\\\&#39;t be used together with *close\\\\_date*.
     * @param {number} [closeDate] Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can\\\&#39;t be used together with *open\\\\_period*.
     * @param {boolean} [isClosed] Pass *True* if the poll needs to be immediately closed. This can be useful for poll preview.
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendPollPost(chatId: SendMessagePostRequestChatId, question: string, _options: Array<InputPollOption>, businessConnectionId?: string, messageThreadId?: number, questionParseMode?: string, questionEntities?: Array<MessageEntity>, isAnonymous?: boolean, type?: SendPollPostTypeEnum, allowsMultipleAnswers?: boolean, correctOptionId?: number, explanation?: string, explanationParseMode?: string, explanationEntities?: Array<MessageEntity>, openPeriod?: number, closeDate?: number, isClosed?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendPollPost(chatId, question, _options, businessConnectionId, messageThreadId, questionParseMode, questionEntities, isAnonymous, type, allowsMultipleAnswers, correctOptionId, explanation, explanationParseMode, explanationEntities, openPeriod, closeDate, isClosed, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS, or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {SendStickerPostRequestSticker} sticker 
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {string} [emoji] Emoji associated with the sticker; only for just uploaded stickers
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendStickerPost(chatId: SendMessagePostRequestChatId, sticker: SendStickerPostRequestSticker, businessConnectionId?: string, messageThreadId?: number, emoji?: string, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendStickerPost(chatId, sticker, businessConnectionId, messageThreadId, emoji, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {number} latitude Latitude of the venue
     * @param {number} longitude Longitude of the venue
     * @param {string} title Name of the venue
     * @param {string} address Address of the venue
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {string} [foursquareId] Foursquare identifier of the venue
     * @param {string} [foursquareType] Foursquare type of the venue, if known. (For example, “arts\\\\_entertainment/default”, “arts\\\\_entertainment/aquarium” or “food/icecream”.)
     * @param {string} [googlePlaceId] Google Places identifier of the venue
     * @param {string} [googlePlaceType] Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendVenuePost(chatId: SendMessagePostRequestChatId, latitude: number, longitude: number, title: string, address: string, businessConnectionId?: string, messageThreadId?: number, foursquareId?: string, foursquareType?: string, googlePlaceId?: string, googlePlaceType?: string, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendVenuePost(chatId, latitude, longitude, title, address, businessConnectionId, messageThreadId, foursquareId, foursquareType, googlePlaceId, googlePlaceType, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {SendVideoNotePostRequestVideoNote} videoNote 
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {number} [duration] Duration of sent video in seconds
     * @param {number} [length] Video width and height, i.e. diameter of the video message
     * @param {SendAudioPostRequestThumbnail} [thumbnail] 
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendVideoNotePost(chatId: SendMessagePostRequestChatId, videoNote: SendVideoNotePostRequestVideoNote, businessConnectionId?: string, messageThreadId?: number, duration?: number, length?: number, thumbnail?: SendAudioPostRequestThumbnail, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendVideoNotePost(chatId, videoNote, businessConnectionId, messageThreadId, duration, length, thumbnail, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {SendVideoPostRequestVideo} video 
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {number} [duration] Duration of sent video in seconds
     * @param {number} [width] Video width
     * @param {number} [height] Video height
     * @param {SendAudioPostRequestThumbnail} [thumbnail] 
     * @param {SendVideoPostRequestCover} [cover] 
     * @param {number} [startTimestamp] Start timestamp for the video in the message
     * @param {string} [caption] Video caption (may also be used when resending videos by *file\\\\_id*), 0-1024 characters after entities parsing
     * @param {string} [parseMode] Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {boolean} [showCaptionAboveMedia] Pass *True*, if the caption must be shown above the message media
     * @param {boolean} [hasSpoiler] Pass *True* if the video needs to be covered with a spoiler animation
     * @param {boolean} [supportsStreaming] Pass *True* if the uploaded video is suitable for streaming
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendVideoPost(chatId: SendMessagePostRequestChatId, video: SendVideoPostRequestVideo, businessConnectionId?: string, messageThreadId?: number, duration?: number, width?: number, height?: number, thumbnail?: SendAudioPostRequestThumbnail, cover?: SendVideoPostRequestCover, startTimestamp?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, showCaptionAboveMedia?: boolean, hasSpoiler?: boolean, supportsStreaming?: boolean, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendVideoPost(chatId, video, businessConnectionId, messageThreadId, duration, width, height, thumbnail, cover, startTimestamp, caption, parseMode, captionEntities, showCaptionAboveMedia, hasSpoiler, supportsStreaming, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS, or in .MP3 format, or in .M4A format (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {SendVoicePostRequestVoice} voice 
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be sent
     * @param {number} [messageThreadId] Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
     * @param {string} [caption] Voice message caption, 0-1024 characters after entities parsing
     * @param {string} [parseMode] Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     * @param {Array<MessageEntity>} [captionEntities] A JSON-serialized list of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*
     * @param {number} [duration] Duration of the voice message in seconds
     * @param {boolean} [disableNotification] Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
     * @param {boolean} [protectContent] Protects the contents of the sent message from forwarding and saving
     * @param {boolean} [allowPaidBroadcast] Pass *True* to allow up to 1000 messages per second, ignoring [broadcasting limits](https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once) for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot\\\&#39;s balance
     * @param {string} [messageEffectId] Unique identifier of the message effect to be added to the message; for private chats only
     * @param {ReplyParameters} [replyParameters] 
     * @param {SendMessagePostRequestReplyMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendVoicePost(chatId: SendMessagePostRequestChatId, voice: SendVoicePostRequestVoice, businessConnectionId?: string, messageThreadId?: number, caption?: string, parseMode?: string, captionEntities?: Array<MessageEntity>, duration?: number, disableNotification?: boolean, protectContent?: boolean, allowPaidBroadcast?: boolean, messageEffectId?: string, replyParameters?: ReplyParameters, replyMarkup?: SendMessagePostRequestReplyMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendVoicePost(chatId, voice, businessConnectionId, messageThreadId, caption, parseMode, captionEntities, duration, disableNotification, protectContent, allowPaidBroadcast, messageEffectId, replyParameters, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Changes the bio of a managed business account. Requires the *can\\_change\\_bio* business bot right. Returns *True* on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {string} [bio] The new value of the bio for the business account; 0-140 characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setBusinessAccountBioPost(businessConnectionId: string, bio?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setBusinessAccountBioPost(businessConnectionId, bio, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Changes the privacy settings pertaining to incoming gifts in a managed business account. Requires the *can\\_change\\_gift\\_settings* business bot right. Returns *True* on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {boolean} showGiftButton Pass True, if a button for sending a gift to the user or by the business account must always be shown in the input field
     * @param {AcceptedGiftTypes} acceptedGiftTypes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setBusinessAccountGiftSettingsPost(businessConnectionId: string, showGiftButton: boolean, acceptedGiftTypes: AcceptedGiftTypes, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setBusinessAccountGiftSettingsPost(businessConnectionId, showGiftButton, acceptedGiftTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Changes the first and last name of a managed business account. Requires the *can\\_change\\_name* business bot right. Returns *True* on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {string} firstName The new value of the first name for the business account; 1-64 characters
     * @param {string} [lastName] The new value of the last name for the business account; 0-64 characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setBusinessAccountNamePost(businessConnectionId: string, firstName: string, lastName?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setBusinessAccountNamePost(businessConnectionId, firstName, lastName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Changes the profile photo of a managed business account. Requires the *can\\_edit\\_profile\\_photo* business bot right. Returns *True* on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {InputProfilePhoto} photo 
     * @param {boolean} [isPublic] Pass True to set the public photo, which will be visible even if the main photo is hidden by the business account\\\&#39;s privacy settings. An account can have only one public photo.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setBusinessAccountProfilePhotoPost(businessConnectionId: string, photo: InputProfilePhoto, isPublic?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setBusinessAccountProfilePhotoPost(businessConnectionId, photo, isPublic, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Changes the username of a managed business account. Requires the *can\\_change\\_username* business bot right. Returns *True* on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {string} [username] The new value of the username for the business account; 0-32 characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setBusinessAccountUsernamePost(businessConnectionId: string, username?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setBusinessAccountUsernamePost(businessConnectionId, username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {number} userId Unique identifier of the target user
     * @param {string} customTitle New custom title for the administrator; 0-16 characters, emoji are not allowed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setChatAdministratorCustomTitlePost(chatId: RestrictChatMemberPostRequestChatId, userId: number, customTitle: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setChatAdministratorCustomTitlePost(chatId, userId, customTitle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {string} [description] New chat description, 0-255 characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setChatDescriptionPost(chatId: SendMessagePostRequestChatId, description?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setChatDescriptionPost(chatId, description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to change the bot\'s menu button in a private chat, or the default menu button. Returns *True* on success.
     * @param {number} [chatId] Unique identifier for the target private chat. If not specified, default bot\\\&#39;s menu button will be changed
     * @param {MenuButton} [menuButton] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setChatMenuButtonPost(chatId?: number, menuButton?: MenuButton, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setChatMenuButtonPost(chatId, menuButton, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\\_restrict\\_members* administrator rights. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {ChatPermissions} permissions 
     * @param {boolean} [useIndependentChatPermissions] Pass *True* if chat permissions are set independently. Otherwise, the *can\\\\_send\\\\_other\\\\_messages* and *can\\\\_add\\\\_web\\\\_page\\\\_previews* permissions will imply the *can\\\\_send\\\\_messages*, *can\\\\_send\\\\_audios*, *can\\\\_send\\\\_documents*, *can\\\\_send\\\\_photos*, *can\\\\_send\\\\_videos*, *can\\\\_send\\\\_video\\\\_notes*, and *can\\\\_send\\\\_voice\\\\_notes* permissions; the *can\\\\_send\\\\_polls* permission will imply the *can\\\\_send\\\\_messages* permission.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setChatPermissionsPost(chatId: RestrictChatMemberPostRequestChatId, permissions: ChatPermissions, useIndependentChatPermissions?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setChatPermissionsPost(chatId, permissions, useIndependentChatPermissions, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to set a new profile photo for the chat. Photos can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {any} photo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setChatPhotoPost(chatId: SendMessagePostRequestChatId, photo: any, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setChatPhotoPost(chatId, photo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {string} stickerSetName Name of the sticker set to be set as the group sticker set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setChatStickerSetPost(chatId: RestrictChatMemberPostRequestChatId, stickerSetName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setChatStickerSetPost(chatId, stickerSetName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to change the title of a chat. Titles can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {string} title New chat title, 1-128 characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setChatTitlePost(chatId: SendMessagePostRequestChatId, title: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setChatTitlePost(chatId, title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to set the thumbnail of a custom emoji sticker set. Returns *True* on success.
     * @param {string} name Sticker set name
     * @param {string} [customEmojiId] Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the thumbnail and use the first sticker as the thumbnail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setCustomEmojiStickerSetThumbnailPost(name: string, customEmojiId?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setCustomEmojiStickerSetThumbnailPost(name, customEmojiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned. Returns an error, if the new score is not greater than the user\'s current score in the chat and *force* is *False*.
     * @param {number} userId User identifier
     * @param {number} score New score, must be non-negative
     * @param {boolean} [force] Pass *True* if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
     * @param {boolean} [disableEditMessage] Pass *True* if the game message should not be automatically edited to include the current scoreboard
     * @param {number} [chatId] Required if *inline\\\\_message\\\\_id* is not specified. Unique identifier for the target chat
     * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the sent message
     * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setGameScorePost(userId: number, score: number, force?: boolean, disableEditMessage?: boolean, chatId?: number, messageId?: number, inlineMessageId?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setGameScorePost(userId, score, force, disableEditMessage, chatId, messageId, inlineMessageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to change the chosen reactions on a message. Service messages of some types can\'t be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. Bots can\'t use paid reactions. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {number} messageId Identifier of the target message. If the message belongs to a media group, the reaction is set to the first non-deleted message in the group instead.
     * @param {Array<ReactionType>} [reaction] A JSON-serialized list of reaction types to set on the message. Currently, as non-premium users, bots can set up to one reaction per message. A custom emoji reaction can be used if it is either already present on the message or explicitly allowed by chat administrators. Paid reactions can\\\&#39;t be used by bots.
     * @param {boolean} [isBig] Pass *True* to set the reaction with a big animation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setMessageReactionPost(chatId: SendMessagePostRequestChatId, messageId: number, reaction?: Array<ReactionType>, isBig?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setMessageReactionPost(chatId, messageId, reaction, isBig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to change the list of the bot\'s commands. See [this manual](https://core.telegram.org/bots/features#commands) for more details about bot commands. Returns *True* on success.
     * @param {Array<BotCommand>} commands A JSON-serialized list of bot commands to be set as the list of the bot\\\&#39;s commands. At most 100 commands can be specified.
     * @param {BotCommandScope} [scope] 
     * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setMyCommandsPost(commands: Array<BotCommand>, scope?: BotCommandScope, languageCode?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setMyCommandsPost(commands, scope, languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to change the default administrator rights requested by the bot when it\'s added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns *True* on success.
     * @param {ChatAdministratorRights} [rights] 
     * @param {boolean} [forChannels] Pass *True* to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setMyDefaultAdministratorRightsPost(rights?: ChatAdministratorRights, forChannels?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setMyDefaultAdministratorRightsPost(rights, forChannels, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to change the bot\'s description, which is shown in the chat with the bot if the chat is empty. Returns *True* on success.
     * @param {string} [description] New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language.
     * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for whose language there is no dedicated description.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setMyDescriptionPost(description?: string, languageCode?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setMyDescriptionPost(description, languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to change the bot\'s name. Returns *True* on success.
     * @param {string} [name] New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language.
     * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language there is no dedicated name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setMyNamePost(name?: string, languageCode?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setMyNamePost(name, languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to change the bot\'s short description, which is shown on the bot\'s profile page and is sent together with the link when users share the bot. Returns *True* on success.
     * @param {string} [shortDescription] New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language.
     * @param {string} [languageCode] A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setMyShortDescriptionPost(shortDescription?: string, languageCode?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setMyShortDescriptionPost(shortDescription, languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.  Use this if the data submitted by the user doesn\'t satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
     * @param {number} userId User identifier
     * @param {Array<PassportElementError>} errors A JSON-serialized array describing the errors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setPassportDataErrorsPost(userId: number, errors: Array<PassportElementError>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setPassportDataErrorsPost(userId, errors, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns *True* on success.
     * @param {string} sticker File identifier of the sticker
     * @param {Array<string>} emojiList A JSON-serialized list of 1-20 emoji associated with the sticker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setStickerEmojiListPost(sticker: string, emojiList: Array<string>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setStickerEmojiListPost(sticker, emojiList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns *True* on success.
     * @param {string} sticker File identifier of the sticker
     * @param {Array<string>} [keywords] A JSON-serialized list of 0-20 search keywords for the sticker with total length of up to 64 characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setStickerKeywordsPost(sticker: string, keywords?: Array<string>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setStickerKeywordsPost(sticker, keywords, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to change the [mask position](https://core.telegram.org/bots/api/#maskposition) of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns *True* on success.
     * @param {string} sticker File identifier of the sticker
     * @param {MaskPosition} [maskPosition] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setStickerMaskPositionPost(sticker: string, maskPosition?: MaskPosition, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setStickerMaskPositionPost(sticker, maskPosition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
     * @param {string} sticker File identifier of the sticker
     * @param {number} position New sticker position in the set, zero-based
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setStickerPositionInSetPost(sticker: string, position: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setStickerPositionInSetPost(sticker, position, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns *True* on success.
     * @param {string} name Sticker set name
     * @param {number} userId User identifier of the sticker set owner
     * @param {SetStickerSetThumbnailPostFormatEnum} format Format of the thumbnail, must be one of “static” for a **.WEBP** or **.PNG** image, “animated” for a **.TGS** animation, or “video” for a **.WEBM** video
     * @param {SetStickerSetThumbnailPostRequestThumbnail} [thumbnail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setStickerSetThumbnailPost(name: string, userId: number, format: SetStickerSetThumbnailPostFormatEnum, thumbnail?: SetStickerSetThumbnailPostRequestThumbnail, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setStickerSetThumbnailPost(name, userId, format, thumbnail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to set the title of a created sticker set. Returns *True* on success.
     * @param {string} name Sticker set name
     * @param {string} title Sticker set title, 1-64 characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setStickerSetTitlePost(name: string, title: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setStickerSetTitlePost(name, title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Changes the emoji status for a given user that previously allowed the bot to manage their emoji status via the Mini App method [requestEmojiStatusAccess](https://core.telegram.org/bots/webapps#initializing-mini-apps). Returns *True* on success.
     * @param {number} userId Unique identifier of the target user
     * @param {string} [emojiStatusCustomEmojiId] Custom emoji identifier of the emoji status to set. Pass an empty string to remove the status.
     * @param {number} [emojiStatusExpirationDate] Expiration date of the emoji status, if any
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setUserEmojiStatusPost(userId: number, emojiStatusCustomEmojiId?: string, emojiStatusExpirationDate?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setUserEmojiStatusPost(userId, emojiStatusCustomEmojiId, emojiStatusExpirationDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request (a request with response [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) different from `2XY`), we will repeat the request and give up after a reasonable amount of attempts. Returns *True* on success.  If you\'d like to make sure that the webhook was set by you, you can specify secret data in the parameter *secret\\_token*. If specified, the request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the secret token as content.
     * @param {string} url HTTPS URL to send updates to. Use an empty string to remove webhook integration
     * @param {any} [certificate] 
     * @param {string} [ipAddress] The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS
     * @param {number} [maxConnections] The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on your bot\\\&#39;s server, and higher values to increase your bot\\\&#39;s throughput.
     * @param {Array<string>} [allowedUpdates] A JSON-serialized list of the update types you want your bot to receive. For example, specify &#x60;[\\\&quot;message\\\&quot;, \\\&quot;edited_channel_post\\\&quot;, \\\&quot;callback_query\\\&quot;]&#x60; to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all update types except *chat\\\\_member*, *message\\\\_reaction*, and *message\\\\_reaction\\\\_count* (default). If not specified, the previous setting will be used.   Please note that this parameter doesn\\\&#39;t affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.
     * @param {boolean} [dropPendingUpdates] Pass *True* to drop all pending updates
     * @param {string} [secretToken] A secret token to be sent in a header “X-Telegram-Bot-Api-Secret-Token” in every webhook request, 1-256 characters. Only characters &#x60;A-Z&#x60;, &#x60;a-z&#x60;, &#x60;0-9&#x60;, &#x60;_&#x60; and &#x60;-&#x60; are allowed. The header is useful to ensure that the request comes from a webhook set by you.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setWebhookPost(url: string, certificate?: any, ipAddress?: string, maxConnections?: number, allowedUpdates?: Array<string>, dropPendingUpdates?: boolean, secretToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setWebhookPost(url, certificate, ipAddress, maxConnections, allowedUpdates, dropPendingUpdates, secretToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to stop updating a live location message before *live\\_period* expires. On success, if the message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
     * @param {EditMessageTextPostRequestChatId} [chatId] 
     * @param {number} [messageId] Required if *inline\\\\_message\\\\_id* is not specified. Identifier of the message with live location to stop
     * @param {string} [inlineMessageId] Required if *chat\\\\_id* and *message\\\\_id* are not specified. Identifier of the inline message
     * @param {InlineKeyboardMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public stopMessageLiveLocationPost(businessConnectionId?: string, chatId?: EditMessageTextPostRequestChatId, messageId?: number, inlineMessageId?: string, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).stopMessageLiveLocationPost(businessConnectionId, chatId, messageId, inlineMessageId, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) is returned.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {number} messageId Identifier of the original message with the poll
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message to be edited was sent
     * @param {InlineKeyboardMarkup} [replyMarkup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public stopPollPost(chatId: SendMessagePostRequestChatId, messageId: number, businessConnectionId?: string, replyMarkup?: InlineKeyboardMarkup, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).stopPollPost(chatId, messageId, businessConnectionId, replyMarkup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfers Telegram Stars from the business account balance to the bot\'s balance. Requires the *can\\_transfer\\_stars* business bot right. Returns *True* on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {number} starCount Number of Telegram Stars to transfer; 1-10000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public transferBusinessAccountStarsPost(businessConnectionId: string, starCount: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).transferBusinessAccountStarsPost(businessConnectionId, starCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfers an owned unique gift to another user. Requires the *can\\_transfer\\_and\\_upgrade\\_gifts* business bot right. Requires *can\\_transfer\\_stars* business bot right if the transfer is paid. Returns *True* on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {string} ownedGiftId Unique identifier of the regular gift that should be transferred
     * @param {number} newOwnerChatId Unique identifier of the chat which will own the gift. The chat must be active in the last 24 hours.
     * @param {number} [starCount] The amount of Telegram Stars that will be paid for the transfer from the business account balance. If positive, then the *can\\\\_transfer\\\\_stars* business bot right is required.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public transferGiftPost(businessConnectionId: string, ownedGiftId: string, newOwnerChatId: number, starCount?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).transferGiftPost(businessConnectionId, ownedGiftId, newOwnerChatId, starCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to unban a previously banned user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don\'t want this, use the parameter *only\\_if\\_banned*. Returns *True* on success.
     * @param {BanChatMemberPostRequestChatId} chatId 
     * @param {number} userId Unique identifier of the target user
     * @param {boolean} [onlyIfBanned] Do nothing if the user is not banned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public unbanChatMemberPost(chatId: BanChatMemberPostRequestChatId, userId: number, onlyIfBanned?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).unbanChatMemberPost(chatId, userId, onlyIfBanned, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {number} senderChatId Unique identifier of the target sender chat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public unbanChatSenderChatPost(chatId: SendMessagePostRequestChatId, senderChatId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).unbanChatSenderChatPost(chatId, senderChatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to unhide the \'General\' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the *can\\_manage\\_topics* administrator rights. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public unhideGeneralForumTopicPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).unhideGeneralForumTopicPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the \'can\\_pin\\_messages\' administrator right in a supergroup or \'can\\_edit\\_messages\' administrator right in a channel. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public unpinAllChatMessagesPost(chatId: SendMessagePostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).unpinAllChatMessagesPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the *can\\_pin\\_messages* administrator right in the supergroup. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {number} messageThreadId Unique identifier for the target message thread of the forum topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public unpinAllForumTopicMessagesPost(chatId: RestrictChatMemberPostRequestChatId, messageThreadId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).unpinAllForumTopicMessagesPost(chatId, messageThreadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the *can\\_pin\\_messages* administrator right in the supergroup. Returns *True* on success.
     * @param {RestrictChatMemberPostRequestChatId} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public unpinAllGeneralForumTopicMessagesPost(chatId: RestrictChatMemberPostRequestChatId, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).unpinAllGeneralForumTopicMessagesPost(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the \'can\\_pin\\_messages\' administrator right in a supergroup or \'can\\_edit\\_messages\' administrator right in a channel. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {string} [businessConnectionId] Unique identifier of the business connection on behalf of which the message will be unpinned
     * @param {number} [messageId] Identifier of the message to unpin. Required if *business\\\\_connection\\\\_id* is specified. If not specified, the most recent pinned message (by sending date) will be unpinned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public unpinChatMessagePost(chatId: SendMessagePostRequestChatId, businessConnectionId?: string, messageId?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).unpinChatMessagePost(chatId, businessConnectionId, messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upgrades a given regular gift to a unique gift. Requires the *can\\_transfer\\_and\\_upgrade\\_gifts* business bot right. Additionally requires the *can\\_transfer\\_stars* business bot right if the upgrade is paid. Returns *True* on success.
     * @param {string} businessConnectionId Unique identifier of the business connection
     * @param {string} ownedGiftId Unique identifier of the regular gift that should be upgraded to a unique one
     * @param {boolean} [keepOriginalDetails] Pass True to keep the original gift text, sender and receiver in the upgraded gift
     * @param {number} [starCount] The amount of Telegram Stars that will be paid for the upgrade from the business account balance. If &#x60;gift.prepaid_upgrade_star_count &gt; 0&#x60;, then pass 0, otherwise, the *can\\\\_transfer\\\\_stars* business bot right is required and &#x60;gift.upgrade_star_count&#x60; must be passed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public upgradeGiftPost(businessConnectionId: string, ownedGiftId: string, keepOriginalDetails?: boolean, starCount?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).upgradeGiftPost(businessConnectionId, ownedGiftId, keepOriginalDetails, starCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to upload a file with a sticker for later use in the [createNewStickerSet](https://core.telegram.org/bots/api/#createnewstickerset), [addStickerToSet](https://core.telegram.org/bots/api/#addstickertoset), or [replaceStickerInSet](https://core.telegram.org/bots/api/#replacestickerinset) methods (the file can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
     * @param {number} userId User identifier of sticker file owner
     * @param {any} sticker 
     * @param {UploadStickerFilePostStickerFormatEnum} stickerFormat Format of the sticker, must be one of “static”, “animated”, “video”
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadStickerFilePost(userId: number, sticker: any, stickerFormat: UploadStickerFilePostStickerFormatEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadStickerFilePost(userId, sticker, stickerFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies a chat [on behalf of the organization](https://telegram.org/verify#third-party-verification) which is represented by the bot. Returns *True* on success.
     * @param {SendMessagePostRequestChatId} chatId 
     * @param {string} [customDescription] Custom description for the verification; 0-70 characters. Must be empty if the organization isn\\\&#39;t allowed to provide a custom verification description.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyChatPost(chatId: SendMessagePostRequestChatId, customDescription?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyChatPost(chatId, customDescription, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies a user [on behalf of the organization](https://telegram.org/verify#third-party-verification) which is represented by the bot. Returns *True* on success.
     * @param {number} userId Unique identifier of the target user
     * @param {string} [customDescription] Custom description for the verification; 0-70 characters. Must be empty if the organization isn\\\&#39;t allowed to provide a custom verification description.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyUserPost(userId: number, customDescription?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyUserPost(userId, customDescription, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CreateForumTopicPostIconColorEnum = {
    NUMBER_7322096: 7322096,
    NUMBER_16766590: 16766590,
    NUMBER_13338331: 13338331,
    NUMBER_9367192: 9367192,
    NUMBER_16749490: 16749490,
    NUMBER_16478047: 16478047
} as const;
export type CreateForumTopicPostIconColorEnum = typeof CreateForumTopicPostIconColorEnum[keyof typeof CreateForumTopicPostIconColorEnum];
/**
 * @export
 */
export const CreateNewStickerSetPostStickerTypeEnum = {
    Mask: 'mask',
    CustomEmoji: 'custom_emoji'
} as const;
export type CreateNewStickerSetPostStickerTypeEnum = typeof CreateNewStickerSetPostStickerTypeEnum[keyof typeof CreateNewStickerSetPostStickerTypeEnum];
/**
 * @export
 */
export const GiftPremiumSubscriptionPostMonthCountEnum = {
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12
} as const;
export type GiftPremiumSubscriptionPostMonthCountEnum = typeof GiftPremiumSubscriptionPostMonthCountEnum[keyof typeof GiftPremiumSubscriptionPostMonthCountEnum];
/**
 * @export
 */
export const PostStoryPostActivePeriodEnum = {
    NUMBER_86400: 86400
} as const;
export type PostStoryPostActivePeriodEnum = typeof PostStoryPostActivePeriodEnum[keyof typeof PostStoryPostActivePeriodEnum];
/**
 * @export
 */
export const SendChatActionPostActionEnum = {
    Typing: 'typing',
    UploadPhoto: 'upload_photo',
    RecordVideo: 'record_video',
    UploadVideo: 'upload_video',
    RecordVoice: 'record_voice',
    UploadVoice: 'upload_voice',
    UploadDocument: 'upload_document',
    ChooseSticker: 'choose_sticker',
    FindLocation: 'find_location',
    RecordVideoNote: 'record_video_note',
    UploadVideoNote: 'upload_video_note'
} as const;
export type SendChatActionPostActionEnum = typeof SendChatActionPostActionEnum[keyof typeof SendChatActionPostActionEnum];
/**
 * @export
 */
export const SendDicePostEmojiEnum = {
    : '🎲',
    2: '🎯',
    3: '🏀',
    4: '⚽',
    5: '🎳',
    6: '🎰'
} as const;
export type SendDicePostEmojiEnum = typeof SendDicePostEmojiEnum[keyof typeof SendDicePostEmojiEnum];
/**
 * @export
 */
export const SendPollPostTypeEnum = {
    Quiz: 'quiz',
    Regular: 'regular'
} as const;
export type SendPollPostTypeEnum = typeof SendPollPostTypeEnum[keyof typeof SendPollPostTypeEnum];
/**
 * @export
 */
export const SetStickerSetThumbnailPostFormatEnum = {
    Static: 'static',
    Animated: 'animated',
    Video: 'video'
} as const;
export type SetStickerSetThumbnailPostFormatEnum = typeof SetStickerSetThumbnailPostFormatEnum[keyof typeof SetStickerSetThumbnailPostFormatEnum];
/**
 * @export
 */
export const UploadStickerFilePostStickerFormatEnum = {
    Static: 'static',
    Animated: 'animated',
    Video: 'video'
} as const;
export type UploadStickerFilePostStickerFormatEnum = typeof UploadStickerFilePostStickerFormatEnum[keyof typeof UploadStickerFilePostStickerFormatEnum];


